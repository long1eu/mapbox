// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: expression.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Com_Tophap_MapboxGl_Proto_Expression {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `operator`: String {
    get {return _storage._operator}
    set {_uniqueStorage()._operator = newValue}
  }

  var arguments: [Com_Tophap_MapboxGl_Proto_Expression] {
    get {return _storage._arguments}
    set {_uniqueStorage()._arguments = newValue}
  }

  var data: OneOf_Data? {
    get {return _storage._data}
    set {_uniqueStorage()._data = newValue}
  }

  var map: Com_Tophap_MapboxGl_Proto_MapExpression {
    get {
      if case .map(let v)? = _storage._data {return v}
      return Com_Tophap_MapboxGl_Proto_MapExpression()
    }
    set {_uniqueStorage()._data = .map(newValue)}
  }

  var literal: Com_Tophap_MapboxGl_Proto_Value {
    get {
      if case .literal(let v)? = _storage._data {return v}
      return Com_Tophap_MapboxGl_Proto_Value()
    }
    set {_uniqueStorage()._data = .literal(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Data: Equatable {
    case map(Com_Tophap_MapboxGl_Proto_MapExpression)
    case literal(Com_Tophap_MapboxGl_Proto_Value)

  #if !swift(>=4.1)
    static func ==(lhs: Com_Tophap_MapboxGl_Proto_Expression.OneOf_Data, rhs: Com_Tophap_MapboxGl_Proto_Expression.OneOf_Data) -> Bool {
      switch (lhs, rhs) {
      case (.map(let l), .map(let r)): return l == r
      case (.literal(let l), .literal(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Com_Tophap_MapboxGl_Proto_Value {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var kind: OneOf_Kind? {
    get {return _storage._kind}
    set {_uniqueStorage()._kind = newValue}
  }

  var intValue: Int32 {
    get {
      if case .intValue(let v)? = _storage._kind {return v}
      return 0
    }
    set {_uniqueStorage()._kind = .intValue(newValue)}
  }

  var doubleValue: Double {
    get {
      if case .doubleValue(let v)? = _storage._kind {return v}
      return 0
    }
    set {_uniqueStorage()._kind = .doubleValue(newValue)}
  }

  var stringValue: String {
    get {
      if case .stringValue(let v)? = _storage._kind {return v}
      return String()
    }
    set {_uniqueStorage()._kind = .stringValue(newValue)}
  }

  var boolValue: Bool {
    get {
      if case .boolValue(let v)? = _storage._kind {return v}
      return false
    }
    set {_uniqueStorage()._kind = .boolValue(newValue)}
  }

  var listValue: Com_Tophap_MapboxGl_Proto_ListValue {
    get {
      if case .listValue(let v)? = _storage._kind {return v}
      return Com_Tophap_MapboxGl_Proto_ListValue()
    }
    set {_uniqueStorage()._kind = .listValue(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Kind: Equatable {
    case intValue(Int32)
    case doubleValue(Double)
    case stringValue(String)
    case boolValue(Bool)
    case listValue(Com_Tophap_MapboxGl_Proto_ListValue)

  #if !swift(>=4.1)
    static func ==(lhs: Com_Tophap_MapboxGl_Proto_Value.OneOf_Kind, rhs: Com_Tophap_MapboxGl_Proto_Value.OneOf_Kind) -> Bool {
      switch (lhs, rhs) {
      case (.intValue(let l), .intValue(let r)): return l == r
      case (.doubleValue(let l), .doubleValue(let r)): return l == r
      case (.stringValue(let l), .stringValue(let r)): return l == r
      case (.boolValue(let l), .boolValue(let r)): return l == r
      case (.listValue(let l), .listValue(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Com_Tophap_MapboxGl_Proto_ListValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var values: [Com_Tophap_MapboxGl_Proto_Value] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Tophap_MapboxGl_Proto_MapExpression {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var map: Dictionary<String,Com_Tophap_MapboxGl_Proto_Expression> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.tophap.mapbox_gl.proto"

extension Com_Tophap_MapboxGl_Proto_Expression: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Expression"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operator"),
    2: .same(proto: "arguments"),
    3: .same(proto: "map"),
    4: .same(proto: "literal"),
  ]

  fileprivate class _StorageClass {
    var _operator: String = String()
    var _arguments: [Com_Tophap_MapboxGl_Proto_Expression] = []
    var _data: Com_Tophap_MapboxGl_Proto_Expression.OneOf_Data?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _operator = source._operator
      _arguments = source._arguments
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._operator)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._arguments)
        case 3:
          var v: Com_Tophap_MapboxGl_Proto_MapExpression?
          if let current = _storage._data {
            try decoder.handleConflictingOneOf()
            if case .map(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._data = .map(v)}
        case 4:
          var v: Com_Tophap_MapboxGl_Proto_Value?
          if let current = _storage._data {
            try decoder.handleConflictingOneOf()
            if case .literal(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._data = .literal(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._operator.isEmpty {
        try visitor.visitSingularStringField(value: _storage._operator, fieldNumber: 1)
      }
      if !_storage._arguments.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._arguments, fieldNumber: 2)
      }
      switch _storage._data {
      case .map(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .literal(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_MapboxGl_Proto_Expression, rhs: Com_Tophap_MapboxGl_Proto_Expression) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._operator != rhs_storage._operator {return false}
        if _storage._arguments != rhs_storage._arguments {return false}
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Tophap_MapboxGl_Proto_Value: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Value"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "int_value"),
    2: .standard(proto: "double_value"),
    3: .standard(proto: "string_value"),
    4: .standard(proto: "bool_value"),
    5: .standard(proto: "list_value"),
  ]

  fileprivate class _StorageClass {
    var _kind: Com_Tophap_MapboxGl_Proto_Value.OneOf_Kind?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _kind = source._kind
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          if _storage._kind != nil {try decoder.handleConflictingOneOf()}
          var v: Int32?
          try decoder.decodeSingularInt32Field(value: &v)
          if let v = v {_storage._kind = .intValue(v)}
        case 2:
          if _storage._kind != nil {try decoder.handleConflictingOneOf()}
          var v: Double?
          try decoder.decodeSingularDoubleField(value: &v)
          if let v = v {_storage._kind = .doubleValue(v)}
        case 3:
          if _storage._kind != nil {try decoder.handleConflictingOneOf()}
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {_storage._kind = .stringValue(v)}
        case 4:
          if _storage._kind != nil {try decoder.handleConflictingOneOf()}
          var v: Bool?
          try decoder.decodeSingularBoolField(value: &v)
          if let v = v {_storage._kind = .boolValue(v)}
        case 5:
          var v: Com_Tophap_MapboxGl_Proto_ListValue?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .listValue(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .listValue(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._kind {
      case .intValue(let v)?:
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
      case .doubleValue(let v)?:
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
      case .stringValue(let v)?:
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      case .boolValue(let v)?:
        try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
      case .listValue(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_MapboxGl_Proto_Value, rhs: Com_Tophap_MapboxGl_Proto_Value) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._kind != rhs_storage._kind {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Tophap_MapboxGl_Proto_ListValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListValue"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "values"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.values)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.values.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.values, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_MapboxGl_Proto_ListValue, rhs: Com_Tophap_MapboxGl_Proto_ListValue) -> Bool {
    if lhs.values != rhs.values {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Tophap_MapboxGl_Proto_MapExpression: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MapExpression"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "map"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Com_Tophap_MapboxGl_Proto_Expression>.self, value: &self.map)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.map.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Com_Tophap_MapboxGl_Proto_Expression>.self, value: self.map, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_MapboxGl_Proto_MapExpression, rhs: Com_Tophap_MapboxGl_Proto_MapExpression) -> Bool {
    if lhs.map != rhs.map {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
