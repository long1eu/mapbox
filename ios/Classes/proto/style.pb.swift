// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: style.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Com_Tophap_Mapboxgl_Proto_Style {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uri: String {
    get {return _storage._uri}
    set {_uniqueStorage()._uri = newValue}
  }

  var json: String {
    get {return _storage._json}
    set {_uniqueStorage()._json = newValue}
  }

  var sources: [Com_Tophap_Mapboxgl_Proto_Source] {
    get {return _storage._sources}
    set {_uniqueStorage()._sources = newValue}
  }

  var layers: [Com_Tophap_Mapboxgl_Proto_Layer] {
    get {return _storage._layers}
    set {_uniqueStorage()._layers = newValue}
  }

  var transition: Com_Tophap_Mapboxgl_Proto_TransitionOptions {
    get {return _storage._transition ?? Com_Tophap_Mapboxgl_Proto_TransitionOptions()}
    set {_uniqueStorage()._transition = newValue}
  }
  /// Returns true if `transition` has been explicitly set.
  var hasTransition: Bool {return _storage._transition != nil}
  /// Clears the value of `transition`. Subsequent reads from it will return its default value.
  mutating func clearTransition() {_uniqueStorage()._transition = nil}

  var light: Com_Tophap_Mapboxgl_Proto_Style.Light {
    get {return _storage._light ?? Com_Tophap_Mapboxgl_Proto_Style.Light()}
    set {_uniqueStorage()._light = newValue}
  }
  /// Returns true if `light` has been explicitly set.
  var hasLight: Bool {return _storage._light != nil}
  /// Clears the value of `light`. Subsequent reads from it will return its default value.
  mutating func clearLight() {_uniqueStorage()._light = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum MapboxStyle: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case mapboxStreets // = 0
    case outdoors // = 1
    case light // = 2
    case dark // = 3
    case satellite // = 4
    case satelliteStreets // = 5
    case trafficDay // = 6
    case trafficNight // = 7
    case UNRECOGNIZED(Int)

    init() {
      self = .mapboxStreets
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .mapboxStreets
      case 1: self = .outdoors
      case 2: self = .light
      case 3: self = .dark
      case 4: self = .satellite
      case 5: self = .satelliteStreets
      case 6: self = .trafficDay
      case 7: self = .trafficNight
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .mapboxStreets: return 0
      case .outdoors: return 1
      case .light: return 2
      case .dark: return 3
      case .satellite: return 4
      case .satelliteStreets: return 5
      case .trafficDay: return 6
      case .trafficNight: return 7
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  struct Light {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var anchor: Com_Tophap_Mapboxgl_Proto_TranslateAnchor {
      get {return _storage._anchor}
      set {_uniqueStorage()._anchor = newValue}
    }

    var position: Com_Tophap_Mapboxgl_Proto_Style.Position {
      get {return _storage._position ?? Com_Tophap_Mapboxgl_Proto_Style.Position()}
      set {_uniqueStorage()._position = newValue}
    }
    /// Returns true if `position` has been explicitly set.
    var hasPosition: Bool {return _storage._position != nil}
    /// Clears the value of `position`. Subsequent reads from it will return its default value.
    mutating func clearPosition() {_uniqueStorage()._position = nil}

    var color: Com_Tophap_Mapboxgl_Proto_Color {
      get {return _storage._color ?? Com_Tophap_Mapboxgl_Proto_Color()}
      set {_uniqueStorage()._color = newValue}
    }
    /// Returns true if `color` has been explicitly set.
    var hasColor: Bool {return _storage._color != nil}
    /// Clears the value of `color`. Subsequent reads from it will return its default value.
    mutating func clearColor() {_uniqueStorage()._color = nil}

    var intensity: Float {
      get {return _storage._intensity}
      set {_uniqueStorage()._intensity = newValue}
    }

    var positionTransition: Com_Tophap_Mapboxgl_Proto_TransitionOptions {
      get {return _storage._positionTransition ?? Com_Tophap_Mapboxgl_Proto_TransitionOptions()}
      set {_uniqueStorage()._positionTransition = newValue}
    }
    /// Returns true if `positionTransition` has been explicitly set.
    var hasPositionTransition: Bool {return _storage._positionTransition != nil}
    /// Clears the value of `positionTransition`. Subsequent reads from it will return its default value.
    mutating func clearPositionTransition() {_uniqueStorage()._positionTransition = nil}

    var colorTransition: Com_Tophap_Mapboxgl_Proto_TransitionOptions {
      get {return _storage._colorTransition ?? Com_Tophap_Mapboxgl_Proto_TransitionOptions()}
      set {_uniqueStorage()._colorTransition = newValue}
    }
    /// Returns true if `colorTransition` has been explicitly set.
    var hasColorTransition: Bool {return _storage._colorTransition != nil}
    /// Clears the value of `colorTransition`. Subsequent reads from it will return its default value.
    mutating func clearColorTransition() {_uniqueStorage()._colorTransition = nil}

    var intensityTransition: Com_Tophap_Mapboxgl_Proto_TransitionOptions {
      get {return _storage._intensityTransition ?? Com_Tophap_Mapboxgl_Proto_TransitionOptions()}
      set {_uniqueStorage()._intensityTransition = newValue}
    }
    /// Returns true if `intensityTransition` has been explicitly set.
    var hasIntensityTransition: Bool {return _storage._intensityTransition != nil}
    /// Clears the value of `intensityTransition`. Subsequent reads from it will return its default value.
    mutating func clearIntensityTransition() {_uniqueStorage()._intensityTransition = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct Position {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var radialCoordinate: Float = 0

    var azimuthalAngle: Float = 0

    var polarAngle: Float = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct Operations {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct Build {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var source: Com_Tophap_Mapboxgl_Proto_Style.Operations.Build.OneOf_Source? = nil

      var `default`: Com_Tophap_Mapboxgl_Proto_Style.MapboxStyle {
        get {
          if case .default(let v)? = source {return v}
          return .mapboxStreets
        }
        set {source = .default(newValue)}
      }

      var uri: String {
        get {
          if case .uri(let v)? = source {return v}
          return String()
        }
        set {source = .uri(newValue)}
      }

      var json: String {
        get {
          if case .json(let v)? = source {return v}
          return String()
        }
        set {source = .json(newValue)}
      }

      var unknownFields = SwiftProtobuf.UnknownStorage()

      enum OneOf_Source: Equatable {
        case `default`(Com_Tophap_Mapboxgl_Proto_Style.MapboxStyle)
        case uri(String)
        case json(String)

      #if !swift(>=4.1)
        static func ==(lhs: Com_Tophap_Mapboxgl_Proto_Style.Operations.Build.OneOf_Source, rhs: Com_Tophap_Mapboxgl_Proto_Style.Operations.Build.OneOf_Source) -> Bool {
          switch (lhs, rhs) {
          case (.default(let l), .default(let r)): return l == r
          case (.uri(let l), .uri(let r)): return l == r
          case (.json(let l), .json(let r)): return l == r
          default: return false
          }
        }
      #endif
      }

      init() {}
    }

    init() {}
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Com_Tophap_Mapboxgl_Proto_Style.MapboxStyle: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Com_Tophap_Mapboxgl_Proto_Style.MapboxStyle] = [
    .mapboxStreets,
    .outdoors,
    .light,
    .dark,
    .satellite,
    .satelliteStreets,
    .trafficDay,
    .trafficNight,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.tophap.mapboxgl.proto"

extension Com_Tophap_Mapboxgl_Proto_Style: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Style"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uri"),
    2: .same(proto: "json"),
    3: .same(proto: "sources"),
    4: .same(proto: "layers"),
    5: .same(proto: "transition"),
    6: .same(proto: "light"),
  ]

  fileprivate class _StorageClass {
    var _uri: String = String()
    var _json: String = String()
    var _sources: [Com_Tophap_Mapboxgl_Proto_Source] = []
    var _layers: [Com_Tophap_Mapboxgl_Proto_Layer] = []
    var _transition: Com_Tophap_Mapboxgl_Proto_TransitionOptions? = nil
    var _light: Com_Tophap_Mapboxgl_Proto_Style.Light? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _uri = source._uri
      _json = source._json
      _sources = source._sources
      _layers = source._layers
      _transition = source._transition
      _light = source._light
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._uri)
        case 2: try decoder.decodeSingularStringField(value: &_storage._json)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._sources)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._layers)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._transition)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._light)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._uri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uri, fieldNumber: 1)
      }
      if !_storage._json.isEmpty {
        try visitor.visitSingularStringField(value: _storage._json, fieldNumber: 2)
      }
      if !_storage._sources.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._sources, fieldNumber: 3)
      }
      if !_storage._layers.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._layers, fieldNumber: 4)
      }
      if let v = _storage._transition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._light {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_Mapboxgl_Proto_Style, rhs: Com_Tophap_Mapboxgl_Proto_Style) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._uri != rhs_storage._uri {return false}
        if _storage._json != rhs_storage._json {return false}
        if _storage._sources != rhs_storage._sources {return false}
        if _storage._layers != rhs_storage._layers {return false}
        if _storage._transition != rhs_storage._transition {return false}
        if _storage._light != rhs_storage._light {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Tophap_Mapboxgl_Proto_Style.MapboxStyle: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MAPBOX_STREETS"),
    1: .same(proto: "OUTDOORS"),
    2: .same(proto: "LIGHT"),
    3: .same(proto: "DARK"),
    4: .same(proto: "SATELLITE"),
    5: .same(proto: "SATELLITE_STREETS"),
    6: .same(proto: "TRAFFIC_DAY"),
    7: .same(proto: "TRAFFIC_NIGHT"),
  ]
}

extension Com_Tophap_Mapboxgl_Proto_Style.Light: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Tophap_Mapboxgl_Proto_Style.protoMessageName + ".Light"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "anchor"),
    2: .same(proto: "position"),
    3: .same(proto: "color"),
    4: .same(proto: "intensity"),
    5: .same(proto: "positionTransition"),
    6: .same(proto: "colorTransition"),
    7: .same(proto: "intensityTransition"),
  ]

  fileprivate class _StorageClass {
    var _anchor: Com_Tophap_Mapboxgl_Proto_TranslateAnchor = .map
    var _position: Com_Tophap_Mapboxgl_Proto_Style.Position? = nil
    var _color: Com_Tophap_Mapboxgl_Proto_Color? = nil
    var _intensity: Float = 0
    var _positionTransition: Com_Tophap_Mapboxgl_Proto_TransitionOptions? = nil
    var _colorTransition: Com_Tophap_Mapboxgl_Proto_TransitionOptions? = nil
    var _intensityTransition: Com_Tophap_Mapboxgl_Proto_TransitionOptions? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _anchor = source._anchor
      _position = source._position
      _color = source._color
      _intensity = source._intensity
      _positionTransition = source._positionTransition
      _colorTransition = source._colorTransition
      _intensityTransition = source._intensityTransition
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._anchor)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._position)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._color)
        case 4: try decoder.decodeSingularFloatField(value: &_storage._intensity)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._positionTransition)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._colorTransition)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._intensityTransition)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._anchor != .map {
        try visitor.visitSingularEnumField(value: _storage._anchor, fieldNumber: 1)
      }
      if let v = _storage._position {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._color {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _storage._intensity != 0 {
        try visitor.visitSingularFloatField(value: _storage._intensity, fieldNumber: 4)
      }
      if let v = _storage._positionTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._colorTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._intensityTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_Mapboxgl_Proto_Style.Light, rhs: Com_Tophap_Mapboxgl_Proto_Style.Light) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._anchor != rhs_storage._anchor {return false}
        if _storage._position != rhs_storage._position {return false}
        if _storage._color != rhs_storage._color {return false}
        if _storage._intensity != rhs_storage._intensity {return false}
        if _storage._positionTransition != rhs_storage._positionTransition {return false}
        if _storage._colorTransition != rhs_storage._colorTransition {return false}
        if _storage._intensityTransition != rhs_storage._intensityTransition {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Tophap_Mapboxgl_Proto_Style.Position: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Tophap_Mapboxgl_Proto_Style.protoMessageName + ".Position"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "radial_coordinate"),
    2: .standard(proto: "azimuthal_angle"),
    3: .standard(proto: "polar_angle"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.radialCoordinate)
      case 2: try decoder.decodeSingularFloatField(value: &self.azimuthalAngle)
      case 3: try decoder.decodeSingularFloatField(value: &self.polarAngle)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.radialCoordinate != 0 {
      try visitor.visitSingularFloatField(value: self.radialCoordinate, fieldNumber: 1)
    }
    if self.azimuthalAngle != 0 {
      try visitor.visitSingularFloatField(value: self.azimuthalAngle, fieldNumber: 2)
    }
    if self.polarAngle != 0 {
      try visitor.visitSingularFloatField(value: self.polarAngle, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_Mapboxgl_Proto_Style.Position, rhs: Com_Tophap_Mapboxgl_Proto_Style.Position) -> Bool {
    if lhs.radialCoordinate != rhs.radialCoordinate {return false}
    if lhs.azimuthalAngle != rhs.azimuthalAngle {return false}
    if lhs.polarAngle != rhs.polarAngle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Tophap_Mapboxgl_Proto_Style.Operations: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Tophap_Mapboxgl_Proto_Style.protoMessageName + ".Operations"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_Mapboxgl_Proto_Style.Operations, rhs: Com_Tophap_Mapboxgl_Proto_Style.Operations) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Tophap_Mapboxgl_Proto_Style.Operations.Build: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Tophap_Mapboxgl_Proto_Style.Operations.protoMessageName + ".Build"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "default"),
    2: .same(proto: "uri"),
    3: .same(proto: "json"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        if self.source != nil {try decoder.handleConflictingOneOf()}
        var v: Com_Tophap_Mapboxgl_Proto_Style.MapboxStyle?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {self.source = .default(v)}
      case 2:
        if self.source != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.source = .uri(v)}
      case 3:
        if self.source != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.source = .json(v)}
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.source {
    case .default(let v)?:
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    case .uri(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    case .json(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_Mapboxgl_Proto_Style.Operations.Build, rhs: Com_Tophap_Mapboxgl_Proto_Style.Operations.Build) -> Bool {
    if lhs.source != rhs.source {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
