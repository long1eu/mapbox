// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: util.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Tophap_MapboxGl_OrnamentPosition: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case topLeft // = 0
  case topRight // = 1
  case bottomLeft // = 2
  case bottomRight // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .topLeft
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .topLeft
    case 1: self = .topRight
    case 2: self = .bottomLeft
    case 3: self = .bottomRight
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .topLeft: return 0
    case .topRight: return 1
    case .bottomLeft: return 2
    case .bottomRight: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Tophap_MapboxGl_OrnamentPosition: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Tophap_MapboxGl_OrnamentPosition] = [
    .topLeft,
    .topRight,
    .bottomLeft,
    .bottomRight,
  ]
}

#endif  // swift(>=4.2)

enum Tophap_MapboxGl_TranslateAnchor: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case map // = 0
  case viewport // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .map
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .map
    case 1: self = .viewport
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .map: return 0
    case .viewport: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Tophap_MapboxGl_TranslateAnchor: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Tophap_MapboxGl_TranslateAnchor] = [
    .map,
    .viewport,
  ]
}

#endif  // swift(>=4.2)

enum Tophap_MapboxGl_PositionAnchor: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case positionCenter // = 0
  case positionLeft // = 1
  case positionRight // = 2
  case positionTop // = 3
  case positionBottom // = 4
  case positionTopLeft // = 5
  case positionTopRight // = 6
  case positionBottomLeft // = 7
  case positionBottomRight // = 8
  case UNRECOGNIZED(Int)

  init() {
    self = .positionCenter
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .positionCenter
    case 1: self = .positionLeft
    case 2: self = .positionRight
    case 3: self = .positionTop
    case 4: self = .positionBottom
    case 5: self = .positionTopLeft
    case 6: self = .positionTopRight
    case 7: self = .positionBottomLeft
    case 8: self = .positionBottomRight
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .positionCenter: return 0
    case .positionLeft: return 1
    case .positionRight: return 2
    case .positionTop: return 3
    case .positionBottom: return 4
    case .positionTopLeft: return 5
    case .positionTopRight: return 6
    case .positionBottomLeft: return 7
    case .positionBottomRight: return 8
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Tophap_MapboxGl_PositionAnchor: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Tophap_MapboxGl_PositionAnchor] = [
    .positionCenter,
    .positionLeft,
    .positionRight,
    .positionTop,
    .positionBottom,
    .positionTopLeft,
    .positionTopRight,
    .positionBottomLeft,
    .positionBottomRight,
  ]
}

#endif  // swift(>=4.2)

struct Tophap_MapboxGl_FormattedSection {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var text: String {
    get {return _storage._text}
    set {_uniqueStorage()._text = newValue}
  }

  var fontScale: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _storage._fontScale ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_uniqueStorage()._fontScale = newValue}
  }
  /// Returns true if `fontScale` has been explicitly set.
  var hasFontScale: Bool {return _storage._fontScale != nil}
  /// Clears the value of `fontScale`. Subsequent reads from it will return its default value.
  mutating func clearFontScale() {_uniqueStorage()._fontScale = nil}

  var fontStack: [String] {
    get {return _storage._fontStack}
    set {_uniqueStorage()._fontStack = newValue}
  }

  var textColor: Tophap_MapboxGl_Color {
    get {return _storage._textColor ?? Tophap_MapboxGl_Color()}
    set {_uniqueStorage()._textColor = newValue}
  }
  /// Returns true if `textColor` has been explicitly set.
  var hasTextColor: Bool {return _storage._textColor != nil}
  /// Clears the value of `textColor`. Subsequent reads from it will return its default value.
  mutating func clearTextColor() {_uniqueStorage()._textColor = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Tophap_MapboxGl_TransitionOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var duration: Int64 = 0

  var delay: Int64 = 0

  var enablePlacementTransitions: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Tophap_MapboxGl_LatLng {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var latitude: Double = 0

  var longitude: Double = 0

  var altitude: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Tophap_MapboxGl_LatLngQuad {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var topLeft: Tophap_MapboxGl_LatLng {
    get {return _storage._topLeft ?? Tophap_MapboxGl_LatLng()}
    set {_uniqueStorage()._topLeft = newValue}
  }
  /// Returns true if `topLeft` has been explicitly set.
  var hasTopLeft: Bool {return _storage._topLeft != nil}
  /// Clears the value of `topLeft`. Subsequent reads from it will return its default value.
  mutating func clearTopLeft() {_uniqueStorage()._topLeft = nil}

  var topRight: Tophap_MapboxGl_LatLng {
    get {return _storage._topRight ?? Tophap_MapboxGl_LatLng()}
    set {_uniqueStorage()._topRight = newValue}
  }
  /// Returns true if `topRight` has been explicitly set.
  var hasTopRight: Bool {return _storage._topRight != nil}
  /// Clears the value of `topRight`. Subsequent reads from it will return its default value.
  mutating func clearTopRight() {_uniqueStorage()._topRight = nil}

  var bottomRight: Tophap_MapboxGl_LatLng {
    get {return _storage._bottomRight ?? Tophap_MapboxGl_LatLng()}
    set {_uniqueStorage()._bottomRight = newValue}
  }
  /// Returns true if `bottomRight` has been explicitly set.
  var hasBottomRight: Bool {return _storage._bottomRight != nil}
  /// Clears the value of `bottomRight`. Subsequent reads from it will return its default value.
  mutating func clearBottomRight() {_uniqueStorage()._bottomRight = nil}

  var bottomLeft: Tophap_MapboxGl_LatLng {
    get {return _storage._bottomLeft ?? Tophap_MapboxGl_LatLng()}
    set {_uniqueStorage()._bottomLeft = newValue}
  }
  /// Returns true if `bottomLeft` has been explicitly set.
  var hasBottomLeft: Bool {return _storage._bottomLeft != nil}
  /// Clears the value of `bottomLeft`. Subsequent reads from it will return its default value.
  mutating func clearBottomLeft() {_uniqueStorage()._bottomLeft = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Tophap_MapboxGl_LatLngBounds {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var latitudeNorth: Double = 0

  var latitudeSouth: Double = 0

  var longitudeEast: Double = 0

  var longitudeWest: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Tophap_MapboxGl_Color {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var red: Int32 = 0

  var green: Int32 = 0

  var blue: Int32 = 0

  var alpha: Int32 = 0

  var opacity: Float = 0

  var hasColor_p: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tophap.mapbox_gl"

extension Tophap_MapboxGl_OrnamentPosition: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TOP_LEFT"),
    1: .same(proto: "TOP_RIGHT"),
    2: .same(proto: "BOTTOM_LEFT"),
    3: .same(proto: "BOTTOM_RIGHT"),
  ]
}

extension Tophap_MapboxGl_TranslateAnchor: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MAP"),
    1: .same(proto: "VIEWPORT"),
  ]
}

extension Tophap_MapboxGl_PositionAnchor: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "POSITION_CENTER"),
    1: .same(proto: "POSITION_LEFT"),
    2: .same(proto: "POSITION_RIGHT"),
    3: .same(proto: "POSITION_TOP"),
    4: .same(proto: "POSITION_BOTTOM"),
    5: .same(proto: "POSITION_TOP_LEFT"),
    6: .same(proto: "POSITION_TOP_RIGHT"),
    7: .same(proto: "POSITION_BOTTOM_LEFT"),
    8: .same(proto: "POSITION_BOTTOM_RIGHT"),
  ]
}

extension Tophap_MapboxGl_FormattedSection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FormattedSection"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .standard(proto: "font_scale"),
    3: .standard(proto: "font_stack"),
    4: .standard(proto: "text_color"),
  ]

  fileprivate class _StorageClass {
    var _text: String = String()
    var _fontScale: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
    var _fontStack: [String] = []
    var _textColor: Tophap_MapboxGl_Color? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _text = source._text
      _fontScale = source._fontScale
      _fontStack = source._fontStack
      _textColor = source._textColor
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._text)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._fontScale)
        case 3: try decoder.decodeRepeatedStringField(value: &_storage._fontStack)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._textColor)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._text.isEmpty {
        try visitor.visitSingularStringField(value: _storage._text, fieldNumber: 1)
      }
      if let v = _storage._fontScale {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._fontStack.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._fontStack, fieldNumber: 3)
      }
      if let v = _storage._textColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tophap_MapboxGl_FormattedSection, rhs: Tophap_MapboxGl_FormattedSection) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._text != rhs_storage._text {return false}
        if _storage._fontScale != rhs_storage._fontScale {return false}
        if _storage._fontStack != rhs_storage._fontStack {return false}
        if _storage._textColor != rhs_storage._textColor {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tophap_MapboxGl_TransitionOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TransitionOptions"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "duration"),
    2: .same(proto: "delay"),
    3: .standard(proto: "enable_placement_transitions"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.duration)
      case 2: try decoder.decodeSingularInt64Field(value: &self.delay)
      case 3: try decoder.decodeSingularBoolField(value: &self.enablePlacementTransitions)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.duration != 0 {
      try visitor.visitSingularInt64Field(value: self.duration, fieldNumber: 1)
    }
    if self.delay != 0 {
      try visitor.visitSingularInt64Field(value: self.delay, fieldNumber: 2)
    }
    if self.enablePlacementTransitions != false {
      try visitor.visitSingularBoolField(value: self.enablePlacementTransitions, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tophap_MapboxGl_TransitionOptions, rhs: Tophap_MapboxGl_TransitionOptions) -> Bool {
    if lhs.duration != rhs.duration {return false}
    if lhs.delay != rhs.delay {return false}
    if lhs.enablePlacementTransitions != rhs.enablePlacementTransitions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tophap_MapboxGl_LatLng: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LatLng"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "latitude"),
    2: .same(proto: "longitude"),
    3: .same(proto: "altitude"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.latitude)
      case 2: try decoder.decodeSingularDoubleField(value: &self.longitude)
      case 3: try decoder.decodeSingularDoubleField(value: &self.altitude)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.latitude != 0 {
      try visitor.visitSingularDoubleField(value: self.latitude, fieldNumber: 1)
    }
    if self.longitude != 0 {
      try visitor.visitSingularDoubleField(value: self.longitude, fieldNumber: 2)
    }
    if self.altitude != 0 {
      try visitor.visitSingularDoubleField(value: self.altitude, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tophap_MapboxGl_LatLng, rhs: Tophap_MapboxGl_LatLng) -> Bool {
    if lhs.latitude != rhs.latitude {return false}
    if lhs.longitude != rhs.longitude {return false}
    if lhs.altitude != rhs.altitude {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tophap_MapboxGl_LatLngQuad: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LatLngQuad"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "topLeft"),
    2: .same(proto: "topRight"),
    3: .same(proto: "bottomRight"),
    4: .same(proto: "bottomLeft"),
  ]

  fileprivate class _StorageClass {
    var _topLeft: Tophap_MapboxGl_LatLng? = nil
    var _topRight: Tophap_MapboxGl_LatLng? = nil
    var _bottomRight: Tophap_MapboxGl_LatLng? = nil
    var _bottomLeft: Tophap_MapboxGl_LatLng? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _topLeft = source._topLeft
      _topRight = source._topRight
      _bottomRight = source._bottomRight
      _bottomLeft = source._bottomLeft
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._topLeft)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._topRight)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._bottomRight)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._bottomLeft)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._topLeft {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._topRight {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._bottomRight {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._bottomLeft {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tophap_MapboxGl_LatLngQuad, rhs: Tophap_MapboxGl_LatLngQuad) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._topLeft != rhs_storage._topLeft {return false}
        if _storage._topRight != rhs_storage._topRight {return false}
        if _storage._bottomRight != rhs_storage._bottomRight {return false}
        if _storage._bottomLeft != rhs_storage._bottomLeft {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tophap_MapboxGl_LatLngBounds: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LatLngBounds"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "latitudeNorth"),
    2: .same(proto: "latitudeSouth"),
    3: .same(proto: "longitudeEast"),
    4: .same(proto: "longitudeWest"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.latitudeNorth)
      case 2: try decoder.decodeSingularDoubleField(value: &self.latitudeSouth)
      case 3: try decoder.decodeSingularDoubleField(value: &self.longitudeEast)
      case 4: try decoder.decodeSingularDoubleField(value: &self.longitudeWest)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.latitudeNorth != 0 {
      try visitor.visitSingularDoubleField(value: self.latitudeNorth, fieldNumber: 1)
    }
    if self.latitudeSouth != 0 {
      try visitor.visitSingularDoubleField(value: self.latitudeSouth, fieldNumber: 2)
    }
    if self.longitudeEast != 0 {
      try visitor.visitSingularDoubleField(value: self.longitudeEast, fieldNumber: 3)
    }
    if self.longitudeWest != 0 {
      try visitor.visitSingularDoubleField(value: self.longitudeWest, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tophap_MapboxGl_LatLngBounds, rhs: Tophap_MapboxGl_LatLngBounds) -> Bool {
    if lhs.latitudeNorth != rhs.latitudeNorth {return false}
    if lhs.latitudeSouth != rhs.latitudeSouth {return false}
    if lhs.longitudeEast != rhs.longitudeEast {return false}
    if lhs.longitudeWest != rhs.longitudeWest {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tophap_MapboxGl_Color: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Color"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "red"),
    2: .same(proto: "green"),
    3: .same(proto: "blue"),
    4: .same(proto: "alpha"),
    5: .same(proto: "opacity"),
    6: .standard(proto: "has_color"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.red)
      case 2: try decoder.decodeSingularInt32Field(value: &self.green)
      case 3: try decoder.decodeSingularInt32Field(value: &self.blue)
      case 4: try decoder.decodeSingularInt32Field(value: &self.alpha)
      case 5: try decoder.decodeSingularFloatField(value: &self.opacity)
      case 6: try decoder.decodeSingularBoolField(value: &self.hasColor_p)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.red != 0 {
      try visitor.visitSingularInt32Field(value: self.red, fieldNumber: 1)
    }
    if self.green != 0 {
      try visitor.visitSingularInt32Field(value: self.green, fieldNumber: 2)
    }
    if self.blue != 0 {
      try visitor.visitSingularInt32Field(value: self.blue, fieldNumber: 3)
    }
    if self.alpha != 0 {
      try visitor.visitSingularInt32Field(value: self.alpha, fieldNumber: 4)
    }
    if self.opacity != 0 {
      try visitor.visitSingularFloatField(value: self.opacity, fieldNumber: 5)
    }
    if self.hasColor_p != false {
      try visitor.visitSingularBoolField(value: self.hasColor_p, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tophap_MapboxGl_Color, rhs: Tophap_MapboxGl_Color) -> Bool {
    if lhs.red != rhs.red {return false}
    if lhs.green != rhs.green {return false}
    if lhs.blue != rhs.blue {return false}
    if lhs.alpha != rhs.alpha {return false}
    if lhs.opacity != rhs.opacity {return false}
    if lhs.hasColor_p != rhs.hasColor_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
