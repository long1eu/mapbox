// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: layers.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Com_Tophap_MapboxGl_Proto_Layer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: OneOf_Type? {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  var backgroundLayer: Com_Tophap_MapboxGl_Proto_Layer.Background {
    get {
      if case .backgroundLayer(let v)? = _storage._type {return v}
      return Com_Tophap_MapboxGl_Proto_Layer.Background()
    }
    set {_uniqueStorage()._type = .backgroundLayer(newValue)}
  }

  var circleLayer: Com_Tophap_MapboxGl_Proto_Layer.Circle {
    get {
      if case .circleLayer(let v)? = _storage._type {return v}
      return Com_Tophap_MapboxGl_Proto_Layer.Circle()
    }
    set {_uniqueStorage()._type = .circleLayer(newValue)}
  }

  var fillLayer: Com_Tophap_MapboxGl_Proto_Layer.Fill {
    get {
      if case .fillLayer(let v)? = _storage._type {return v}
      return Com_Tophap_MapboxGl_Proto_Layer.Fill()
    }
    set {_uniqueStorage()._type = .fillLayer(newValue)}
  }

  var fillExtrusionLayer: Com_Tophap_MapboxGl_Proto_Layer.FillExtrusion {
    get {
      if case .fillExtrusionLayer(let v)? = _storage._type {return v}
      return Com_Tophap_MapboxGl_Proto_Layer.FillExtrusion()
    }
    set {_uniqueStorage()._type = .fillExtrusionLayer(newValue)}
  }

  var lineLayer: Com_Tophap_MapboxGl_Proto_Layer.Line {
    get {
      if case .lineLayer(let v)? = _storage._type {return v}
      return Com_Tophap_MapboxGl_Proto_Layer.Line()
    }
    set {_uniqueStorage()._type = .lineLayer(newValue)}
  }

  var symbolLayer: Com_Tophap_MapboxGl_Proto_Layer.Symbol {
    get {
      if case .symbolLayer(let v)? = _storage._type {return v}
      return Com_Tophap_MapboxGl_Proto_Layer.Symbol()
    }
    set {_uniqueStorage()._type = .symbolLayer(newValue)}
  }

  var hillshadeLayer: Com_Tophap_MapboxGl_Proto_Layer.Hillshade {
    get {
      if case .hillshadeLayer(let v)? = _storage._type {return v}
      return Com_Tophap_MapboxGl_Proto_Layer.Hillshade()
    }
    set {_uniqueStorage()._type = .hillshadeLayer(newValue)}
  }

  var heatmapLayer: Com_Tophap_MapboxGl_Proto_Layer.Heatmap {
    get {
      if case .heatmapLayer(let v)? = _storage._type {return v}
      return Com_Tophap_MapboxGl_Proto_Layer.Heatmap()
    }
    set {_uniqueStorage()._type = .heatmapLayer(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Type: Equatable {
    case backgroundLayer(Com_Tophap_MapboxGl_Proto_Layer.Background)
    case circleLayer(Com_Tophap_MapboxGl_Proto_Layer.Circle)
    case fillLayer(Com_Tophap_MapboxGl_Proto_Layer.Fill)
    case fillExtrusionLayer(Com_Tophap_MapboxGl_Proto_Layer.FillExtrusion)
    case lineLayer(Com_Tophap_MapboxGl_Proto_Layer.Line)
    case symbolLayer(Com_Tophap_MapboxGl_Proto_Layer.Symbol)
    case hillshadeLayer(Com_Tophap_MapboxGl_Proto_Layer.Hillshade)
    case heatmapLayer(Com_Tophap_MapboxGl_Proto_Layer.Heatmap)

  #if !swift(>=4.1)
    static func ==(lhs: Com_Tophap_MapboxGl_Proto_Layer.OneOf_Type, rhs: Com_Tophap_MapboxGl_Proto_Layer.OneOf_Type) -> Bool {
      switch (lhs, rhs) {
      case (.backgroundLayer(let l), .backgroundLayer(let r)): return l == r
      case (.circleLayer(let l), .circleLayer(let r)): return l == r
      case (.fillLayer(let l), .fillLayer(let r)): return l == r
      case (.fillExtrusionLayer(let l), .fillExtrusionLayer(let r)): return l == r
      case (.lineLayer(let l), .lineLayer(let r)): return l == r
      case (.symbolLayer(let l), .symbolLayer(let r)): return l == r
      case (.hillshadeLayer(let l), .hillshadeLayer(let r)): return l == r
      case (.heatmapLayer(let l), .heatmapLayer(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  struct Background {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String {
      get {return _storage._id}
      set {_uniqueStorage()._id = newValue}
    }

    var visible: Bool {
      get {return _storage._visible}
      set {_uniqueStorage()._visible = newValue}
    }

    var minZoom: Float {
      get {return _storage._minZoom}
      set {_uniqueStorage()._minZoom = newValue}
    }

    var maxZoom: Float {
      get {return _storage._maxZoom}
      set {_uniqueStorage()._maxZoom = newValue}
    }

    var color: Com_Tophap_MapboxGl_Proto_Color {
      get {return _storage._color ?? Com_Tophap_MapboxGl_Proto_Color()}
      set {_uniqueStorage()._color = newValue}
    }
    /// Returns true if `color` has been explicitly set.
    var hasColor: Bool {return _storage._color != nil}
    /// Clears the value of `color`. Subsequent reads from it will return its default value.
    mutating func clearColor() {_uniqueStorage()._color = nil}

    var pattern: String {
      get {return _storage._pattern}
      set {_uniqueStorage()._pattern = newValue}
    }

    var opacity: Float {
      get {return _storage._opacity}
      set {_uniqueStorage()._opacity = newValue}
    }

    var colorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._colorTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._colorTransition = newValue}
    }
    /// Returns true if `colorTransition` has been explicitly set.
    var hasColorTransition: Bool {return _storage._colorTransition != nil}
    /// Clears the value of `colorTransition`. Subsequent reads from it will return its default value.
    mutating func clearColorTransition() {_uniqueStorage()._colorTransition = nil}

    var patternTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._patternTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._patternTransition = newValue}
    }
    /// Returns true if `patternTransition` has been explicitly set.
    var hasPatternTransition: Bool {return _storage._patternTransition != nil}
    /// Clears the value of `patternTransition`. Subsequent reads from it will return its default value.
    mutating func clearPatternTransition() {_uniqueStorage()._patternTransition = nil}

    var opacityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._opacityTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._opacityTransition = newValue}
    }
    /// Returns true if `opacityTransition` has been explicitly set.
    var hasOpacityTransition: Bool {return _storage._opacityTransition != nil}
    /// Clears the value of `opacityTransition`. Subsequent reads from it will return its default value.
    mutating func clearOpacityTransition() {_uniqueStorage()._opacityTransition = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct Circle {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String {
      get {return _storage._id}
      set {_uniqueStorage()._id = newValue}
    }

    var sourceID: String {
      get {return _storage._sourceID}
      set {_uniqueStorage()._sourceID = newValue}
    }

    var visible: Bool {
      get {return _storage._visible}
      set {_uniqueStorage()._visible = newValue}
    }

    var minZoom: Float {
      get {return _storage._minZoom}
      set {_uniqueStorage()._minZoom = newValue}
    }

    var maxZoom: Float {
      get {return _storage._maxZoom}
      set {_uniqueStorage()._maxZoom = newValue}
    }

    var radius: Float {
      get {return _storage._radius}
      set {_uniqueStorage()._radius = newValue}
    }

    var color: Com_Tophap_MapboxGl_Proto_Color {
      get {return _storage._color ?? Com_Tophap_MapboxGl_Proto_Color()}
      set {_uniqueStorage()._color = newValue}
    }
    /// Returns true if `color` has been explicitly set.
    var hasColor: Bool {return _storage._color != nil}
    /// Clears the value of `color`. Subsequent reads from it will return its default value.
    mutating func clearColor() {_uniqueStorage()._color = nil}

    var blur: Float {
      get {return _storage._blur}
      set {_uniqueStorage()._blur = newValue}
    }

    var opacity: Float {
      get {return _storage._opacity}
      set {_uniqueStorage()._opacity = newValue}
    }

    var translate: [Float] {
      get {return _storage._translate}
      set {_uniqueStorage()._translate = newValue}
    }

    var translateAnchor: Com_Tophap_MapboxGl_Proto_TranslateAnchor {
      get {return _storage._translateAnchor}
      set {_uniqueStorage()._translateAnchor = newValue}
    }

    var pitchScale: Com_Tophap_MapboxGl_Proto_TranslateAnchor {
      get {return _storage._pitchScale}
      set {_uniqueStorage()._pitchScale = newValue}
    }

    var pitchAlignment: Com_Tophap_MapboxGl_Proto_TranslateAnchor {
      get {return _storage._pitchAlignment}
      set {_uniqueStorage()._pitchAlignment = newValue}
    }

    var strokeWidth: Float {
      get {return _storage._strokeWidth}
      set {_uniqueStorage()._strokeWidth = newValue}
    }

    var strokeColor: Com_Tophap_MapboxGl_Proto_Color {
      get {return _storage._strokeColor ?? Com_Tophap_MapboxGl_Proto_Color()}
      set {_uniqueStorage()._strokeColor = newValue}
    }
    /// Returns true if `strokeColor` has been explicitly set.
    var hasStrokeColor: Bool {return _storage._strokeColor != nil}
    /// Clears the value of `strokeColor`. Subsequent reads from it will return its default value.
    mutating func clearStrokeColor() {_uniqueStorage()._strokeColor = nil}

    var strokeOpacity: Float {
      get {return _storage._strokeOpacity}
      set {_uniqueStorage()._strokeOpacity = newValue}
    }

    var radiusTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._radiusTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._radiusTransition = newValue}
    }
    /// Returns true if `radiusTransition` has been explicitly set.
    var hasRadiusTransition: Bool {return _storage._radiusTransition != nil}
    /// Clears the value of `radiusTransition`. Subsequent reads from it will return its default value.
    mutating func clearRadiusTransition() {_uniqueStorage()._radiusTransition = nil}

    var colorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._colorTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._colorTransition = newValue}
    }
    /// Returns true if `colorTransition` has been explicitly set.
    var hasColorTransition: Bool {return _storage._colorTransition != nil}
    /// Clears the value of `colorTransition`. Subsequent reads from it will return its default value.
    mutating func clearColorTransition() {_uniqueStorage()._colorTransition = nil}

    var blurTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._blurTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._blurTransition = newValue}
    }
    /// Returns true if `blurTransition` has been explicitly set.
    var hasBlurTransition: Bool {return _storage._blurTransition != nil}
    /// Clears the value of `blurTransition`. Subsequent reads from it will return its default value.
    mutating func clearBlurTransition() {_uniqueStorage()._blurTransition = nil}

    var opacityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._opacityTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._opacityTransition = newValue}
    }
    /// Returns true if `opacityTransition` has been explicitly set.
    var hasOpacityTransition: Bool {return _storage._opacityTransition != nil}
    /// Clears the value of `opacityTransition`. Subsequent reads from it will return its default value.
    mutating func clearOpacityTransition() {_uniqueStorage()._opacityTransition = nil}

    var translateTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._translateTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._translateTransition = newValue}
    }
    /// Returns true if `translateTransition` has been explicitly set.
    var hasTranslateTransition: Bool {return _storage._translateTransition != nil}
    /// Clears the value of `translateTransition`. Subsequent reads from it will return its default value.
    mutating func clearTranslateTransition() {_uniqueStorage()._translateTransition = nil}

    var strokeWidthTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._strokeWidthTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._strokeWidthTransition = newValue}
    }
    /// Returns true if `strokeWidthTransition` has been explicitly set.
    var hasStrokeWidthTransition: Bool {return _storage._strokeWidthTransition != nil}
    /// Clears the value of `strokeWidthTransition`. Subsequent reads from it will return its default value.
    mutating func clearStrokeWidthTransition() {_uniqueStorage()._strokeWidthTransition = nil}

    var strokeColorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._strokeColorTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._strokeColorTransition = newValue}
    }
    /// Returns true if `strokeColorTransition` has been explicitly set.
    var hasStrokeColorTransition: Bool {return _storage._strokeColorTransition != nil}
    /// Clears the value of `strokeColorTransition`. Subsequent reads from it will return its default value.
    mutating func clearStrokeColorTransition() {_uniqueStorage()._strokeColorTransition = nil}

    var strokeOpacityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._strokeOpacityTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._strokeOpacityTransition = newValue}
    }
    /// Returns true if `strokeOpacityTransition` has been explicitly set.
    var hasStrokeOpacityTransition: Bool {return _storage._strokeOpacityTransition != nil}
    /// Clears the value of `strokeOpacityTransition`. Subsequent reads from it will return its default value.
    mutating func clearStrokeOpacityTransition() {_uniqueStorage()._strokeOpacityTransition = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct FillExtrusion {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String {
      get {return _storage._id}
      set {_uniqueStorage()._id = newValue}
    }

    var sourceID: String {
      get {return _storage._sourceID}
      set {_uniqueStorage()._sourceID = newValue}
    }

    var visible: Bool {
      get {return _storage._visible}
      set {_uniqueStorage()._visible = newValue}
    }

    var minZoom: Float {
      get {return _storage._minZoom}
      set {_uniqueStorage()._minZoom = newValue}
    }

    var maxZoom: Float {
      get {return _storage._maxZoom}
      set {_uniqueStorage()._maxZoom = newValue}
    }

    var opacity: Float {
      get {return _storage._opacity}
      set {_uniqueStorage()._opacity = newValue}
    }

    var color: Com_Tophap_MapboxGl_Proto_Color {
      get {return _storage._color ?? Com_Tophap_MapboxGl_Proto_Color()}
      set {_uniqueStorage()._color = newValue}
    }
    /// Returns true if `color` has been explicitly set.
    var hasColor: Bool {return _storage._color != nil}
    /// Clears the value of `color`. Subsequent reads from it will return its default value.
    mutating func clearColor() {_uniqueStorage()._color = nil}

    var translate: [Float] {
      get {return _storage._translate}
      set {_uniqueStorage()._translate = newValue}
    }

    var translateAnchor: Com_Tophap_MapboxGl_Proto_TranslateAnchor {
      get {return _storage._translateAnchor}
      set {_uniqueStorage()._translateAnchor = newValue}
    }

    var pattern: String {
      get {return _storage._pattern}
      set {_uniqueStorage()._pattern = newValue}
    }

    var height: Float {
      get {return _storage._height}
      set {_uniqueStorage()._height = newValue}
    }

    var base: Float {
      get {return _storage._base}
      set {_uniqueStorage()._base = newValue}
    }

    var verticalGradient: Bool {
      get {return _storage._verticalGradient}
      set {_uniqueStorage()._verticalGradient = newValue}
    }

    var opacityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._opacityTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._opacityTransition = newValue}
    }
    /// Returns true if `opacityTransition` has been explicitly set.
    var hasOpacityTransition: Bool {return _storage._opacityTransition != nil}
    /// Clears the value of `opacityTransition`. Subsequent reads from it will return its default value.
    mutating func clearOpacityTransition() {_uniqueStorage()._opacityTransition = nil}

    var colorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._colorTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._colorTransition = newValue}
    }
    /// Returns true if `colorTransition` has been explicitly set.
    var hasColorTransition: Bool {return _storage._colorTransition != nil}
    /// Clears the value of `colorTransition`. Subsequent reads from it will return its default value.
    mutating func clearColorTransition() {_uniqueStorage()._colorTransition = nil}

    var translateTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._translateTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._translateTransition = newValue}
    }
    /// Returns true if `translateTransition` has been explicitly set.
    var hasTranslateTransition: Bool {return _storage._translateTransition != nil}
    /// Clears the value of `translateTransition`. Subsequent reads from it will return its default value.
    mutating func clearTranslateTransition() {_uniqueStorage()._translateTransition = nil}

    var patternTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._patternTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._patternTransition = newValue}
    }
    /// Returns true if `patternTransition` has been explicitly set.
    var hasPatternTransition: Bool {return _storage._patternTransition != nil}
    /// Clears the value of `patternTransition`. Subsequent reads from it will return its default value.
    mutating func clearPatternTransition() {_uniqueStorage()._patternTransition = nil}

    var heightTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._heightTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._heightTransition = newValue}
    }
    /// Returns true if `heightTransition` has been explicitly set.
    var hasHeightTransition: Bool {return _storage._heightTransition != nil}
    /// Clears the value of `heightTransition`. Subsequent reads from it will return its default value.
    mutating func clearHeightTransition() {_uniqueStorage()._heightTransition = nil}

    var baseTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._baseTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._baseTransition = newValue}
    }
    /// Returns true if `baseTransition` has been explicitly set.
    var hasBaseTransition: Bool {return _storage._baseTransition != nil}
    /// Clears the value of `baseTransition`. Subsequent reads from it will return its default value.
    mutating func clearBaseTransition() {_uniqueStorage()._baseTransition = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct Fill {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String {
      get {return _storage._id}
      set {_uniqueStorage()._id = newValue}
    }

    var sourceID: String {
      get {return _storage._sourceID}
      set {_uniqueStorage()._sourceID = newValue}
    }

    var visible: Bool {
      get {return _storage._visible}
      set {_uniqueStorage()._visible = newValue}
    }

    var minZoom: Float {
      get {return _storage._minZoom}
      set {_uniqueStorage()._minZoom = newValue}
    }

    var maxZoom: Float {
      get {return _storage._maxZoom}
      set {_uniqueStorage()._maxZoom = newValue}
    }

    var antialias: Bool {
      get {return _storage._antialias}
      set {_uniqueStorage()._antialias = newValue}
    }

    var opacity: Float {
      get {return _storage._opacity}
      set {_uniqueStorage()._opacity = newValue}
    }

    var color: Com_Tophap_MapboxGl_Proto_Color {
      get {return _storage._color ?? Com_Tophap_MapboxGl_Proto_Color()}
      set {_uniqueStorage()._color = newValue}
    }
    /// Returns true if `color` has been explicitly set.
    var hasColor: Bool {return _storage._color != nil}
    /// Clears the value of `color`. Subsequent reads from it will return its default value.
    mutating func clearColor() {_uniqueStorage()._color = nil}

    var outlineColor: Com_Tophap_MapboxGl_Proto_Color {
      get {return _storage._outlineColor ?? Com_Tophap_MapboxGl_Proto_Color()}
      set {_uniqueStorage()._outlineColor = newValue}
    }
    /// Returns true if `outlineColor` has been explicitly set.
    var hasOutlineColor: Bool {return _storage._outlineColor != nil}
    /// Clears the value of `outlineColor`. Subsequent reads from it will return its default value.
    mutating func clearOutlineColor() {_uniqueStorage()._outlineColor = nil}

    var translate: [Float] {
      get {return _storage._translate}
      set {_uniqueStorage()._translate = newValue}
    }

    var translateAnchor: Com_Tophap_MapboxGl_Proto_TranslateAnchor {
      get {return _storage._translateAnchor}
      set {_uniqueStorage()._translateAnchor = newValue}
    }

    var pattern: String {
      get {return _storage._pattern}
      set {_uniqueStorage()._pattern = newValue}
    }

    var opacityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._opacityTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._opacityTransition = newValue}
    }
    /// Returns true if `opacityTransition` has been explicitly set.
    var hasOpacityTransition: Bool {return _storage._opacityTransition != nil}
    /// Clears the value of `opacityTransition`. Subsequent reads from it will return its default value.
    mutating func clearOpacityTransition() {_uniqueStorage()._opacityTransition = nil}

    var colorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._colorTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._colorTransition = newValue}
    }
    /// Returns true if `colorTransition` has been explicitly set.
    var hasColorTransition: Bool {return _storage._colorTransition != nil}
    /// Clears the value of `colorTransition`. Subsequent reads from it will return its default value.
    mutating func clearColorTransition() {_uniqueStorage()._colorTransition = nil}

    var outlineColorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._outlineColorTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._outlineColorTransition = newValue}
    }
    /// Returns true if `outlineColorTransition` has been explicitly set.
    var hasOutlineColorTransition: Bool {return _storage._outlineColorTransition != nil}
    /// Clears the value of `outlineColorTransition`. Subsequent reads from it will return its default value.
    mutating func clearOutlineColorTransition() {_uniqueStorage()._outlineColorTransition = nil}

    var translateTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._translateTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._translateTransition = newValue}
    }
    /// Returns true if `translateTransition` has been explicitly set.
    var hasTranslateTransition: Bool {return _storage._translateTransition != nil}
    /// Clears the value of `translateTransition`. Subsequent reads from it will return its default value.
    mutating func clearTranslateTransition() {_uniqueStorage()._translateTransition = nil}

    var patternTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._patternTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._patternTransition = newValue}
    }
    /// Returns true if `patternTransition` has been explicitly set.
    var hasPatternTransition: Bool {return _storage._patternTransition != nil}
    /// Clears the value of `patternTransition`. Subsequent reads from it will return its default value.
    mutating func clearPatternTransition() {_uniqueStorage()._patternTransition = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct Heatmap {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String {
      get {return _storage._id}
      set {_uniqueStorage()._id = newValue}
    }

    var sourceID: String {
      get {return _storage._sourceID}
      set {_uniqueStorage()._sourceID = newValue}
    }

    var visible: Bool {
      get {return _storage._visible}
      set {_uniqueStorage()._visible = newValue}
    }

    var minZoom: Float {
      get {return _storage._minZoom}
      set {_uniqueStorage()._minZoom = newValue}
    }

    var maxZoom: Float {
      get {return _storage._maxZoom}
      set {_uniqueStorage()._maxZoom = newValue}
    }

    var radius: Float {
      get {return _storage._radius}
      set {_uniqueStorage()._radius = newValue}
    }

    var weight: Float {
      get {return _storage._weight}
      set {_uniqueStorage()._weight = newValue}
    }

    var intensity: Float {
      get {return _storage._intensity}
      set {_uniqueStorage()._intensity = newValue}
    }

    var color: Com_Tophap_MapboxGl_Proto_Color {
      get {return _storage._color ?? Com_Tophap_MapboxGl_Proto_Color()}
      set {_uniqueStorage()._color = newValue}
    }
    /// Returns true if `color` has been explicitly set.
    var hasColor: Bool {return _storage._color != nil}
    /// Clears the value of `color`. Subsequent reads from it will return its default value.
    mutating func clearColor() {_uniqueStorage()._color = nil}

    var opacity: Float {
      get {return _storage._opacity}
      set {_uniqueStorage()._opacity = newValue}
    }

    var radiusTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._radiusTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._radiusTransition = newValue}
    }
    /// Returns true if `radiusTransition` has been explicitly set.
    var hasRadiusTransition: Bool {return _storage._radiusTransition != nil}
    /// Clears the value of `radiusTransition`. Subsequent reads from it will return its default value.
    mutating func clearRadiusTransition() {_uniqueStorage()._radiusTransition = nil}

    var intensityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._intensityTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._intensityTransition = newValue}
    }
    /// Returns true if `intensityTransition` has been explicitly set.
    var hasIntensityTransition: Bool {return _storage._intensityTransition != nil}
    /// Clears the value of `intensityTransition`. Subsequent reads from it will return its default value.
    mutating func clearIntensityTransition() {_uniqueStorage()._intensityTransition = nil}

    var opacityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._opacityTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._opacityTransition = newValue}
    }
    /// Returns true if `opacityTransition` has been explicitly set.
    var hasOpacityTransition: Bool {return _storage._opacityTransition != nil}
    /// Clears the value of `opacityTransition`. Subsequent reads from it will return its default value.
    mutating func clearOpacityTransition() {_uniqueStorage()._opacityTransition = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct Hillshade {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String {
      get {return _storage._id}
      set {_uniqueStorage()._id = newValue}
    }

    var sourceID: String {
      get {return _storage._sourceID}
      set {_uniqueStorage()._sourceID = newValue}
    }

    var visible: Bool {
      get {return _storage._visible}
      set {_uniqueStorage()._visible = newValue}
    }

    var minZoom: Float {
      get {return _storage._minZoom}
      set {_uniqueStorage()._minZoom = newValue}
    }

    var maxZoom: Float {
      get {return _storage._maxZoom}
      set {_uniqueStorage()._maxZoom = newValue}
    }

    var illuminationDirection: Float {
      get {return _storage._illuminationDirection}
      set {_uniqueStorage()._illuminationDirection = newValue}
    }

    var illuminationAnchor: Com_Tophap_MapboxGl_Proto_TranslateAnchor {
      get {return _storage._illuminationAnchor}
      set {_uniqueStorage()._illuminationAnchor = newValue}
    }

    var exaggeration: Float {
      get {return _storage._exaggeration}
      set {_uniqueStorage()._exaggeration = newValue}
    }

    var shadowColor: Com_Tophap_MapboxGl_Proto_Color {
      get {return _storage._shadowColor ?? Com_Tophap_MapboxGl_Proto_Color()}
      set {_uniqueStorage()._shadowColor = newValue}
    }
    /// Returns true if `shadowColor` has been explicitly set.
    var hasShadowColor: Bool {return _storage._shadowColor != nil}
    /// Clears the value of `shadowColor`. Subsequent reads from it will return its default value.
    mutating func clearShadowColor() {_uniqueStorage()._shadowColor = nil}

    var highlightColor: Com_Tophap_MapboxGl_Proto_Color {
      get {return _storage._highlightColor ?? Com_Tophap_MapboxGl_Proto_Color()}
      set {_uniqueStorage()._highlightColor = newValue}
    }
    /// Returns true if `highlightColor` has been explicitly set.
    var hasHighlightColor: Bool {return _storage._highlightColor != nil}
    /// Clears the value of `highlightColor`. Subsequent reads from it will return its default value.
    mutating func clearHighlightColor() {_uniqueStorage()._highlightColor = nil}

    var accentColor: Com_Tophap_MapboxGl_Proto_Color {
      get {return _storage._accentColor ?? Com_Tophap_MapboxGl_Proto_Color()}
      set {_uniqueStorage()._accentColor = newValue}
    }
    /// Returns true if `accentColor` has been explicitly set.
    var hasAccentColor: Bool {return _storage._accentColor != nil}
    /// Clears the value of `accentColor`. Subsequent reads from it will return its default value.
    mutating func clearAccentColor() {_uniqueStorage()._accentColor = nil}

    var exaggerationTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._exaggerationTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._exaggerationTransition = newValue}
    }
    /// Returns true if `exaggerationTransition` has been explicitly set.
    var hasExaggerationTransition: Bool {return _storage._exaggerationTransition != nil}
    /// Clears the value of `exaggerationTransition`. Subsequent reads from it will return its default value.
    mutating func clearExaggerationTransition() {_uniqueStorage()._exaggerationTransition = nil}

    var shadowColorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._shadowColorTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._shadowColorTransition = newValue}
    }
    /// Returns true if `shadowColorTransition` has been explicitly set.
    var hasShadowColorTransition: Bool {return _storage._shadowColorTransition != nil}
    /// Clears the value of `shadowColorTransition`. Subsequent reads from it will return its default value.
    mutating func clearShadowColorTransition() {_uniqueStorage()._shadowColorTransition = nil}

    var highlightColorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._highlightColorTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._highlightColorTransition = newValue}
    }
    /// Returns true if `highlightColorTransition` has been explicitly set.
    var hasHighlightColorTransition: Bool {return _storage._highlightColorTransition != nil}
    /// Clears the value of `highlightColorTransition`. Subsequent reads from it will return its default value.
    mutating func clearHighlightColorTransition() {_uniqueStorage()._highlightColorTransition = nil}

    var accentColorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._accentColorTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._accentColorTransition = newValue}
    }
    /// Returns true if `accentColorTransition` has been explicitly set.
    var hasAccentColorTransition: Bool {return _storage._accentColorTransition != nil}
    /// Clears the value of `accentColorTransition`. Subsequent reads from it will return its default value.
    mutating func clearAccentColorTransition() {_uniqueStorage()._accentColorTransition = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct Line {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String {
      get {return _storage._id}
      set {_uniqueStorage()._id = newValue}
    }

    var sourceID: String {
      get {return _storage._sourceID}
      set {_uniqueStorage()._sourceID = newValue}
    }

    var visible: Bool {
      get {return _storage._visible}
      set {_uniqueStorage()._visible = newValue}
    }

    var minZoom: Float {
      get {return _storage._minZoom}
      set {_uniqueStorage()._minZoom = newValue}
    }

    var maxZoom: Float {
      get {return _storage._maxZoom}
      set {_uniqueStorage()._maxZoom = newValue}
    }

    var cap: Com_Tophap_MapboxGl_Proto_Layer.Line.Cap {
      get {return _storage._cap}
      set {_uniqueStorage()._cap = newValue}
    }

    var join: Com_Tophap_MapboxGl_Proto_Layer.Line.Join {
      get {return _storage._join}
      set {_uniqueStorage()._join = newValue}
    }

    var miterLimit: Float {
      get {return _storage._miterLimit}
      set {_uniqueStorage()._miterLimit = newValue}
    }

    var roundLimit: Float {
      get {return _storage._roundLimit}
      set {_uniqueStorage()._roundLimit = newValue}
    }

    var opacity: Float {
      get {return _storage._opacity}
      set {_uniqueStorage()._opacity = newValue}
    }

    var color: Com_Tophap_MapboxGl_Proto_Color {
      get {return _storage._color ?? Com_Tophap_MapboxGl_Proto_Color()}
      set {_uniqueStorage()._color = newValue}
    }
    /// Returns true if `color` has been explicitly set.
    var hasColor: Bool {return _storage._color != nil}
    /// Clears the value of `color`. Subsequent reads from it will return its default value.
    mutating func clearColor() {_uniqueStorage()._color = nil}

    var translate: [Float] {
      get {return _storage._translate}
      set {_uniqueStorage()._translate = newValue}
    }

    var translateAnchor: Com_Tophap_MapboxGl_Proto_TranslateAnchor {
      get {return _storage._translateAnchor}
      set {_uniqueStorage()._translateAnchor = newValue}
    }

    var width: Float {
      get {return _storage._width}
      set {_uniqueStorage()._width = newValue}
    }

    var gapWidth: Float {
      get {return _storage._gapWidth}
      set {_uniqueStorage()._gapWidth = newValue}
    }

    var offset: Float {
      get {return _storage._offset}
      set {_uniqueStorage()._offset = newValue}
    }

    var blur: Float {
      get {return _storage._blur}
      set {_uniqueStorage()._blur = newValue}
    }

    var dasharray: [Float] {
      get {return _storage._dasharray}
      set {_uniqueStorage()._dasharray = newValue}
    }

    var pattern: String {
      get {return _storage._pattern}
      set {_uniqueStorage()._pattern = newValue}
    }

    var gradient: Int32 {
      get {return _storage._gradient}
      set {_uniqueStorage()._gradient = newValue}
    }

    var opacityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._opacityTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._opacityTransition = newValue}
    }
    /// Returns true if `opacityTransition` has been explicitly set.
    var hasOpacityTransition: Bool {return _storage._opacityTransition != nil}
    /// Clears the value of `opacityTransition`. Subsequent reads from it will return its default value.
    mutating func clearOpacityTransition() {_uniqueStorage()._opacityTransition = nil}

    var colorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._colorTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._colorTransition = newValue}
    }
    /// Returns true if `colorTransition` has been explicitly set.
    var hasColorTransition: Bool {return _storage._colorTransition != nil}
    /// Clears the value of `colorTransition`. Subsequent reads from it will return its default value.
    mutating func clearColorTransition() {_uniqueStorage()._colorTransition = nil}

    var translateTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._translateTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._translateTransition = newValue}
    }
    /// Returns true if `translateTransition` has been explicitly set.
    var hasTranslateTransition: Bool {return _storage._translateTransition != nil}
    /// Clears the value of `translateTransition`. Subsequent reads from it will return its default value.
    mutating func clearTranslateTransition() {_uniqueStorage()._translateTransition = nil}

    var widthTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._widthTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._widthTransition = newValue}
    }
    /// Returns true if `widthTransition` has been explicitly set.
    var hasWidthTransition: Bool {return _storage._widthTransition != nil}
    /// Clears the value of `widthTransition`. Subsequent reads from it will return its default value.
    mutating func clearWidthTransition() {_uniqueStorage()._widthTransition = nil}

    var gapWidthTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._gapWidthTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._gapWidthTransition = newValue}
    }
    /// Returns true if `gapWidthTransition` has been explicitly set.
    var hasGapWidthTransition: Bool {return _storage._gapWidthTransition != nil}
    /// Clears the value of `gapWidthTransition`. Subsequent reads from it will return its default value.
    mutating func clearGapWidthTransition() {_uniqueStorage()._gapWidthTransition = nil}

    var offsetTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._offsetTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._offsetTransition = newValue}
    }
    /// Returns true if `offsetTransition` has been explicitly set.
    var hasOffsetTransition: Bool {return _storage._offsetTransition != nil}
    /// Clears the value of `offsetTransition`. Subsequent reads from it will return its default value.
    mutating func clearOffsetTransition() {_uniqueStorage()._offsetTransition = nil}

    var blurTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._blurTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._blurTransition = newValue}
    }
    /// Returns true if `blurTransition` has been explicitly set.
    var hasBlurTransition: Bool {return _storage._blurTransition != nil}
    /// Clears the value of `blurTransition`. Subsequent reads from it will return its default value.
    mutating func clearBlurTransition() {_uniqueStorage()._blurTransition = nil}

    var dasharrayTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._dasharrayTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._dasharrayTransition = newValue}
    }
    /// Returns true if `dasharrayTransition` has been explicitly set.
    var hasDasharrayTransition: Bool {return _storage._dasharrayTransition != nil}
    /// Clears the value of `dasharrayTransition`. Subsequent reads from it will return its default value.
    mutating func clearDasharrayTransition() {_uniqueStorage()._dasharrayTransition = nil}

    var patternTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._patternTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._patternTransition = newValue}
    }
    /// Returns true if `patternTransition` has been explicitly set.
    var hasPatternTransition: Bool {return _storage._patternTransition != nil}
    /// Clears the value of `patternTransition`. Subsequent reads from it will return its default value.
    mutating func clearPatternTransition() {_uniqueStorage()._patternTransition = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum Cap: SwiftProtobuf.Enum {
      typealias RawValue = Int
      case butt // = 0
      case round // = 1
      case square // = 3
      case UNRECOGNIZED(Int)

      init() {
        self = .butt
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .butt
        case 1: self = .round
        case 3: self = .square
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      var rawValue: Int {
        switch self {
        case .butt: return 0
        case .round: return 1
        case .square: return 3
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    enum Join: SwiftProtobuf.Enum {
      typealias RawValue = Int
      case miter // = 0
      case bevel // = 1
      case round // = 2
      case UNRECOGNIZED(Int)

      init() {
        self = .miter
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .miter
        case 1: self = .bevel
        case 2: self = .round
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      var rawValue: Int {
        switch self {
        case .miter: return 0
        case .bevel: return 1
        case .round: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct Symbol {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String {
      get {return _storage._id}
      set {_uniqueStorage()._id = newValue}
    }

    var sourceID: String {
      get {return _storage._sourceID}
      set {_uniqueStorage()._sourceID = newValue}
    }

    var visible: Bool {
      get {return _storage._visible}
      set {_uniqueStorage()._visible = newValue}
    }

    var minZoom: Float {
      get {return _storage._minZoom}
      set {_uniqueStorage()._minZoom = newValue}
    }

    var maxZoom: Float {
      get {return _storage._maxZoom}
      set {_uniqueStorage()._maxZoom = newValue}
    }

    var symbolPlacement: Com_Tophap_MapboxGl_Proto_Layer.Symbol.Placement {
      get {return _storage._symbolPlacement}
      set {_uniqueStorage()._symbolPlacement = newValue}
    }

    var symbolSpacing: Float {
      get {return _storage._symbolSpacing}
      set {_uniqueStorage()._symbolSpacing = newValue}
    }

    var symbolAvoidEdges: Bool {
      get {return _storage._symbolAvoidEdges}
      set {_uniqueStorage()._symbolAvoidEdges = newValue}
    }

    var symbolZOrder: Com_Tophap_MapboxGl_Proto_Layer.Symbol.ZOrder {
      get {return _storage._symbolZOrder}
      set {_uniqueStorage()._symbolZOrder = newValue}
    }

    var iconAllowOverlap: Bool {
      get {return _storage._iconAllowOverlap}
      set {_uniqueStorage()._iconAllowOverlap = newValue}
    }

    var iconIgnorePlacement: Bool {
      get {return _storage._iconIgnorePlacement}
      set {_uniqueStorage()._iconIgnorePlacement = newValue}
    }

    var iconOptional: Bool {
      get {return _storage._iconOptional}
      set {_uniqueStorage()._iconOptional = newValue}
    }

    var iconRotationAlignment: Com_Tophap_MapboxGl_Proto_Layer.Symbol.Alignment {
      get {return _storage._iconRotationAlignment}
      set {_uniqueStorage()._iconRotationAlignment = newValue}
    }

    var iconSize: Float {
      get {return _storage._iconSize}
      set {_uniqueStorage()._iconSize = newValue}
    }

    var iconTextFit: Com_Tophap_MapboxGl_Proto_Layer.Symbol.TextFit {
      get {return _storage._iconTextFit}
      set {_uniqueStorage()._iconTextFit = newValue}
    }

    var iconTextFitPadding: [Float] {
      get {return _storage._iconTextFitPadding}
      set {_uniqueStorage()._iconTextFitPadding = newValue}
    }

    var iconImage: String {
      get {return _storage._iconImage}
      set {_uniqueStorage()._iconImage = newValue}
    }

    var iconRotate: Float {
      get {return _storage._iconRotate}
      set {_uniqueStorage()._iconRotate = newValue}
    }

    var iconPadding: Float {
      get {return _storage._iconPadding}
      set {_uniqueStorage()._iconPadding = newValue}
    }

    var iconKeepUpright: Bool {
      get {return _storage._iconKeepUpright}
      set {_uniqueStorage()._iconKeepUpright = newValue}
    }

    var iconOffset: [Float] {
      get {return _storage._iconOffset}
      set {_uniqueStorage()._iconOffset = newValue}
    }

    var iconAnchor: Com_Tophap_MapboxGl_Proto_PositionAnchor {
      get {return _storage._iconAnchor}
      set {_uniqueStorage()._iconAnchor = newValue}
    }

    var iconPitchAlignment: Com_Tophap_MapboxGl_Proto_Layer.Symbol.Alignment {
      get {return _storage._iconPitchAlignment}
      set {_uniqueStorage()._iconPitchAlignment = newValue}
    }

    var textPitchAlignment: Com_Tophap_MapboxGl_Proto_Layer.Symbol.Alignment {
      get {return _storage._textPitchAlignment}
      set {_uniqueStorage()._textPitchAlignment = newValue}
    }

    var textRotationAlignment: Com_Tophap_MapboxGl_Proto_Layer.Symbol.Alignment {
      get {return _storage._textRotationAlignment}
      set {_uniqueStorage()._textRotationAlignment = newValue}
    }

    var textField: [Com_Tophap_MapboxGl_Proto_FormattedSection] {
      get {return _storage._textField}
      set {_uniqueStorage()._textField = newValue}
    }

    var textFont: [String] {
      get {return _storage._textFont}
      set {_uniqueStorage()._textFont = newValue}
    }

    var textSize: Float {
      get {return _storage._textSize}
      set {_uniqueStorage()._textSize = newValue}
    }

    var textMaxWidth: Float {
      get {return _storage._textMaxWidth}
      set {_uniqueStorage()._textMaxWidth = newValue}
    }

    var textLineHeight: Float {
      get {return _storage._textLineHeight}
      set {_uniqueStorage()._textLineHeight = newValue}
    }

    var textLetterSpacing: Float {
      get {return _storage._textLetterSpacing}
      set {_uniqueStorage()._textLetterSpacing = newValue}
    }

    var textJustify: Com_Tophap_MapboxGl_Proto_Layer.Symbol.TextJustify {
      get {return _storage._textJustify}
      set {_uniqueStorage()._textJustify = newValue}
    }

    var textRadialOffset: Float {
      get {return _storage._textRadialOffset}
      set {_uniqueStorage()._textRadialOffset = newValue}
    }

    var textVariableAnchor: [Com_Tophap_MapboxGl_Proto_PositionAnchor] {
      get {return _storage._textVariableAnchor}
      set {_uniqueStorage()._textVariableAnchor = newValue}
    }

    var textAnchor: Com_Tophap_MapboxGl_Proto_PositionAnchor {
      get {return _storage._textAnchor}
      set {_uniqueStorage()._textAnchor = newValue}
    }

    var textMaxAngle: Float {
      get {return _storage._textMaxAngle}
      set {_uniqueStorage()._textMaxAngle = newValue}
    }

    var textRotate: Float {
      get {return _storage._textRotate}
      set {_uniqueStorage()._textRotate = newValue}
    }

    var textPadding: Float {
      get {return _storage._textPadding}
      set {_uniqueStorage()._textPadding = newValue}
    }

    var textKeepUpright: Bool {
      get {return _storage._textKeepUpright}
      set {_uniqueStorage()._textKeepUpright = newValue}
    }

    var textTransform: Com_Tophap_MapboxGl_Proto_Layer.Symbol.TextTransform {
      get {return _storage._textTransform}
      set {_uniqueStorage()._textTransform = newValue}
    }

    var textOffset: [Float] {
      get {return _storage._textOffset}
      set {_uniqueStorage()._textOffset = newValue}
    }

    var textAllowOverlap: Bool {
      get {return _storage._textAllowOverlap}
      set {_uniqueStorage()._textAllowOverlap = newValue}
    }

    var textIgnorePlacement: Bool {
      get {return _storage._textIgnorePlacement}
      set {_uniqueStorage()._textIgnorePlacement = newValue}
    }

    var textOptional: Bool {
      get {return _storage._textOptional}
      set {_uniqueStorage()._textOptional = newValue}
    }

    var iconOpacity: Float {
      get {return _storage._iconOpacity}
      set {_uniqueStorage()._iconOpacity = newValue}
    }

    var iconColor: Com_Tophap_MapboxGl_Proto_Color {
      get {return _storage._iconColor ?? Com_Tophap_MapboxGl_Proto_Color()}
      set {_uniqueStorage()._iconColor = newValue}
    }
    /// Returns true if `iconColor` has been explicitly set.
    var hasIconColor: Bool {return _storage._iconColor != nil}
    /// Clears the value of `iconColor`. Subsequent reads from it will return its default value.
    mutating func clearIconColor() {_uniqueStorage()._iconColor = nil}

    var iconHaloColor: Com_Tophap_MapboxGl_Proto_Color {
      get {return _storage._iconHaloColor ?? Com_Tophap_MapboxGl_Proto_Color()}
      set {_uniqueStorage()._iconHaloColor = newValue}
    }
    /// Returns true if `iconHaloColor` has been explicitly set.
    var hasIconHaloColor: Bool {return _storage._iconHaloColor != nil}
    /// Clears the value of `iconHaloColor`. Subsequent reads from it will return its default value.
    mutating func clearIconHaloColor() {_uniqueStorage()._iconHaloColor = nil}

    var iconHaloWidth: Float {
      get {return _storage._iconHaloWidth}
      set {_uniqueStorage()._iconHaloWidth = newValue}
    }

    var iconHaloBlur: Float {
      get {return _storage._iconHaloBlur}
      set {_uniqueStorage()._iconHaloBlur = newValue}
    }

    var iconTranslate: [Float] {
      get {return _storage._iconTranslate}
      set {_uniqueStorage()._iconTranslate = newValue}
    }

    var iconTranslateAnchor: Com_Tophap_MapboxGl_Proto_TranslateAnchor {
      get {return _storage._iconTranslateAnchor}
      set {_uniqueStorage()._iconTranslateAnchor = newValue}
    }

    var textOpacity: Float {
      get {return _storage._textOpacity}
      set {_uniqueStorage()._textOpacity = newValue}
    }

    var textColor: Com_Tophap_MapboxGl_Proto_Color {
      get {return _storage._textColor ?? Com_Tophap_MapboxGl_Proto_Color()}
      set {_uniqueStorage()._textColor = newValue}
    }
    /// Returns true if `textColor` has been explicitly set.
    var hasTextColor: Bool {return _storage._textColor != nil}
    /// Clears the value of `textColor`. Subsequent reads from it will return its default value.
    mutating func clearTextColor() {_uniqueStorage()._textColor = nil}

    var textHaloColor: Com_Tophap_MapboxGl_Proto_Color {
      get {return _storage._textHaloColor ?? Com_Tophap_MapboxGl_Proto_Color()}
      set {_uniqueStorage()._textHaloColor = newValue}
    }
    /// Returns true if `textHaloColor` has been explicitly set.
    var hasTextHaloColor: Bool {return _storage._textHaloColor != nil}
    /// Clears the value of `textHaloColor`. Subsequent reads from it will return its default value.
    mutating func clearTextHaloColor() {_uniqueStorage()._textHaloColor = nil}

    var textHaloWidth: Float {
      get {return _storage._textHaloWidth}
      set {_uniqueStorage()._textHaloWidth = newValue}
    }

    var textHaloBlur: Float {
      get {return _storage._textHaloBlur}
      set {_uniqueStorage()._textHaloBlur = newValue}
    }

    var textTranslate: [Float] {
      get {return _storage._textTranslate}
      set {_uniqueStorage()._textTranslate = newValue}
    }

    var textTranslateAnchor: Com_Tophap_MapboxGl_Proto_TranslateAnchor {
      get {return _storage._textTranslateAnchor}
      set {_uniqueStorage()._textTranslateAnchor = newValue}
    }

    var iconOpacityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._iconOpacityTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._iconOpacityTransition = newValue}
    }
    /// Returns true if `iconOpacityTransition` has been explicitly set.
    var hasIconOpacityTransition: Bool {return _storage._iconOpacityTransition != nil}
    /// Clears the value of `iconOpacityTransition`. Subsequent reads from it will return its default value.
    mutating func clearIconOpacityTransition() {_uniqueStorage()._iconOpacityTransition = nil}

    var iconColorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._iconColorTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._iconColorTransition = newValue}
    }
    /// Returns true if `iconColorTransition` has been explicitly set.
    var hasIconColorTransition: Bool {return _storage._iconColorTransition != nil}
    /// Clears the value of `iconColorTransition`. Subsequent reads from it will return its default value.
    mutating func clearIconColorTransition() {_uniqueStorage()._iconColorTransition = nil}

    var iconHaloColorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._iconHaloColorTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._iconHaloColorTransition = newValue}
    }
    /// Returns true if `iconHaloColorTransition` has been explicitly set.
    var hasIconHaloColorTransition: Bool {return _storage._iconHaloColorTransition != nil}
    /// Clears the value of `iconHaloColorTransition`. Subsequent reads from it will return its default value.
    mutating func clearIconHaloColorTransition() {_uniqueStorage()._iconHaloColorTransition = nil}

    var iconHaloWidthTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._iconHaloWidthTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._iconHaloWidthTransition = newValue}
    }
    /// Returns true if `iconHaloWidthTransition` has been explicitly set.
    var hasIconHaloWidthTransition: Bool {return _storage._iconHaloWidthTransition != nil}
    /// Clears the value of `iconHaloWidthTransition`. Subsequent reads from it will return its default value.
    mutating func clearIconHaloWidthTransition() {_uniqueStorage()._iconHaloWidthTransition = nil}

    var iconHaloBlurTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._iconHaloBlurTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._iconHaloBlurTransition = newValue}
    }
    /// Returns true if `iconHaloBlurTransition` has been explicitly set.
    var hasIconHaloBlurTransition: Bool {return _storage._iconHaloBlurTransition != nil}
    /// Clears the value of `iconHaloBlurTransition`. Subsequent reads from it will return its default value.
    mutating func clearIconHaloBlurTransition() {_uniqueStorage()._iconHaloBlurTransition = nil}

    var iconTranslateTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._iconTranslateTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._iconTranslateTransition = newValue}
    }
    /// Returns true if `iconTranslateTransition` has been explicitly set.
    var hasIconTranslateTransition: Bool {return _storage._iconTranslateTransition != nil}
    /// Clears the value of `iconTranslateTransition`. Subsequent reads from it will return its default value.
    mutating func clearIconTranslateTransition() {_uniqueStorage()._iconTranslateTransition = nil}

    var textOpacityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._textOpacityTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._textOpacityTransition = newValue}
    }
    /// Returns true if `textOpacityTransition` has been explicitly set.
    var hasTextOpacityTransition: Bool {return _storage._textOpacityTransition != nil}
    /// Clears the value of `textOpacityTransition`. Subsequent reads from it will return its default value.
    mutating func clearTextOpacityTransition() {_uniqueStorage()._textOpacityTransition = nil}

    var textColorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._textColorTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._textColorTransition = newValue}
    }
    /// Returns true if `textColorTransition` has been explicitly set.
    var hasTextColorTransition: Bool {return _storage._textColorTransition != nil}
    /// Clears the value of `textColorTransition`. Subsequent reads from it will return its default value.
    mutating func clearTextColorTransition() {_uniqueStorage()._textColorTransition = nil}

    var textHaloColorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._textHaloColorTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._textHaloColorTransition = newValue}
    }
    /// Returns true if `textHaloColorTransition` has been explicitly set.
    var hasTextHaloColorTransition: Bool {return _storage._textHaloColorTransition != nil}
    /// Clears the value of `textHaloColorTransition`. Subsequent reads from it will return its default value.
    mutating func clearTextHaloColorTransition() {_uniqueStorage()._textHaloColorTransition = nil}

    var textHaloWidthTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._textHaloWidthTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._textHaloWidthTransition = newValue}
    }
    /// Returns true if `textHaloWidthTransition` has been explicitly set.
    var hasTextHaloWidthTransition: Bool {return _storage._textHaloWidthTransition != nil}
    /// Clears the value of `textHaloWidthTransition`. Subsequent reads from it will return its default value.
    mutating func clearTextHaloWidthTransition() {_uniqueStorage()._textHaloWidthTransition = nil}

    var textHaloBlurTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._textHaloBlurTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._textHaloBlurTransition = newValue}
    }
    /// Returns true if `textHaloBlurTransition` has been explicitly set.
    var hasTextHaloBlurTransition: Bool {return _storage._textHaloBlurTransition != nil}
    /// Clears the value of `textHaloBlurTransition`. Subsequent reads from it will return its default value.
    mutating func clearTextHaloBlurTransition() {_uniqueStorage()._textHaloBlurTransition = nil}

    var textTranslateTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
      get {return _storage._textTranslateTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
      set {_uniqueStorage()._textTranslateTransition = newValue}
    }
    /// Returns true if `textTranslateTransition` has been explicitly set.
    var hasTextTranslateTransition: Bool {return _storage._textTranslateTransition != nil}
    /// Clears the value of `textTranslateTransition`. Subsequent reads from it will return its default value.
    mutating func clearTextTranslateTransition() {_uniqueStorage()._textTranslateTransition = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum Placement: SwiftProtobuf.Enum {
      typealias RawValue = Int
      case point // = 0
      case line // = 1
      case lineCenter // = 2
      case UNRECOGNIZED(Int)

      init() {
        self = .point
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .point
        case 1: self = .line
        case 2: self = .lineCenter
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      var rawValue: Int {
        switch self {
        case .point: return 0
        case .line: return 1
        case .lineCenter: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    enum ZOrder: SwiftProtobuf.Enum {
      typealias RawValue = Int
      case auto // = 0
      case viewportY // = 1
      case source // = 2
      case UNRECOGNIZED(Int)

      init() {
        self = .auto
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .auto
        case 1: self = .viewportY
        case 2: self = .source
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      var rawValue: Int {
        switch self {
        case .auto: return 0
        case .viewportY: return 1
        case .source: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    enum Alignment: SwiftProtobuf.Enum {
      typealias RawValue = Int
      case auto // = 0
      case map // = 1
      case viewport // = 2
      case UNRECOGNIZED(Int)

      init() {
        self = .auto
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .auto
        case 1: self = .map
        case 2: self = .viewport
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      var rawValue: Int {
        switch self {
        case .auto: return 0
        case .map: return 1
        case .viewport: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    enum TextFit: SwiftProtobuf.Enum {
      typealias RawValue = Int
      case none // = 0
      case width // = 1
      case height // = 2
      case both // = 3
      case UNRECOGNIZED(Int)

      init() {
        self = .none
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .none
        case 1: self = .width
        case 2: self = .height
        case 3: self = .both
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      var rawValue: Int {
        switch self {
        case .none: return 0
        case .width: return 1
        case .height: return 2
        case .both: return 3
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    enum TextJustify: SwiftProtobuf.Enum {
      typealias RawValue = Int
      case justifyAuto // = 0
      case justifyLeft // = 1
      case justifyCenter // = 2
      case justifyRight // = 3
      case UNRECOGNIZED(Int)

      init() {
        self = .justifyAuto
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .justifyAuto
        case 1: self = .justifyLeft
        case 2: self = .justifyCenter
        case 3: self = .justifyRight
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      var rawValue: Int {
        switch self {
        case .justifyAuto: return 0
        case .justifyLeft: return 1
        case .justifyCenter: return 2
        case .justifyRight: return 3
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    enum TextTransform: SwiftProtobuf.Enum {
      typealias RawValue = Int
      case transformNone // = 0
      case transformUppercase // = 1
      case transformLowercase // = 2
      case UNRECOGNIZED(Int)

      init() {
        self = .transformNone
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .transformNone
        case 1: self = .transformUppercase
        case 2: self = .transformLowercase
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      var rawValue: Int {
        switch self {
        case .transformNone: return 0
        case .transformUppercase: return 1
        case .transformLowercase: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.tophap.mapbox_gl.proto"

extension Com_Tophap_MapboxGl_Proto_Layer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Layer"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "background_layer"),
    2: .standard(proto: "circle_layer"),
    3: .standard(proto: "fill_layer"),
    4: .standard(proto: "fill_extrusion_layer"),
    5: .standard(proto: "line_layer"),
    6: .standard(proto: "symbol_layer"),
    7: .standard(proto: "hillshade_layer"),
    8: .standard(proto: "heatmap_layer"),
  ]

  fileprivate class _StorageClass {
    var _type: Com_Tophap_MapboxGl_Proto_Layer.OneOf_Type?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Com_Tophap_MapboxGl_Proto_Layer.Background?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .backgroundLayer(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .backgroundLayer(v)}
        case 2:
          var v: Com_Tophap_MapboxGl_Proto_Layer.Circle?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .circleLayer(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .circleLayer(v)}
        case 3:
          var v: Com_Tophap_MapboxGl_Proto_Layer.Fill?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .fillLayer(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .fillLayer(v)}
        case 4:
          var v: Com_Tophap_MapboxGl_Proto_Layer.FillExtrusion?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .fillExtrusionLayer(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .fillExtrusionLayer(v)}
        case 5:
          var v: Com_Tophap_MapboxGl_Proto_Layer.Line?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .lineLayer(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .lineLayer(v)}
        case 6:
          var v: Com_Tophap_MapboxGl_Proto_Layer.Symbol?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .symbolLayer(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .symbolLayer(v)}
        case 7:
          var v: Com_Tophap_MapboxGl_Proto_Layer.Hillshade?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .hillshadeLayer(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .hillshadeLayer(v)}
        case 8:
          var v: Com_Tophap_MapboxGl_Proto_Layer.Heatmap?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .heatmapLayer(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .heatmapLayer(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._type {
      case .backgroundLayer(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .circleLayer(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .fillLayer(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .fillExtrusionLayer(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case .lineLayer(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      case .symbolLayer(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      case .hillshadeLayer(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      case .heatmapLayer(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_MapboxGl_Proto_Layer, rhs: Com_Tophap_MapboxGl_Proto_Layer) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._type != rhs_storage._type {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Tophap_MapboxGl_Proto_Layer.Background: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Tophap_MapboxGl_Proto_Layer.protoMessageName + ".Background"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "visible"),
    3: .standard(proto: "min_zoom"),
    4: .standard(proto: "max_zoom"),
    5: .same(proto: "color"),
    6: .same(proto: "pattern"),
    7: .same(proto: "opacity"),
    8: .standard(proto: "color_transition"),
    9: .standard(proto: "pattern_transition"),
    10: .standard(proto: "opacity_transition"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _visible: Bool = false
    var _minZoom: Float = 0
    var _maxZoom: Float = 0
    var _color: Com_Tophap_MapboxGl_Proto_Color? = nil
    var _pattern: String = String()
    var _opacity: Float = 0
    var _colorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _patternTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _opacityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _visible = source._visible
      _minZoom = source._minZoom
      _maxZoom = source._maxZoom
      _color = source._color
      _pattern = source._pattern
      _opacity = source._opacity
      _colorTransition = source._colorTransition
      _patternTransition = source._patternTransition
      _opacityTransition = source._opacityTransition
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularBoolField(value: &_storage._visible)
        case 3: try decoder.decodeSingularFloatField(value: &_storage._minZoom)
        case 4: try decoder.decodeSingularFloatField(value: &_storage._maxZoom)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._color)
        case 6: try decoder.decodeSingularStringField(value: &_storage._pattern)
        case 7: try decoder.decodeSingularFloatField(value: &_storage._opacity)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._colorTransition)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._patternTransition)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._opacityTransition)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if _storage._visible != false {
        try visitor.visitSingularBoolField(value: _storage._visible, fieldNumber: 2)
      }
      if _storage._minZoom != 0 {
        try visitor.visitSingularFloatField(value: _storage._minZoom, fieldNumber: 3)
      }
      if _storage._maxZoom != 0 {
        try visitor.visitSingularFloatField(value: _storage._maxZoom, fieldNumber: 4)
      }
      if let v = _storage._color {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._pattern.isEmpty {
        try visitor.visitSingularStringField(value: _storage._pattern, fieldNumber: 6)
      }
      if _storage._opacity != 0 {
        try visitor.visitSingularFloatField(value: _storage._opacity, fieldNumber: 7)
      }
      if let v = _storage._colorTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._patternTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._opacityTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_MapboxGl_Proto_Layer.Background, rhs: Com_Tophap_MapboxGl_Proto_Layer.Background) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._visible != rhs_storage._visible {return false}
        if _storage._minZoom != rhs_storage._minZoom {return false}
        if _storage._maxZoom != rhs_storage._maxZoom {return false}
        if _storage._color != rhs_storage._color {return false}
        if _storage._pattern != rhs_storage._pattern {return false}
        if _storage._opacity != rhs_storage._opacity {return false}
        if _storage._colorTransition != rhs_storage._colorTransition {return false}
        if _storage._patternTransition != rhs_storage._patternTransition {return false}
        if _storage._opacityTransition != rhs_storage._opacityTransition {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Tophap_MapboxGl_Proto_Layer.Circle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Tophap_MapboxGl_Proto_Layer.protoMessageName + ".Circle"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "source_id"),
    3: .same(proto: "visible"),
    4: .standard(proto: "min_zoom"),
    5: .standard(proto: "max_zoom"),
    6: .same(proto: "radius"),
    7: .same(proto: "color"),
    8: .same(proto: "blur"),
    9: .same(proto: "opacity"),
    10: .same(proto: "translate"),
    11: .standard(proto: "translate_anchor"),
    12: .standard(proto: "pitch_scale"),
    13: .standard(proto: "pitch_alignment"),
    14: .standard(proto: "stroke_width"),
    15: .standard(proto: "stroke_color"),
    16: .standard(proto: "stroke_opacity"),
    17: .standard(proto: "radius_transition"),
    18: .standard(proto: "color_transition"),
    19: .standard(proto: "blur_transition"),
    20: .standard(proto: "opacity_transition"),
    21: .standard(proto: "translate_transition"),
    22: .standard(proto: "stroke_width_transition"),
    23: .standard(proto: "stroke_color_transition"),
    24: .standard(proto: "stroke_opacity_transition"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _sourceID: String = String()
    var _visible: Bool = false
    var _minZoom: Float = 0
    var _maxZoom: Float = 0
    var _radius: Float = 0
    var _color: Com_Tophap_MapboxGl_Proto_Color? = nil
    var _blur: Float = 0
    var _opacity: Float = 0
    var _translate: [Float] = []
    var _translateAnchor: Com_Tophap_MapboxGl_Proto_TranslateAnchor = .map
    var _pitchScale: Com_Tophap_MapboxGl_Proto_TranslateAnchor = .map
    var _pitchAlignment: Com_Tophap_MapboxGl_Proto_TranslateAnchor = .map
    var _strokeWidth: Float = 0
    var _strokeColor: Com_Tophap_MapboxGl_Proto_Color? = nil
    var _strokeOpacity: Float = 0
    var _radiusTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _colorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _blurTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _opacityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _translateTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _strokeWidthTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _strokeColorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _strokeOpacityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _sourceID = source._sourceID
      _visible = source._visible
      _minZoom = source._minZoom
      _maxZoom = source._maxZoom
      _radius = source._radius
      _color = source._color
      _blur = source._blur
      _opacity = source._opacity
      _translate = source._translate
      _translateAnchor = source._translateAnchor
      _pitchScale = source._pitchScale
      _pitchAlignment = source._pitchAlignment
      _strokeWidth = source._strokeWidth
      _strokeColor = source._strokeColor
      _strokeOpacity = source._strokeOpacity
      _radiusTransition = source._radiusTransition
      _colorTransition = source._colorTransition
      _blurTransition = source._blurTransition
      _opacityTransition = source._opacityTransition
      _translateTransition = source._translateTransition
      _strokeWidthTransition = source._strokeWidthTransition
      _strokeColorTransition = source._strokeColorTransition
      _strokeOpacityTransition = source._strokeOpacityTransition
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._sourceID)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._visible)
        case 4: try decoder.decodeSingularFloatField(value: &_storage._minZoom)
        case 5: try decoder.decodeSingularFloatField(value: &_storage._maxZoom)
        case 6: try decoder.decodeSingularFloatField(value: &_storage._radius)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._color)
        case 8: try decoder.decodeSingularFloatField(value: &_storage._blur)
        case 9: try decoder.decodeSingularFloatField(value: &_storage._opacity)
        case 10: try decoder.decodeRepeatedFloatField(value: &_storage._translate)
        case 11: try decoder.decodeSingularEnumField(value: &_storage._translateAnchor)
        case 12: try decoder.decodeSingularEnumField(value: &_storage._pitchScale)
        case 13: try decoder.decodeSingularEnumField(value: &_storage._pitchAlignment)
        case 14: try decoder.decodeSingularFloatField(value: &_storage._strokeWidth)
        case 15: try decoder.decodeSingularMessageField(value: &_storage._strokeColor)
        case 16: try decoder.decodeSingularFloatField(value: &_storage._strokeOpacity)
        case 17: try decoder.decodeSingularMessageField(value: &_storage._radiusTransition)
        case 18: try decoder.decodeSingularMessageField(value: &_storage._colorTransition)
        case 19: try decoder.decodeSingularMessageField(value: &_storage._blurTransition)
        case 20: try decoder.decodeSingularMessageField(value: &_storage._opacityTransition)
        case 21: try decoder.decodeSingularMessageField(value: &_storage._translateTransition)
        case 22: try decoder.decodeSingularMessageField(value: &_storage._strokeWidthTransition)
        case 23: try decoder.decodeSingularMessageField(value: &_storage._strokeColorTransition)
        case 24: try decoder.decodeSingularMessageField(value: &_storage._strokeOpacityTransition)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._sourceID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sourceID, fieldNumber: 2)
      }
      if _storage._visible != false {
        try visitor.visitSingularBoolField(value: _storage._visible, fieldNumber: 3)
      }
      if _storage._minZoom != 0 {
        try visitor.visitSingularFloatField(value: _storage._minZoom, fieldNumber: 4)
      }
      if _storage._maxZoom != 0 {
        try visitor.visitSingularFloatField(value: _storage._maxZoom, fieldNumber: 5)
      }
      if _storage._radius != 0 {
        try visitor.visitSingularFloatField(value: _storage._radius, fieldNumber: 6)
      }
      if let v = _storage._color {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if _storage._blur != 0 {
        try visitor.visitSingularFloatField(value: _storage._blur, fieldNumber: 8)
      }
      if _storage._opacity != 0 {
        try visitor.visitSingularFloatField(value: _storage._opacity, fieldNumber: 9)
      }
      if !_storage._translate.isEmpty {
        try visitor.visitPackedFloatField(value: _storage._translate, fieldNumber: 10)
      }
      if _storage._translateAnchor != .map {
        try visitor.visitSingularEnumField(value: _storage._translateAnchor, fieldNumber: 11)
      }
      if _storage._pitchScale != .map {
        try visitor.visitSingularEnumField(value: _storage._pitchScale, fieldNumber: 12)
      }
      if _storage._pitchAlignment != .map {
        try visitor.visitSingularEnumField(value: _storage._pitchAlignment, fieldNumber: 13)
      }
      if _storage._strokeWidth != 0 {
        try visitor.visitSingularFloatField(value: _storage._strokeWidth, fieldNumber: 14)
      }
      if let v = _storage._strokeColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
      if _storage._strokeOpacity != 0 {
        try visitor.visitSingularFloatField(value: _storage._strokeOpacity, fieldNumber: 16)
      }
      if let v = _storage._radiusTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
      if let v = _storage._colorTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if let v = _storage._blurTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      }
      if let v = _storage._opacityTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if let v = _storage._translateTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      }
      if let v = _storage._strokeWidthTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      }
      if let v = _storage._strokeColorTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      }
      if let v = _storage._strokeOpacityTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_MapboxGl_Proto_Layer.Circle, rhs: Com_Tophap_MapboxGl_Proto_Layer.Circle) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._sourceID != rhs_storage._sourceID {return false}
        if _storage._visible != rhs_storage._visible {return false}
        if _storage._minZoom != rhs_storage._minZoom {return false}
        if _storage._maxZoom != rhs_storage._maxZoom {return false}
        if _storage._radius != rhs_storage._radius {return false}
        if _storage._color != rhs_storage._color {return false}
        if _storage._blur != rhs_storage._blur {return false}
        if _storage._opacity != rhs_storage._opacity {return false}
        if _storage._translate != rhs_storage._translate {return false}
        if _storage._translateAnchor != rhs_storage._translateAnchor {return false}
        if _storage._pitchScale != rhs_storage._pitchScale {return false}
        if _storage._pitchAlignment != rhs_storage._pitchAlignment {return false}
        if _storage._strokeWidth != rhs_storage._strokeWidth {return false}
        if _storage._strokeColor != rhs_storage._strokeColor {return false}
        if _storage._strokeOpacity != rhs_storage._strokeOpacity {return false}
        if _storage._radiusTransition != rhs_storage._radiusTransition {return false}
        if _storage._colorTransition != rhs_storage._colorTransition {return false}
        if _storage._blurTransition != rhs_storage._blurTransition {return false}
        if _storage._opacityTransition != rhs_storage._opacityTransition {return false}
        if _storage._translateTransition != rhs_storage._translateTransition {return false}
        if _storage._strokeWidthTransition != rhs_storage._strokeWidthTransition {return false}
        if _storage._strokeColorTransition != rhs_storage._strokeColorTransition {return false}
        if _storage._strokeOpacityTransition != rhs_storage._strokeOpacityTransition {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Tophap_MapboxGl_Proto_Layer.FillExtrusion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Tophap_MapboxGl_Proto_Layer.protoMessageName + ".FillExtrusion"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "source_id"),
    3: .same(proto: "visible"),
    4: .standard(proto: "min_zoom"),
    5: .standard(proto: "max_zoom"),
    6: .same(proto: "opacity"),
    7: .same(proto: "color"),
    8: .same(proto: "translate"),
    9: .standard(proto: "translate_anchor"),
    10: .same(proto: "pattern"),
    11: .same(proto: "height"),
    12: .same(proto: "base"),
    13: .standard(proto: "vertical_gradient"),
    14: .standard(proto: "opacity_transition"),
    15: .standard(proto: "color_transition"),
    16: .standard(proto: "translate_transition"),
    17: .standard(proto: "pattern_transition"),
    18: .standard(proto: "height_transition"),
    19: .standard(proto: "base_transition"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _sourceID: String = String()
    var _visible: Bool = false
    var _minZoom: Float = 0
    var _maxZoom: Float = 0
    var _opacity: Float = 0
    var _color: Com_Tophap_MapboxGl_Proto_Color? = nil
    var _translate: [Float] = []
    var _translateAnchor: Com_Tophap_MapboxGl_Proto_TranslateAnchor = .map
    var _pattern: String = String()
    var _height: Float = 0
    var _base: Float = 0
    var _verticalGradient: Bool = false
    var _opacityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _colorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _translateTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _patternTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _heightTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _baseTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _sourceID = source._sourceID
      _visible = source._visible
      _minZoom = source._minZoom
      _maxZoom = source._maxZoom
      _opacity = source._opacity
      _color = source._color
      _translate = source._translate
      _translateAnchor = source._translateAnchor
      _pattern = source._pattern
      _height = source._height
      _base = source._base
      _verticalGradient = source._verticalGradient
      _opacityTransition = source._opacityTransition
      _colorTransition = source._colorTransition
      _translateTransition = source._translateTransition
      _patternTransition = source._patternTransition
      _heightTransition = source._heightTransition
      _baseTransition = source._baseTransition
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._sourceID)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._visible)
        case 4: try decoder.decodeSingularFloatField(value: &_storage._minZoom)
        case 5: try decoder.decodeSingularFloatField(value: &_storage._maxZoom)
        case 6: try decoder.decodeSingularFloatField(value: &_storage._opacity)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._color)
        case 8: try decoder.decodeRepeatedFloatField(value: &_storage._translate)
        case 9: try decoder.decodeSingularEnumField(value: &_storage._translateAnchor)
        case 10: try decoder.decodeSingularStringField(value: &_storage._pattern)
        case 11: try decoder.decodeSingularFloatField(value: &_storage._height)
        case 12: try decoder.decodeSingularFloatField(value: &_storage._base)
        case 13: try decoder.decodeSingularBoolField(value: &_storage._verticalGradient)
        case 14: try decoder.decodeSingularMessageField(value: &_storage._opacityTransition)
        case 15: try decoder.decodeSingularMessageField(value: &_storage._colorTransition)
        case 16: try decoder.decodeSingularMessageField(value: &_storage._translateTransition)
        case 17: try decoder.decodeSingularMessageField(value: &_storage._patternTransition)
        case 18: try decoder.decodeSingularMessageField(value: &_storage._heightTransition)
        case 19: try decoder.decodeSingularMessageField(value: &_storage._baseTransition)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._sourceID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sourceID, fieldNumber: 2)
      }
      if _storage._visible != false {
        try visitor.visitSingularBoolField(value: _storage._visible, fieldNumber: 3)
      }
      if _storage._minZoom != 0 {
        try visitor.visitSingularFloatField(value: _storage._minZoom, fieldNumber: 4)
      }
      if _storage._maxZoom != 0 {
        try visitor.visitSingularFloatField(value: _storage._maxZoom, fieldNumber: 5)
      }
      if _storage._opacity != 0 {
        try visitor.visitSingularFloatField(value: _storage._opacity, fieldNumber: 6)
      }
      if let v = _storage._color {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if !_storage._translate.isEmpty {
        try visitor.visitPackedFloatField(value: _storage._translate, fieldNumber: 8)
      }
      if _storage._translateAnchor != .map {
        try visitor.visitSingularEnumField(value: _storage._translateAnchor, fieldNumber: 9)
      }
      if !_storage._pattern.isEmpty {
        try visitor.visitSingularStringField(value: _storage._pattern, fieldNumber: 10)
      }
      if _storage._height != 0 {
        try visitor.visitSingularFloatField(value: _storage._height, fieldNumber: 11)
      }
      if _storage._base != 0 {
        try visitor.visitSingularFloatField(value: _storage._base, fieldNumber: 12)
      }
      if _storage._verticalGradient != false {
        try visitor.visitSingularBoolField(value: _storage._verticalGradient, fieldNumber: 13)
      }
      if let v = _storage._opacityTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if let v = _storage._colorTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
      if let v = _storage._translateTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
      if let v = _storage._patternTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
      if let v = _storage._heightTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if let v = _storage._baseTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_MapboxGl_Proto_Layer.FillExtrusion, rhs: Com_Tophap_MapboxGl_Proto_Layer.FillExtrusion) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._sourceID != rhs_storage._sourceID {return false}
        if _storage._visible != rhs_storage._visible {return false}
        if _storage._minZoom != rhs_storage._minZoom {return false}
        if _storage._maxZoom != rhs_storage._maxZoom {return false}
        if _storage._opacity != rhs_storage._opacity {return false}
        if _storage._color != rhs_storage._color {return false}
        if _storage._translate != rhs_storage._translate {return false}
        if _storage._translateAnchor != rhs_storage._translateAnchor {return false}
        if _storage._pattern != rhs_storage._pattern {return false}
        if _storage._height != rhs_storage._height {return false}
        if _storage._base != rhs_storage._base {return false}
        if _storage._verticalGradient != rhs_storage._verticalGradient {return false}
        if _storage._opacityTransition != rhs_storage._opacityTransition {return false}
        if _storage._colorTransition != rhs_storage._colorTransition {return false}
        if _storage._translateTransition != rhs_storage._translateTransition {return false}
        if _storage._patternTransition != rhs_storage._patternTransition {return false}
        if _storage._heightTransition != rhs_storage._heightTransition {return false}
        if _storage._baseTransition != rhs_storage._baseTransition {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Tophap_MapboxGl_Proto_Layer.Fill: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Tophap_MapboxGl_Proto_Layer.protoMessageName + ".Fill"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "source_id"),
    3: .same(proto: "visible"),
    4: .standard(proto: "min_zoom"),
    5: .standard(proto: "max_zoom"),
    6: .same(proto: "antialias"),
    7: .same(proto: "opacity"),
    8: .same(proto: "color"),
    9: .standard(proto: "outline_color"),
    10: .same(proto: "translate"),
    11: .standard(proto: "translate_anchor"),
    12: .same(proto: "pattern"),
    13: .standard(proto: "opacity_transition"),
    14: .standard(proto: "color_transition"),
    15: .standard(proto: "outline_color_transition"),
    16: .standard(proto: "translate_transition"),
    17: .standard(proto: "pattern_transition"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _sourceID: String = String()
    var _visible: Bool = false
    var _minZoom: Float = 0
    var _maxZoom: Float = 0
    var _antialias: Bool = false
    var _opacity: Float = 0
    var _color: Com_Tophap_MapboxGl_Proto_Color? = nil
    var _outlineColor: Com_Tophap_MapboxGl_Proto_Color? = nil
    var _translate: [Float] = []
    var _translateAnchor: Com_Tophap_MapboxGl_Proto_TranslateAnchor = .map
    var _pattern: String = String()
    var _opacityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _colorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _outlineColorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _translateTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _patternTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _sourceID = source._sourceID
      _visible = source._visible
      _minZoom = source._minZoom
      _maxZoom = source._maxZoom
      _antialias = source._antialias
      _opacity = source._opacity
      _color = source._color
      _outlineColor = source._outlineColor
      _translate = source._translate
      _translateAnchor = source._translateAnchor
      _pattern = source._pattern
      _opacityTransition = source._opacityTransition
      _colorTransition = source._colorTransition
      _outlineColorTransition = source._outlineColorTransition
      _translateTransition = source._translateTransition
      _patternTransition = source._patternTransition
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._sourceID)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._visible)
        case 4: try decoder.decodeSingularFloatField(value: &_storage._minZoom)
        case 5: try decoder.decodeSingularFloatField(value: &_storage._maxZoom)
        case 6: try decoder.decodeSingularBoolField(value: &_storage._antialias)
        case 7: try decoder.decodeSingularFloatField(value: &_storage._opacity)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._color)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._outlineColor)
        case 10: try decoder.decodeRepeatedFloatField(value: &_storage._translate)
        case 11: try decoder.decodeSingularEnumField(value: &_storage._translateAnchor)
        case 12: try decoder.decodeSingularStringField(value: &_storage._pattern)
        case 13: try decoder.decodeSingularMessageField(value: &_storage._opacityTransition)
        case 14: try decoder.decodeSingularMessageField(value: &_storage._colorTransition)
        case 15: try decoder.decodeSingularMessageField(value: &_storage._outlineColorTransition)
        case 16: try decoder.decodeSingularMessageField(value: &_storage._translateTransition)
        case 17: try decoder.decodeSingularMessageField(value: &_storage._patternTransition)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._sourceID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sourceID, fieldNumber: 2)
      }
      if _storage._visible != false {
        try visitor.visitSingularBoolField(value: _storage._visible, fieldNumber: 3)
      }
      if _storage._minZoom != 0 {
        try visitor.visitSingularFloatField(value: _storage._minZoom, fieldNumber: 4)
      }
      if _storage._maxZoom != 0 {
        try visitor.visitSingularFloatField(value: _storage._maxZoom, fieldNumber: 5)
      }
      if _storage._antialias != false {
        try visitor.visitSingularBoolField(value: _storage._antialias, fieldNumber: 6)
      }
      if _storage._opacity != 0 {
        try visitor.visitSingularFloatField(value: _storage._opacity, fieldNumber: 7)
      }
      if let v = _storage._color {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._outlineColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if !_storage._translate.isEmpty {
        try visitor.visitPackedFloatField(value: _storage._translate, fieldNumber: 10)
      }
      if _storage._translateAnchor != .map {
        try visitor.visitSingularEnumField(value: _storage._translateAnchor, fieldNumber: 11)
      }
      if !_storage._pattern.isEmpty {
        try visitor.visitSingularStringField(value: _storage._pattern, fieldNumber: 12)
      }
      if let v = _storage._opacityTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if let v = _storage._colorTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if let v = _storage._outlineColorTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
      if let v = _storage._translateTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
      if let v = _storage._patternTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_MapboxGl_Proto_Layer.Fill, rhs: Com_Tophap_MapboxGl_Proto_Layer.Fill) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._sourceID != rhs_storage._sourceID {return false}
        if _storage._visible != rhs_storage._visible {return false}
        if _storage._minZoom != rhs_storage._minZoom {return false}
        if _storage._maxZoom != rhs_storage._maxZoom {return false}
        if _storage._antialias != rhs_storage._antialias {return false}
        if _storage._opacity != rhs_storage._opacity {return false}
        if _storage._color != rhs_storage._color {return false}
        if _storage._outlineColor != rhs_storage._outlineColor {return false}
        if _storage._translate != rhs_storage._translate {return false}
        if _storage._translateAnchor != rhs_storage._translateAnchor {return false}
        if _storage._pattern != rhs_storage._pattern {return false}
        if _storage._opacityTransition != rhs_storage._opacityTransition {return false}
        if _storage._colorTransition != rhs_storage._colorTransition {return false}
        if _storage._outlineColorTransition != rhs_storage._outlineColorTransition {return false}
        if _storage._translateTransition != rhs_storage._translateTransition {return false}
        if _storage._patternTransition != rhs_storage._patternTransition {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Tophap_MapboxGl_Proto_Layer.Heatmap: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Tophap_MapboxGl_Proto_Layer.protoMessageName + ".Heatmap"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "source_id"),
    3: .same(proto: "visible"),
    4: .standard(proto: "min_zoom"),
    5: .standard(proto: "max_zoom"),
    6: .same(proto: "radius"),
    7: .same(proto: "weight"),
    8: .same(proto: "intensity"),
    9: .same(proto: "color"),
    10: .same(proto: "opacity"),
    11: .standard(proto: "radius_transition"),
    12: .standard(proto: "intensity_transition"),
    13: .standard(proto: "opacity_transition"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _sourceID: String = String()
    var _visible: Bool = false
    var _minZoom: Float = 0
    var _maxZoom: Float = 0
    var _radius: Float = 0
    var _weight: Float = 0
    var _intensity: Float = 0
    var _color: Com_Tophap_MapboxGl_Proto_Color? = nil
    var _opacity: Float = 0
    var _radiusTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _intensityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _opacityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _sourceID = source._sourceID
      _visible = source._visible
      _minZoom = source._minZoom
      _maxZoom = source._maxZoom
      _radius = source._radius
      _weight = source._weight
      _intensity = source._intensity
      _color = source._color
      _opacity = source._opacity
      _radiusTransition = source._radiusTransition
      _intensityTransition = source._intensityTransition
      _opacityTransition = source._opacityTransition
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._sourceID)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._visible)
        case 4: try decoder.decodeSingularFloatField(value: &_storage._minZoom)
        case 5: try decoder.decodeSingularFloatField(value: &_storage._maxZoom)
        case 6: try decoder.decodeSingularFloatField(value: &_storage._radius)
        case 7: try decoder.decodeSingularFloatField(value: &_storage._weight)
        case 8: try decoder.decodeSingularFloatField(value: &_storage._intensity)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._color)
        case 10: try decoder.decodeSingularFloatField(value: &_storage._opacity)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._radiusTransition)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._intensityTransition)
        case 13: try decoder.decodeSingularMessageField(value: &_storage._opacityTransition)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._sourceID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sourceID, fieldNumber: 2)
      }
      if _storage._visible != false {
        try visitor.visitSingularBoolField(value: _storage._visible, fieldNumber: 3)
      }
      if _storage._minZoom != 0 {
        try visitor.visitSingularFloatField(value: _storage._minZoom, fieldNumber: 4)
      }
      if _storage._maxZoom != 0 {
        try visitor.visitSingularFloatField(value: _storage._maxZoom, fieldNumber: 5)
      }
      if _storage._radius != 0 {
        try visitor.visitSingularFloatField(value: _storage._radius, fieldNumber: 6)
      }
      if _storage._weight != 0 {
        try visitor.visitSingularFloatField(value: _storage._weight, fieldNumber: 7)
      }
      if _storage._intensity != 0 {
        try visitor.visitSingularFloatField(value: _storage._intensity, fieldNumber: 8)
      }
      if let v = _storage._color {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if _storage._opacity != 0 {
        try visitor.visitSingularFloatField(value: _storage._opacity, fieldNumber: 10)
      }
      if let v = _storage._radiusTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._intensityTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if let v = _storage._opacityTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_MapboxGl_Proto_Layer.Heatmap, rhs: Com_Tophap_MapboxGl_Proto_Layer.Heatmap) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._sourceID != rhs_storage._sourceID {return false}
        if _storage._visible != rhs_storage._visible {return false}
        if _storage._minZoom != rhs_storage._minZoom {return false}
        if _storage._maxZoom != rhs_storage._maxZoom {return false}
        if _storage._radius != rhs_storage._radius {return false}
        if _storage._weight != rhs_storage._weight {return false}
        if _storage._intensity != rhs_storage._intensity {return false}
        if _storage._color != rhs_storage._color {return false}
        if _storage._opacity != rhs_storage._opacity {return false}
        if _storage._radiusTransition != rhs_storage._radiusTransition {return false}
        if _storage._intensityTransition != rhs_storage._intensityTransition {return false}
        if _storage._opacityTransition != rhs_storage._opacityTransition {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Tophap_MapboxGl_Proto_Layer.Hillshade: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Tophap_MapboxGl_Proto_Layer.protoMessageName + ".Hillshade"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "source_id"),
    3: .same(proto: "visible"),
    4: .standard(proto: "min_zoom"),
    5: .standard(proto: "max_zoom"),
    6: .standard(proto: "illumination_direction"),
    7: .standard(proto: "illumination_anchor"),
    8: .same(proto: "exaggeration"),
    9: .standard(proto: "shadow_color"),
    10: .standard(proto: "highlight_color"),
    11: .standard(proto: "accent_color"),
    12: .standard(proto: "exaggeration_transition"),
    13: .standard(proto: "shadow_color_transition"),
    14: .standard(proto: "highlight_color_transition"),
    15: .standard(proto: "accent_color_transition"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _sourceID: String = String()
    var _visible: Bool = false
    var _minZoom: Float = 0
    var _maxZoom: Float = 0
    var _illuminationDirection: Float = 0
    var _illuminationAnchor: Com_Tophap_MapboxGl_Proto_TranslateAnchor = .map
    var _exaggeration: Float = 0
    var _shadowColor: Com_Tophap_MapboxGl_Proto_Color? = nil
    var _highlightColor: Com_Tophap_MapboxGl_Proto_Color? = nil
    var _accentColor: Com_Tophap_MapboxGl_Proto_Color? = nil
    var _exaggerationTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _shadowColorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _highlightColorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _accentColorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _sourceID = source._sourceID
      _visible = source._visible
      _minZoom = source._minZoom
      _maxZoom = source._maxZoom
      _illuminationDirection = source._illuminationDirection
      _illuminationAnchor = source._illuminationAnchor
      _exaggeration = source._exaggeration
      _shadowColor = source._shadowColor
      _highlightColor = source._highlightColor
      _accentColor = source._accentColor
      _exaggerationTransition = source._exaggerationTransition
      _shadowColorTransition = source._shadowColorTransition
      _highlightColorTransition = source._highlightColorTransition
      _accentColorTransition = source._accentColorTransition
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._sourceID)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._visible)
        case 4: try decoder.decodeSingularFloatField(value: &_storage._minZoom)
        case 5: try decoder.decodeSingularFloatField(value: &_storage._maxZoom)
        case 6: try decoder.decodeSingularFloatField(value: &_storage._illuminationDirection)
        case 7: try decoder.decodeSingularEnumField(value: &_storage._illuminationAnchor)
        case 8: try decoder.decodeSingularFloatField(value: &_storage._exaggeration)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._shadowColor)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._highlightColor)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._accentColor)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._exaggerationTransition)
        case 13: try decoder.decodeSingularMessageField(value: &_storage._shadowColorTransition)
        case 14: try decoder.decodeSingularMessageField(value: &_storage._highlightColorTransition)
        case 15: try decoder.decodeSingularMessageField(value: &_storage._accentColorTransition)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._sourceID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sourceID, fieldNumber: 2)
      }
      if _storage._visible != false {
        try visitor.visitSingularBoolField(value: _storage._visible, fieldNumber: 3)
      }
      if _storage._minZoom != 0 {
        try visitor.visitSingularFloatField(value: _storage._minZoom, fieldNumber: 4)
      }
      if _storage._maxZoom != 0 {
        try visitor.visitSingularFloatField(value: _storage._maxZoom, fieldNumber: 5)
      }
      if _storage._illuminationDirection != 0 {
        try visitor.visitSingularFloatField(value: _storage._illuminationDirection, fieldNumber: 6)
      }
      if _storage._illuminationAnchor != .map {
        try visitor.visitSingularEnumField(value: _storage._illuminationAnchor, fieldNumber: 7)
      }
      if _storage._exaggeration != 0 {
        try visitor.visitSingularFloatField(value: _storage._exaggeration, fieldNumber: 8)
      }
      if let v = _storage._shadowColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._highlightColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._accentColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._exaggerationTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if let v = _storage._shadowColorTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if let v = _storage._highlightColorTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if let v = _storage._accentColorTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_MapboxGl_Proto_Layer.Hillshade, rhs: Com_Tophap_MapboxGl_Proto_Layer.Hillshade) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._sourceID != rhs_storage._sourceID {return false}
        if _storage._visible != rhs_storage._visible {return false}
        if _storage._minZoom != rhs_storage._minZoom {return false}
        if _storage._maxZoom != rhs_storage._maxZoom {return false}
        if _storage._illuminationDirection != rhs_storage._illuminationDirection {return false}
        if _storage._illuminationAnchor != rhs_storage._illuminationAnchor {return false}
        if _storage._exaggeration != rhs_storage._exaggeration {return false}
        if _storage._shadowColor != rhs_storage._shadowColor {return false}
        if _storage._highlightColor != rhs_storage._highlightColor {return false}
        if _storage._accentColor != rhs_storage._accentColor {return false}
        if _storage._exaggerationTransition != rhs_storage._exaggerationTransition {return false}
        if _storage._shadowColorTransition != rhs_storage._shadowColorTransition {return false}
        if _storage._highlightColorTransition != rhs_storage._highlightColorTransition {return false}
        if _storage._accentColorTransition != rhs_storage._accentColorTransition {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Tophap_MapboxGl_Proto_Layer.Line: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Tophap_MapboxGl_Proto_Layer.protoMessageName + ".Line"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "source_id"),
    3: .same(proto: "visible"),
    4: .standard(proto: "min_zoom"),
    5: .standard(proto: "max_zoom"),
    6: .same(proto: "cap"),
    7: .same(proto: "join"),
    8: .standard(proto: "miter_limit"),
    9: .standard(proto: "round_limit"),
    10: .same(proto: "opacity"),
    11: .same(proto: "color"),
    12: .same(proto: "translate"),
    13: .standard(proto: "translate_anchor"),
    14: .same(proto: "width"),
    15: .standard(proto: "gap_width"),
    16: .same(proto: "offset"),
    17: .same(proto: "blur"),
    18: .same(proto: "dasharray"),
    19: .same(proto: "pattern"),
    20: .same(proto: "gradient"),
    21: .standard(proto: "opacity_transition"),
    22: .standard(proto: "color_transition"),
    23: .standard(proto: "translate_transition"),
    24: .standard(proto: "width_transition"),
    25: .standard(proto: "gap_width_transition"),
    26: .standard(proto: "offset_transition"),
    27: .standard(proto: "blur_transition"),
    28: .standard(proto: "dasharray_transition"),
    29: .standard(proto: "pattern_transition"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _sourceID: String = String()
    var _visible: Bool = false
    var _minZoom: Float = 0
    var _maxZoom: Float = 0
    var _cap: Com_Tophap_MapboxGl_Proto_Layer.Line.Cap = .butt
    var _join: Com_Tophap_MapboxGl_Proto_Layer.Line.Join = .miter
    var _miterLimit: Float = 0
    var _roundLimit: Float = 0
    var _opacity: Float = 0
    var _color: Com_Tophap_MapboxGl_Proto_Color? = nil
    var _translate: [Float] = []
    var _translateAnchor: Com_Tophap_MapboxGl_Proto_TranslateAnchor = .map
    var _width: Float = 0
    var _gapWidth: Float = 0
    var _offset: Float = 0
    var _blur: Float = 0
    var _dasharray: [Float] = []
    var _pattern: String = String()
    var _gradient: Int32 = 0
    var _opacityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _colorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _translateTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _widthTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _gapWidthTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _offsetTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _blurTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _dasharrayTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _patternTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _sourceID = source._sourceID
      _visible = source._visible
      _minZoom = source._minZoom
      _maxZoom = source._maxZoom
      _cap = source._cap
      _join = source._join
      _miterLimit = source._miterLimit
      _roundLimit = source._roundLimit
      _opacity = source._opacity
      _color = source._color
      _translate = source._translate
      _translateAnchor = source._translateAnchor
      _width = source._width
      _gapWidth = source._gapWidth
      _offset = source._offset
      _blur = source._blur
      _dasharray = source._dasharray
      _pattern = source._pattern
      _gradient = source._gradient
      _opacityTransition = source._opacityTransition
      _colorTransition = source._colorTransition
      _translateTransition = source._translateTransition
      _widthTransition = source._widthTransition
      _gapWidthTransition = source._gapWidthTransition
      _offsetTransition = source._offsetTransition
      _blurTransition = source._blurTransition
      _dasharrayTransition = source._dasharrayTransition
      _patternTransition = source._patternTransition
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._sourceID)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._visible)
        case 4: try decoder.decodeSingularFloatField(value: &_storage._minZoom)
        case 5: try decoder.decodeSingularFloatField(value: &_storage._maxZoom)
        case 6: try decoder.decodeSingularEnumField(value: &_storage._cap)
        case 7: try decoder.decodeSingularEnumField(value: &_storage._join)
        case 8: try decoder.decodeSingularFloatField(value: &_storage._miterLimit)
        case 9: try decoder.decodeSingularFloatField(value: &_storage._roundLimit)
        case 10: try decoder.decodeSingularFloatField(value: &_storage._opacity)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._color)
        case 12: try decoder.decodeRepeatedFloatField(value: &_storage._translate)
        case 13: try decoder.decodeSingularEnumField(value: &_storage._translateAnchor)
        case 14: try decoder.decodeSingularFloatField(value: &_storage._width)
        case 15: try decoder.decodeSingularFloatField(value: &_storage._gapWidth)
        case 16: try decoder.decodeSingularFloatField(value: &_storage._offset)
        case 17: try decoder.decodeSingularFloatField(value: &_storage._blur)
        case 18: try decoder.decodeRepeatedFloatField(value: &_storage._dasharray)
        case 19: try decoder.decodeSingularStringField(value: &_storage._pattern)
        case 20: try decoder.decodeSingularInt32Field(value: &_storage._gradient)
        case 21: try decoder.decodeSingularMessageField(value: &_storage._opacityTransition)
        case 22: try decoder.decodeSingularMessageField(value: &_storage._colorTransition)
        case 23: try decoder.decodeSingularMessageField(value: &_storage._translateTransition)
        case 24: try decoder.decodeSingularMessageField(value: &_storage._widthTransition)
        case 25: try decoder.decodeSingularMessageField(value: &_storage._gapWidthTransition)
        case 26: try decoder.decodeSingularMessageField(value: &_storage._offsetTransition)
        case 27: try decoder.decodeSingularMessageField(value: &_storage._blurTransition)
        case 28: try decoder.decodeSingularMessageField(value: &_storage._dasharrayTransition)
        case 29: try decoder.decodeSingularMessageField(value: &_storage._patternTransition)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._sourceID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sourceID, fieldNumber: 2)
      }
      if _storage._visible != false {
        try visitor.visitSingularBoolField(value: _storage._visible, fieldNumber: 3)
      }
      if _storage._minZoom != 0 {
        try visitor.visitSingularFloatField(value: _storage._minZoom, fieldNumber: 4)
      }
      if _storage._maxZoom != 0 {
        try visitor.visitSingularFloatField(value: _storage._maxZoom, fieldNumber: 5)
      }
      if _storage._cap != .butt {
        try visitor.visitSingularEnumField(value: _storage._cap, fieldNumber: 6)
      }
      if _storage._join != .miter {
        try visitor.visitSingularEnumField(value: _storage._join, fieldNumber: 7)
      }
      if _storage._miterLimit != 0 {
        try visitor.visitSingularFloatField(value: _storage._miterLimit, fieldNumber: 8)
      }
      if _storage._roundLimit != 0 {
        try visitor.visitSingularFloatField(value: _storage._roundLimit, fieldNumber: 9)
      }
      if _storage._opacity != 0 {
        try visitor.visitSingularFloatField(value: _storage._opacity, fieldNumber: 10)
      }
      if let v = _storage._color {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if !_storage._translate.isEmpty {
        try visitor.visitPackedFloatField(value: _storage._translate, fieldNumber: 12)
      }
      if _storage._translateAnchor != .map {
        try visitor.visitSingularEnumField(value: _storage._translateAnchor, fieldNumber: 13)
      }
      if _storage._width != 0 {
        try visitor.visitSingularFloatField(value: _storage._width, fieldNumber: 14)
      }
      if _storage._gapWidth != 0 {
        try visitor.visitSingularFloatField(value: _storage._gapWidth, fieldNumber: 15)
      }
      if _storage._offset != 0 {
        try visitor.visitSingularFloatField(value: _storage._offset, fieldNumber: 16)
      }
      if _storage._blur != 0 {
        try visitor.visitSingularFloatField(value: _storage._blur, fieldNumber: 17)
      }
      if !_storage._dasharray.isEmpty {
        try visitor.visitPackedFloatField(value: _storage._dasharray, fieldNumber: 18)
      }
      if !_storage._pattern.isEmpty {
        try visitor.visitSingularStringField(value: _storage._pattern, fieldNumber: 19)
      }
      if _storage._gradient != 0 {
        try visitor.visitSingularInt32Field(value: _storage._gradient, fieldNumber: 20)
      }
      if let v = _storage._opacityTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      }
      if let v = _storage._colorTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      }
      if let v = _storage._translateTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      }
      if let v = _storage._widthTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      }
      if let v = _storage._gapWidthTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
      }
      if let v = _storage._offsetTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      }
      if let v = _storage._blurTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
      }
      if let v = _storage._dasharrayTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 28)
      }
      if let v = _storage._patternTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 29)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_MapboxGl_Proto_Layer.Line, rhs: Com_Tophap_MapboxGl_Proto_Layer.Line) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._sourceID != rhs_storage._sourceID {return false}
        if _storage._visible != rhs_storage._visible {return false}
        if _storage._minZoom != rhs_storage._minZoom {return false}
        if _storage._maxZoom != rhs_storage._maxZoom {return false}
        if _storage._cap != rhs_storage._cap {return false}
        if _storage._join != rhs_storage._join {return false}
        if _storage._miterLimit != rhs_storage._miterLimit {return false}
        if _storage._roundLimit != rhs_storage._roundLimit {return false}
        if _storage._opacity != rhs_storage._opacity {return false}
        if _storage._color != rhs_storage._color {return false}
        if _storage._translate != rhs_storage._translate {return false}
        if _storage._translateAnchor != rhs_storage._translateAnchor {return false}
        if _storage._width != rhs_storage._width {return false}
        if _storage._gapWidth != rhs_storage._gapWidth {return false}
        if _storage._offset != rhs_storage._offset {return false}
        if _storage._blur != rhs_storage._blur {return false}
        if _storage._dasharray != rhs_storage._dasharray {return false}
        if _storage._pattern != rhs_storage._pattern {return false}
        if _storage._gradient != rhs_storage._gradient {return false}
        if _storage._opacityTransition != rhs_storage._opacityTransition {return false}
        if _storage._colorTransition != rhs_storage._colorTransition {return false}
        if _storage._translateTransition != rhs_storage._translateTransition {return false}
        if _storage._widthTransition != rhs_storage._widthTransition {return false}
        if _storage._gapWidthTransition != rhs_storage._gapWidthTransition {return false}
        if _storage._offsetTransition != rhs_storage._offsetTransition {return false}
        if _storage._blurTransition != rhs_storage._blurTransition {return false}
        if _storage._dasharrayTransition != rhs_storage._dasharrayTransition {return false}
        if _storage._patternTransition != rhs_storage._patternTransition {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Tophap_MapboxGl_Proto_Layer.Line.Cap: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CAP_BUTT"),
    1: .same(proto: "CAP_ROUND"),
    3: .same(proto: "CAP_SQUARE"),
  ]
}

extension Com_Tophap_MapboxGl_Proto_Layer.Line.Join: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "JOIN_MITER"),
    1: .same(proto: "JOIN_BEVEL"),
    2: .same(proto: "JOIN_ROUND"),
  ]
}

extension Com_Tophap_MapboxGl_Proto_Layer.Symbol: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Tophap_MapboxGl_Proto_Layer.protoMessageName + ".Symbol"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "source_id"),
    3: .same(proto: "visible"),
    4: .standard(proto: "min_zoom"),
    5: .standard(proto: "max_zoom"),
    6: .standard(proto: "symbol_placement"),
    7: .standard(proto: "symbol_spacing"),
    8: .standard(proto: "symbol_avoid_edges"),
    9: .standard(proto: "symbol_z_order"),
    10: .standard(proto: "icon_allow_overlap"),
    11: .standard(proto: "icon_ignore_placement"),
    12: .standard(proto: "icon_optional"),
    13: .standard(proto: "icon_rotation_alignment"),
    14: .standard(proto: "icon_size"),
    15: .standard(proto: "icon_text_fit"),
    16: .standard(proto: "icon_text_fit_padding"),
    17: .standard(proto: "icon_image"),
    18: .standard(proto: "icon_rotate"),
    19: .standard(proto: "icon_padding"),
    20: .standard(proto: "icon_keep_upright"),
    21: .standard(proto: "icon_offset"),
    22: .standard(proto: "icon_anchor"),
    23: .standard(proto: "icon_pitch_alignment"),
    24: .standard(proto: "text_pitch_alignment"),
    25: .standard(proto: "text_rotation_alignment"),
    26: .standard(proto: "text_field"),
    27: .standard(proto: "text_font"),
    28: .standard(proto: "text_size"),
    29: .standard(proto: "text_max_width"),
    30: .standard(proto: "text_line_height"),
    31: .standard(proto: "text_letter_spacing"),
    32: .standard(proto: "text_justify"),
    33: .standard(proto: "text_radial_offset"),
    34: .standard(proto: "text_variable_anchor"),
    35: .standard(proto: "text_anchor"),
    36: .standard(proto: "text_max_angle"),
    37: .standard(proto: "text_rotate"),
    38: .standard(proto: "text_padding"),
    39: .standard(proto: "text_keep_upright"),
    40: .standard(proto: "text_transform"),
    41: .standard(proto: "text_offset"),
    42: .standard(proto: "text_allow_overlap"),
    43: .standard(proto: "text_ignore_placement"),
    44: .standard(proto: "text_optional"),
    45: .standard(proto: "icon_opacity"),
    46: .standard(proto: "icon_color"),
    47: .standard(proto: "icon_halo_color"),
    48: .standard(proto: "icon_halo_width"),
    49: .standard(proto: "icon_halo_blur"),
    50: .standard(proto: "icon_translate"),
    51: .standard(proto: "icon_translate_anchor"),
    52: .standard(proto: "text_opacity"),
    53: .standard(proto: "text_color"),
    54: .standard(proto: "text_halo_color"),
    55: .standard(proto: "text_halo_width"),
    56: .standard(proto: "text_halo_blur"),
    57: .standard(proto: "text_translate"),
    58: .standard(proto: "text_translate_anchor"),
    59: .standard(proto: "icon_opacity_transition"),
    60: .standard(proto: "icon_color_transition"),
    61: .standard(proto: "icon_halo_color_transition"),
    62: .standard(proto: "icon_halo_width_transition"),
    63: .standard(proto: "icon_halo_blur_transition"),
    64: .standard(proto: "icon_translate_transition"),
    65: .standard(proto: "text_opacity_transition"),
    66: .standard(proto: "text_color_transition"),
    67: .standard(proto: "text_halo_color_transition"),
    68: .standard(proto: "text_halo_width_transition"),
    69: .standard(proto: "text_halo_blur_transition"),
    70: .standard(proto: "text_translate_transition"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _sourceID: String = String()
    var _visible: Bool = false
    var _minZoom: Float = 0
    var _maxZoom: Float = 0
    var _symbolPlacement: Com_Tophap_MapboxGl_Proto_Layer.Symbol.Placement = .point
    var _symbolSpacing: Float = 0
    var _symbolAvoidEdges: Bool = false
    var _symbolZOrder: Com_Tophap_MapboxGl_Proto_Layer.Symbol.ZOrder = .auto
    var _iconAllowOverlap: Bool = false
    var _iconIgnorePlacement: Bool = false
    var _iconOptional: Bool = false
    var _iconRotationAlignment: Com_Tophap_MapboxGl_Proto_Layer.Symbol.Alignment = .auto
    var _iconSize: Float = 0
    var _iconTextFit: Com_Tophap_MapboxGl_Proto_Layer.Symbol.TextFit = .none
    var _iconTextFitPadding: [Float] = []
    var _iconImage: String = String()
    var _iconRotate: Float = 0
    var _iconPadding: Float = 0
    var _iconKeepUpright: Bool = false
    var _iconOffset: [Float] = []
    var _iconAnchor: Com_Tophap_MapboxGl_Proto_PositionAnchor = .positionCenter
    var _iconPitchAlignment: Com_Tophap_MapboxGl_Proto_Layer.Symbol.Alignment = .auto
    var _textPitchAlignment: Com_Tophap_MapboxGl_Proto_Layer.Symbol.Alignment = .auto
    var _textRotationAlignment: Com_Tophap_MapboxGl_Proto_Layer.Symbol.Alignment = .auto
    var _textField: [Com_Tophap_MapboxGl_Proto_FormattedSection] = []
    var _textFont: [String] = []
    var _textSize: Float = 0
    var _textMaxWidth: Float = 0
    var _textLineHeight: Float = 0
    var _textLetterSpacing: Float = 0
    var _textJustify: Com_Tophap_MapboxGl_Proto_Layer.Symbol.TextJustify = .justifyAuto
    var _textRadialOffset: Float = 0
    var _textVariableAnchor: [Com_Tophap_MapboxGl_Proto_PositionAnchor] = []
    var _textAnchor: Com_Tophap_MapboxGl_Proto_PositionAnchor = .positionCenter
    var _textMaxAngle: Float = 0
    var _textRotate: Float = 0
    var _textPadding: Float = 0
    var _textKeepUpright: Bool = false
    var _textTransform: Com_Tophap_MapboxGl_Proto_Layer.Symbol.TextTransform = .transformNone
    var _textOffset: [Float] = []
    var _textAllowOverlap: Bool = false
    var _textIgnorePlacement: Bool = false
    var _textOptional: Bool = false
    var _iconOpacity: Float = 0
    var _iconColor: Com_Tophap_MapboxGl_Proto_Color? = nil
    var _iconHaloColor: Com_Tophap_MapboxGl_Proto_Color? = nil
    var _iconHaloWidth: Float = 0
    var _iconHaloBlur: Float = 0
    var _iconTranslate: [Float] = []
    var _iconTranslateAnchor: Com_Tophap_MapboxGl_Proto_TranslateAnchor = .map
    var _textOpacity: Float = 0
    var _textColor: Com_Tophap_MapboxGl_Proto_Color? = nil
    var _textHaloColor: Com_Tophap_MapboxGl_Proto_Color? = nil
    var _textHaloWidth: Float = 0
    var _textHaloBlur: Float = 0
    var _textTranslate: [Float] = []
    var _textTranslateAnchor: Com_Tophap_MapboxGl_Proto_TranslateAnchor = .map
    var _iconOpacityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _iconColorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _iconHaloColorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _iconHaloWidthTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _iconHaloBlurTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _iconTranslateTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _textOpacityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _textColorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _textHaloColorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _textHaloWidthTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _textHaloBlurTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _textTranslateTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _sourceID = source._sourceID
      _visible = source._visible
      _minZoom = source._minZoom
      _maxZoom = source._maxZoom
      _symbolPlacement = source._symbolPlacement
      _symbolSpacing = source._symbolSpacing
      _symbolAvoidEdges = source._symbolAvoidEdges
      _symbolZOrder = source._symbolZOrder
      _iconAllowOverlap = source._iconAllowOverlap
      _iconIgnorePlacement = source._iconIgnorePlacement
      _iconOptional = source._iconOptional
      _iconRotationAlignment = source._iconRotationAlignment
      _iconSize = source._iconSize
      _iconTextFit = source._iconTextFit
      _iconTextFitPadding = source._iconTextFitPadding
      _iconImage = source._iconImage
      _iconRotate = source._iconRotate
      _iconPadding = source._iconPadding
      _iconKeepUpright = source._iconKeepUpright
      _iconOffset = source._iconOffset
      _iconAnchor = source._iconAnchor
      _iconPitchAlignment = source._iconPitchAlignment
      _textPitchAlignment = source._textPitchAlignment
      _textRotationAlignment = source._textRotationAlignment
      _textField = source._textField
      _textFont = source._textFont
      _textSize = source._textSize
      _textMaxWidth = source._textMaxWidth
      _textLineHeight = source._textLineHeight
      _textLetterSpacing = source._textLetterSpacing
      _textJustify = source._textJustify
      _textRadialOffset = source._textRadialOffset
      _textVariableAnchor = source._textVariableAnchor
      _textAnchor = source._textAnchor
      _textMaxAngle = source._textMaxAngle
      _textRotate = source._textRotate
      _textPadding = source._textPadding
      _textKeepUpright = source._textKeepUpright
      _textTransform = source._textTransform
      _textOffset = source._textOffset
      _textAllowOverlap = source._textAllowOverlap
      _textIgnorePlacement = source._textIgnorePlacement
      _textOptional = source._textOptional
      _iconOpacity = source._iconOpacity
      _iconColor = source._iconColor
      _iconHaloColor = source._iconHaloColor
      _iconHaloWidth = source._iconHaloWidth
      _iconHaloBlur = source._iconHaloBlur
      _iconTranslate = source._iconTranslate
      _iconTranslateAnchor = source._iconTranslateAnchor
      _textOpacity = source._textOpacity
      _textColor = source._textColor
      _textHaloColor = source._textHaloColor
      _textHaloWidth = source._textHaloWidth
      _textHaloBlur = source._textHaloBlur
      _textTranslate = source._textTranslate
      _textTranslateAnchor = source._textTranslateAnchor
      _iconOpacityTransition = source._iconOpacityTransition
      _iconColorTransition = source._iconColorTransition
      _iconHaloColorTransition = source._iconHaloColorTransition
      _iconHaloWidthTransition = source._iconHaloWidthTransition
      _iconHaloBlurTransition = source._iconHaloBlurTransition
      _iconTranslateTransition = source._iconTranslateTransition
      _textOpacityTransition = source._textOpacityTransition
      _textColorTransition = source._textColorTransition
      _textHaloColorTransition = source._textHaloColorTransition
      _textHaloWidthTransition = source._textHaloWidthTransition
      _textHaloBlurTransition = source._textHaloBlurTransition
      _textTranslateTransition = source._textTranslateTransition
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._sourceID)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._visible)
        case 4: try decoder.decodeSingularFloatField(value: &_storage._minZoom)
        case 5: try decoder.decodeSingularFloatField(value: &_storage._maxZoom)
        case 6: try decoder.decodeSingularEnumField(value: &_storage._symbolPlacement)
        case 7: try decoder.decodeSingularFloatField(value: &_storage._symbolSpacing)
        case 8: try decoder.decodeSingularBoolField(value: &_storage._symbolAvoidEdges)
        case 9: try decoder.decodeSingularEnumField(value: &_storage._symbolZOrder)
        case 10: try decoder.decodeSingularBoolField(value: &_storage._iconAllowOverlap)
        case 11: try decoder.decodeSingularBoolField(value: &_storage._iconIgnorePlacement)
        case 12: try decoder.decodeSingularBoolField(value: &_storage._iconOptional)
        case 13: try decoder.decodeSingularEnumField(value: &_storage._iconRotationAlignment)
        case 14: try decoder.decodeSingularFloatField(value: &_storage._iconSize)
        case 15: try decoder.decodeSingularEnumField(value: &_storage._iconTextFit)
        case 16: try decoder.decodeRepeatedFloatField(value: &_storage._iconTextFitPadding)
        case 17: try decoder.decodeSingularStringField(value: &_storage._iconImage)
        case 18: try decoder.decodeSingularFloatField(value: &_storage._iconRotate)
        case 19: try decoder.decodeSingularFloatField(value: &_storage._iconPadding)
        case 20: try decoder.decodeSingularBoolField(value: &_storage._iconKeepUpright)
        case 21: try decoder.decodeRepeatedFloatField(value: &_storage._iconOffset)
        case 22: try decoder.decodeSingularEnumField(value: &_storage._iconAnchor)
        case 23: try decoder.decodeSingularEnumField(value: &_storage._iconPitchAlignment)
        case 24: try decoder.decodeSingularEnumField(value: &_storage._textPitchAlignment)
        case 25: try decoder.decodeSingularEnumField(value: &_storage._textRotationAlignment)
        case 26: try decoder.decodeRepeatedMessageField(value: &_storage._textField)
        case 27: try decoder.decodeRepeatedStringField(value: &_storage._textFont)
        case 28: try decoder.decodeSingularFloatField(value: &_storage._textSize)
        case 29: try decoder.decodeSingularFloatField(value: &_storage._textMaxWidth)
        case 30: try decoder.decodeSingularFloatField(value: &_storage._textLineHeight)
        case 31: try decoder.decodeSingularFloatField(value: &_storage._textLetterSpacing)
        case 32: try decoder.decodeSingularEnumField(value: &_storage._textJustify)
        case 33: try decoder.decodeSingularFloatField(value: &_storage._textRadialOffset)
        case 34: try decoder.decodeRepeatedEnumField(value: &_storage._textVariableAnchor)
        case 35: try decoder.decodeSingularEnumField(value: &_storage._textAnchor)
        case 36: try decoder.decodeSingularFloatField(value: &_storage._textMaxAngle)
        case 37: try decoder.decodeSingularFloatField(value: &_storage._textRotate)
        case 38: try decoder.decodeSingularFloatField(value: &_storage._textPadding)
        case 39: try decoder.decodeSingularBoolField(value: &_storage._textKeepUpright)
        case 40: try decoder.decodeSingularEnumField(value: &_storage._textTransform)
        case 41: try decoder.decodeRepeatedFloatField(value: &_storage._textOffset)
        case 42: try decoder.decodeSingularBoolField(value: &_storage._textAllowOverlap)
        case 43: try decoder.decodeSingularBoolField(value: &_storage._textIgnorePlacement)
        case 44: try decoder.decodeSingularBoolField(value: &_storage._textOptional)
        case 45: try decoder.decodeSingularFloatField(value: &_storage._iconOpacity)
        case 46: try decoder.decodeSingularMessageField(value: &_storage._iconColor)
        case 47: try decoder.decodeSingularMessageField(value: &_storage._iconHaloColor)
        case 48: try decoder.decodeSingularFloatField(value: &_storage._iconHaloWidth)
        case 49: try decoder.decodeSingularFloatField(value: &_storage._iconHaloBlur)
        case 50: try decoder.decodeRepeatedFloatField(value: &_storage._iconTranslate)
        case 51: try decoder.decodeSingularEnumField(value: &_storage._iconTranslateAnchor)
        case 52: try decoder.decodeSingularFloatField(value: &_storage._textOpacity)
        case 53: try decoder.decodeSingularMessageField(value: &_storage._textColor)
        case 54: try decoder.decodeSingularMessageField(value: &_storage._textHaloColor)
        case 55: try decoder.decodeSingularFloatField(value: &_storage._textHaloWidth)
        case 56: try decoder.decodeSingularFloatField(value: &_storage._textHaloBlur)
        case 57: try decoder.decodeRepeatedFloatField(value: &_storage._textTranslate)
        case 58: try decoder.decodeSingularEnumField(value: &_storage._textTranslateAnchor)
        case 59: try decoder.decodeSingularMessageField(value: &_storage._iconOpacityTransition)
        case 60: try decoder.decodeSingularMessageField(value: &_storage._iconColorTransition)
        case 61: try decoder.decodeSingularMessageField(value: &_storage._iconHaloColorTransition)
        case 62: try decoder.decodeSingularMessageField(value: &_storage._iconHaloWidthTransition)
        case 63: try decoder.decodeSingularMessageField(value: &_storage._iconHaloBlurTransition)
        case 64: try decoder.decodeSingularMessageField(value: &_storage._iconTranslateTransition)
        case 65: try decoder.decodeSingularMessageField(value: &_storage._textOpacityTransition)
        case 66: try decoder.decodeSingularMessageField(value: &_storage._textColorTransition)
        case 67: try decoder.decodeSingularMessageField(value: &_storage._textHaloColorTransition)
        case 68: try decoder.decodeSingularMessageField(value: &_storage._textHaloWidthTransition)
        case 69: try decoder.decodeSingularMessageField(value: &_storage._textHaloBlurTransition)
        case 70: try decoder.decodeSingularMessageField(value: &_storage._textTranslateTransition)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._sourceID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sourceID, fieldNumber: 2)
      }
      if _storage._visible != false {
        try visitor.visitSingularBoolField(value: _storage._visible, fieldNumber: 3)
      }
      if _storage._minZoom != 0 {
        try visitor.visitSingularFloatField(value: _storage._minZoom, fieldNumber: 4)
      }
      if _storage._maxZoom != 0 {
        try visitor.visitSingularFloatField(value: _storage._maxZoom, fieldNumber: 5)
      }
      if _storage._symbolPlacement != .point {
        try visitor.visitSingularEnumField(value: _storage._symbolPlacement, fieldNumber: 6)
      }
      if _storage._symbolSpacing != 0 {
        try visitor.visitSingularFloatField(value: _storage._symbolSpacing, fieldNumber: 7)
      }
      if _storage._symbolAvoidEdges != false {
        try visitor.visitSingularBoolField(value: _storage._symbolAvoidEdges, fieldNumber: 8)
      }
      if _storage._symbolZOrder != .auto {
        try visitor.visitSingularEnumField(value: _storage._symbolZOrder, fieldNumber: 9)
      }
      if _storage._iconAllowOverlap != false {
        try visitor.visitSingularBoolField(value: _storage._iconAllowOverlap, fieldNumber: 10)
      }
      if _storage._iconIgnorePlacement != false {
        try visitor.visitSingularBoolField(value: _storage._iconIgnorePlacement, fieldNumber: 11)
      }
      if _storage._iconOptional != false {
        try visitor.visitSingularBoolField(value: _storage._iconOptional, fieldNumber: 12)
      }
      if _storage._iconRotationAlignment != .auto {
        try visitor.visitSingularEnumField(value: _storage._iconRotationAlignment, fieldNumber: 13)
      }
      if _storage._iconSize != 0 {
        try visitor.visitSingularFloatField(value: _storage._iconSize, fieldNumber: 14)
      }
      if _storage._iconTextFit != .none {
        try visitor.visitSingularEnumField(value: _storage._iconTextFit, fieldNumber: 15)
      }
      if !_storage._iconTextFitPadding.isEmpty {
        try visitor.visitPackedFloatField(value: _storage._iconTextFitPadding, fieldNumber: 16)
      }
      if !_storage._iconImage.isEmpty {
        try visitor.visitSingularStringField(value: _storage._iconImage, fieldNumber: 17)
      }
      if _storage._iconRotate != 0 {
        try visitor.visitSingularFloatField(value: _storage._iconRotate, fieldNumber: 18)
      }
      if _storage._iconPadding != 0 {
        try visitor.visitSingularFloatField(value: _storage._iconPadding, fieldNumber: 19)
      }
      if _storage._iconKeepUpright != false {
        try visitor.visitSingularBoolField(value: _storage._iconKeepUpright, fieldNumber: 20)
      }
      if !_storage._iconOffset.isEmpty {
        try visitor.visitPackedFloatField(value: _storage._iconOffset, fieldNumber: 21)
      }
      if _storage._iconAnchor != .positionCenter {
        try visitor.visitSingularEnumField(value: _storage._iconAnchor, fieldNumber: 22)
      }
      if _storage._iconPitchAlignment != .auto {
        try visitor.visitSingularEnumField(value: _storage._iconPitchAlignment, fieldNumber: 23)
      }
      if _storage._textPitchAlignment != .auto {
        try visitor.visitSingularEnumField(value: _storage._textPitchAlignment, fieldNumber: 24)
      }
      if _storage._textRotationAlignment != .auto {
        try visitor.visitSingularEnumField(value: _storage._textRotationAlignment, fieldNumber: 25)
      }
      if !_storage._textField.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._textField, fieldNumber: 26)
      }
      if !_storage._textFont.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._textFont, fieldNumber: 27)
      }
      if _storage._textSize != 0 {
        try visitor.visitSingularFloatField(value: _storage._textSize, fieldNumber: 28)
      }
      if _storage._textMaxWidth != 0 {
        try visitor.visitSingularFloatField(value: _storage._textMaxWidth, fieldNumber: 29)
      }
      if _storage._textLineHeight != 0 {
        try visitor.visitSingularFloatField(value: _storage._textLineHeight, fieldNumber: 30)
      }
      if _storage._textLetterSpacing != 0 {
        try visitor.visitSingularFloatField(value: _storage._textLetterSpacing, fieldNumber: 31)
      }
      if _storage._textJustify != .justifyAuto {
        try visitor.visitSingularEnumField(value: _storage._textJustify, fieldNumber: 32)
      }
      if _storage._textRadialOffset != 0 {
        try visitor.visitSingularFloatField(value: _storage._textRadialOffset, fieldNumber: 33)
      }
      if !_storage._textVariableAnchor.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._textVariableAnchor, fieldNumber: 34)
      }
      if _storage._textAnchor != .positionCenter {
        try visitor.visitSingularEnumField(value: _storage._textAnchor, fieldNumber: 35)
      }
      if _storage._textMaxAngle != 0 {
        try visitor.visitSingularFloatField(value: _storage._textMaxAngle, fieldNumber: 36)
      }
      if _storage._textRotate != 0 {
        try visitor.visitSingularFloatField(value: _storage._textRotate, fieldNumber: 37)
      }
      if _storage._textPadding != 0 {
        try visitor.visitSingularFloatField(value: _storage._textPadding, fieldNumber: 38)
      }
      if _storage._textKeepUpright != false {
        try visitor.visitSingularBoolField(value: _storage._textKeepUpright, fieldNumber: 39)
      }
      if _storage._textTransform != .transformNone {
        try visitor.visitSingularEnumField(value: _storage._textTransform, fieldNumber: 40)
      }
      if !_storage._textOffset.isEmpty {
        try visitor.visitPackedFloatField(value: _storage._textOffset, fieldNumber: 41)
      }
      if _storage._textAllowOverlap != false {
        try visitor.visitSingularBoolField(value: _storage._textAllowOverlap, fieldNumber: 42)
      }
      if _storage._textIgnorePlacement != false {
        try visitor.visitSingularBoolField(value: _storage._textIgnorePlacement, fieldNumber: 43)
      }
      if _storage._textOptional != false {
        try visitor.visitSingularBoolField(value: _storage._textOptional, fieldNumber: 44)
      }
      if _storage._iconOpacity != 0 {
        try visitor.visitSingularFloatField(value: _storage._iconOpacity, fieldNumber: 45)
      }
      if let v = _storage._iconColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 46)
      }
      if let v = _storage._iconHaloColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 47)
      }
      if _storage._iconHaloWidth != 0 {
        try visitor.visitSingularFloatField(value: _storage._iconHaloWidth, fieldNumber: 48)
      }
      if _storage._iconHaloBlur != 0 {
        try visitor.visitSingularFloatField(value: _storage._iconHaloBlur, fieldNumber: 49)
      }
      if !_storage._iconTranslate.isEmpty {
        try visitor.visitPackedFloatField(value: _storage._iconTranslate, fieldNumber: 50)
      }
      if _storage._iconTranslateAnchor != .map {
        try visitor.visitSingularEnumField(value: _storage._iconTranslateAnchor, fieldNumber: 51)
      }
      if _storage._textOpacity != 0 {
        try visitor.visitSingularFloatField(value: _storage._textOpacity, fieldNumber: 52)
      }
      if let v = _storage._textColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 53)
      }
      if let v = _storage._textHaloColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 54)
      }
      if _storage._textHaloWidth != 0 {
        try visitor.visitSingularFloatField(value: _storage._textHaloWidth, fieldNumber: 55)
      }
      if _storage._textHaloBlur != 0 {
        try visitor.visitSingularFloatField(value: _storage._textHaloBlur, fieldNumber: 56)
      }
      if !_storage._textTranslate.isEmpty {
        try visitor.visitPackedFloatField(value: _storage._textTranslate, fieldNumber: 57)
      }
      if _storage._textTranslateAnchor != .map {
        try visitor.visitSingularEnumField(value: _storage._textTranslateAnchor, fieldNumber: 58)
      }
      if let v = _storage._iconOpacityTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 59)
      }
      if let v = _storage._iconColorTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 60)
      }
      if let v = _storage._iconHaloColorTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 61)
      }
      if let v = _storage._iconHaloWidthTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 62)
      }
      if let v = _storage._iconHaloBlurTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 63)
      }
      if let v = _storage._iconTranslateTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 64)
      }
      if let v = _storage._textOpacityTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 65)
      }
      if let v = _storage._textColorTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 66)
      }
      if let v = _storage._textHaloColorTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 67)
      }
      if let v = _storage._textHaloWidthTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 68)
      }
      if let v = _storage._textHaloBlurTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 69)
      }
      if let v = _storage._textTranslateTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 70)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_MapboxGl_Proto_Layer.Symbol, rhs: Com_Tophap_MapboxGl_Proto_Layer.Symbol) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._sourceID != rhs_storage._sourceID {return false}
        if _storage._visible != rhs_storage._visible {return false}
        if _storage._minZoom != rhs_storage._minZoom {return false}
        if _storage._maxZoom != rhs_storage._maxZoom {return false}
        if _storage._symbolPlacement != rhs_storage._symbolPlacement {return false}
        if _storage._symbolSpacing != rhs_storage._symbolSpacing {return false}
        if _storage._symbolAvoidEdges != rhs_storage._symbolAvoidEdges {return false}
        if _storage._symbolZOrder != rhs_storage._symbolZOrder {return false}
        if _storage._iconAllowOverlap != rhs_storage._iconAllowOverlap {return false}
        if _storage._iconIgnorePlacement != rhs_storage._iconIgnorePlacement {return false}
        if _storage._iconOptional != rhs_storage._iconOptional {return false}
        if _storage._iconRotationAlignment != rhs_storage._iconRotationAlignment {return false}
        if _storage._iconSize != rhs_storage._iconSize {return false}
        if _storage._iconTextFit != rhs_storage._iconTextFit {return false}
        if _storage._iconTextFitPadding != rhs_storage._iconTextFitPadding {return false}
        if _storage._iconImage != rhs_storage._iconImage {return false}
        if _storage._iconRotate != rhs_storage._iconRotate {return false}
        if _storage._iconPadding != rhs_storage._iconPadding {return false}
        if _storage._iconKeepUpright != rhs_storage._iconKeepUpright {return false}
        if _storage._iconOffset != rhs_storage._iconOffset {return false}
        if _storage._iconAnchor != rhs_storage._iconAnchor {return false}
        if _storage._iconPitchAlignment != rhs_storage._iconPitchAlignment {return false}
        if _storage._textPitchAlignment != rhs_storage._textPitchAlignment {return false}
        if _storage._textRotationAlignment != rhs_storage._textRotationAlignment {return false}
        if _storage._textField != rhs_storage._textField {return false}
        if _storage._textFont != rhs_storage._textFont {return false}
        if _storage._textSize != rhs_storage._textSize {return false}
        if _storage._textMaxWidth != rhs_storage._textMaxWidth {return false}
        if _storage._textLineHeight != rhs_storage._textLineHeight {return false}
        if _storage._textLetterSpacing != rhs_storage._textLetterSpacing {return false}
        if _storage._textJustify != rhs_storage._textJustify {return false}
        if _storage._textRadialOffset != rhs_storage._textRadialOffset {return false}
        if _storage._textVariableAnchor != rhs_storage._textVariableAnchor {return false}
        if _storage._textAnchor != rhs_storage._textAnchor {return false}
        if _storage._textMaxAngle != rhs_storage._textMaxAngle {return false}
        if _storage._textRotate != rhs_storage._textRotate {return false}
        if _storage._textPadding != rhs_storage._textPadding {return false}
        if _storage._textKeepUpright != rhs_storage._textKeepUpright {return false}
        if _storage._textTransform != rhs_storage._textTransform {return false}
        if _storage._textOffset != rhs_storage._textOffset {return false}
        if _storage._textAllowOverlap != rhs_storage._textAllowOverlap {return false}
        if _storage._textIgnorePlacement != rhs_storage._textIgnorePlacement {return false}
        if _storage._textOptional != rhs_storage._textOptional {return false}
        if _storage._iconOpacity != rhs_storage._iconOpacity {return false}
        if _storage._iconColor != rhs_storage._iconColor {return false}
        if _storage._iconHaloColor != rhs_storage._iconHaloColor {return false}
        if _storage._iconHaloWidth != rhs_storage._iconHaloWidth {return false}
        if _storage._iconHaloBlur != rhs_storage._iconHaloBlur {return false}
        if _storage._iconTranslate != rhs_storage._iconTranslate {return false}
        if _storage._iconTranslateAnchor != rhs_storage._iconTranslateAnchor {return false}
        if _storage._textOpacity != rhs_storage._textOpacity {return false}
        if _storage._textColor != rhs_storage._textColor {return false}
        if _storage._textHaloColor != rhs_storage._textHaloColor {return false}
        if _storage._textHaloWidth != rhs_storage._textHaloWidth {return false}
        if _storage._textHaloBlur != rhs_storage._textHaloBlur {return false}
        if _storage._textTranslate != rhs_storage._textTranslate {return false}
        if _storage._textTranslateAnchor != rhs_storage._textTranslateAnchor {return false}
        if _storage._iconOpacityTransition != rhs_storage._iconOpacityTransition {return false}
        if _storage._iconColorTransition != rhs_storage._iconColorTransition {return false}
        if _storage._iconHaloColorTransition != rhs_storage._iconHaloColorTransition {return false}
        if _storage._iconHaloWidthTransition != rhs_storage._iconHaloWidthTransition {return false}
        if _storage._iconHaloBlurTransition != rhs_storage._iconHaloBlurTransition {return false}
        if _storage._iconTranslateTransition != rhs_storage._iconTranslateTransition {return false}
        if _storage._textOpacityTransition != rhs_storage._textOpacityTransition {return false}
        if _storage._textColorTransition != rhs_storage._textColorTransition {return false}
        if _storage._textHaloColorTransition != rhs_storage._textHaloColorTransition {return false}
        if _storage._textHaloWidthTransition != rhs_storage._textHaloWidthTransition {return false}
        if _storage._textHaloBlurTransition != rhs_storage._textHaloBlurTransition {return false}
        if _storage._textTranslateTransition != rhs_storage._textTranslateTransition {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Tophap_MapboxGl_Proto_Layer.Symbol.Placement: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PLACEMENT_POINT"),
    1: .same(proto: "PLACEMENT_LINE"),
    2: .same(proto: "PLACEMENT_LINE_CENTER"),
  ]
}

extension Com_Tophap_MapboxGl_Proto_Layer.Symbol.ZOrder: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Z_ORDER_AUTO"),
    1: .same(proto: "Z_ORDER_VIEWPORT_Y"),
    2: .same(proto: "Z_ORDER_SOURCE"),
  ]
}

extension Com_Tophap_MapboxGl_Proto_Layer.Symbol.Alignment: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ALIGNMENT_AUTO"),
    1: .same(proto: "ALIGNMENT_MAP"),
    2: .same(proto: "ALIGNMENT_VIEWPORT"),
  ]
}

extension Com_Tophap_MapboxGl_Proto_Layer.Symbol.TextFit: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TEXT_FIT_NONE"),
    1: .same(proto: "TEXT_FIT_WIDTH"),
    2: .same(proto: "TEXT_FIT_HEIGHT"),
    3: .same(proto: "TEXT_FIT_BOTH"),
  ]
}

extension Com_Tophap_MapboxGl_Proto_Layer.Symbol.TextJustify: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "JUSTIFY_AUTO"),
    1: .same(proto: "JUSTIFY_LEFT"),
    2: .same(proto: "JUSTIFY_CENTER"),
    3: .same(proto: "JUSTIFY_RIGHT"),
  ]
}

extension Com_Tophap_MapboxGl_Proto_Layer.Symbol.TextTransform: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TRANSFORM_NONE"),
    1: .same(proto: "TRANSFORM_UPPERCASE"),
    2: .same(proto: "TRANSFORM_LOWERCASE"),
  ]
}
