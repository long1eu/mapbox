// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: layers_operations.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Com_Tophap_MapboxGl_Proto_Operations {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Add {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var layer: Com_Tophap_MapboxGl_Proto_Layer {
      get {return _storage._layer ?? Com_Tophap_MapboxGl_Proto_Layer()}
      set {_uniqueStorage()._layer = newValue}
    }
    /// Returns true if `layer` has been explicitly set.
    var hasLayer: Bool {return _storage._layer != nil}
    /// Clears the value of `layer`. Subsequent reads from it will return its default value.
    mutating func clearLayer() {_uniqueStorage()._layer = nil}

    var position: OneOf_Position? {
      get {return _storage._position}
      set {_uniqueStorage()._position = newValue}
    }

    var belowID: String {
      get {
        if case .belowID(let v)? = _storage._position {return v}
        return String()
      }
      set {_uniqueStorage()._position = .belowID(newValue)}
    }

    var aboveID: String {
      get {
        if case .aboveID(let v)? = _storage._position {return v}
        return String()
      }
      set {_uniqueStorage()._position = .aboveID(newValue)}
    }

    var index: Int32 {
      get {
        if case .index(let v)? = _storage._position {return v}
        return 0
      }
      set {_uniqueStorage()._position = .index(newValue)}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_Position: Equatable {
      case belowID(String)
      case aboveID(String)
      case index(Int32)

    #if !swift(>=4.1)
      static func ==(lhs: Com_Tophap_MapboxGl_Proto_Operations.Add.OneOf_Position, rhs: Com_Tophap_MapboxGl_Proto_Operations.Add.OneOf_Position) -> Bool {
        switch (lhs, rhs) {
        case (.belowID(let l), .belowID(let r)): return l == r
        case (.aboveID(let l), .aboveID(let r)): return l == r
        case (.index(let l), .index(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct Update {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String {
      get {return _storage._id}
      set {_uniqueStorage()._id = newValue}
    }

    var type: OneOf_Type? {
      get {return _storage._type}
      set {_uniqueStorage()._type = newValue}
    }

    var backgroundLayer: Com_Tophap_MapboxGl_Proto_Operations.Update.Background {
      get {
        if case .backgroundLayer(let v)? = _storage._type {return v}
        return Com_Tophap_MapboxGl_Proto_Operations.Update.Background()
      }
      set {_uniqueStorage()._type = .backgroundLayer(newValue)}
    }

    var circleLayer: Com_Tophap_MapboxGl_Proto_Operations.Update.Circle {
      get {
        if case .circleLayer(let v)? = _storage._type {return v}
        return Com_Tophap_MapboxGl_Proto_Operations.Update.Circle()
      }
      set {_uniqueStorage()._type = .circleLayer(newValue)}
    }

    var fillLayer: Com_Tophap_MapboxGl_Proto_Operations.Update.Fill {
      get {
        if case .fillLayer(let v)? = _storage._type {return v}
        return Com_Tophap_MapboxGl_Proto_Operations.Update.Fill()
      }
      set {_uniqueStorage()._type = .fillLayer(newValue)}
    }

    var fillExtrusionLayer: Com_Tophap_MapboxGl_Proto_Operations.Update.FillExtrusion {
      get {
        if case .fillExtrusionLayer(let v)? = _storage._type {return v}
        return Com_Tophap_MapboxGl_Proto_Operations.Update.FillExtrusion()
      }
      set {_uniqueStorage()._type = .fillExtrusionLayer(newValue)}
    }

    var lineLayer: Com_Tophap_MapboxGl_Proto_Operations.Update.Line {
      get {
        if case .lineLayer(let v)? = _storage._type {return v}
        return Com_Tophap_MapboxGl_Proto_Operations.Update.Line()
      }
      set {_uniqueStorage()._type = .lineLayer(newValue)}
    }

    var symbolLayer: Com_Tophap_MapboxGl_Proto_Operations.Update.Symbol {
      get {
        if case .symbolLayer(let v)? = _storage._type {return v}
        return Com_Tophap_MapboxGl_Proto_Operations.Update.Symbol()
      }
      set {_uniqueStorage()._type = .symbolLayer(newValue)}
    }

    var hillshadeLayer: Com_Tophap_MapboxGl_Proto_Operations.Update.Hillshade {
      get {
        if case .hillshadeLayer(let v)? = _storage._type {return v}
        return Com_Tophap_MapboxGl_Proto_Operations.Update.Hillshade()
      }
      set {_uniqueStorage()._type = .hillshadeLayer(newValue)}
    }

    var heatmapLayer: Com_Tophap_MapboxGl_Proto_Operations.Update.Heatmap {
      get {
        if case .heatmapLayer(let v)? = _storage._type {return v}
        return Com_Tophap_MapboxGl_Proto_Operations.Update.Heatmap()
      }
      set {_uniqueStorage()._type = .heatmapLayer(newValue)}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_Type: Equatable {
      case backgroundLayer(Com_Tophap_MapboxGl_Proto_Operations.Update.Background)
      case circleLayer(Com_Tophap_MapboxGl_Proto_Operations.Update.Circle)
      case fillLayer(Com_Tophap_MapboxGl_Proto_Operations.Update.Fill)
      case fillExtrusionLayer(Com_Tophap_MapboxGl_Proto_Operations.Update.FillExtrusion)
      case lineLayer(Com_Tophap_MapboxGl_Proto_Operations.Update.Line)
      case symbolLayer(Com_Tophap_MapboxGl_Proto_Operations.Update.Symbol)
      case hillshadeLayer(Com_Tophap_MapboxGl_Proto_Operations.Update.Hillshade)
      case heatmapLayer(Com_Tophap_MapboxGl_Proto_Operations.Update.Heatmap)

    #if !swift(>=4.1)
      static func ==(lhs: Com_Tophap_MapboxGl_Proto_Operations.Update.OneOf_Type, rhs: Com_Tophap_MapboxGl_Proto_Operations.Update.OneOf_Type) -> Bool {
        switch (lhs, rhs) {
        case (.backgroundLayer(let l), .backgroundLayer(let r)): return l == r
        case (.circleLayer(let l), .circleLayer(let r)): return l == r
        case (.fillLayer(let l), .fillLayer(let r)): return l == r
        case (.fillExtrusionLayer(let l), .fillExtrusionLayer(let r)): return l == r
        case (.lineLayer(let l), .lineLayer(let r)): return l == r
        case (.symbolLayer(let l), .symbolLayer(let r)): return l == r
        case (.hillshadeLayer(let l), .hillshadeLayer(let r)): return l == r
        case (.heatmapLayer(let l), .heatmapLayer(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    struct Background {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var visible: SwiftProtobuf.Google_Protobuf_BoolValue {
        get {return _storage._visible ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
        set {_uniqueStorage()._visible = newValue}
      }
      /// Returns true if `visible` has been explicitly set.
      var hasVisible: Bool {return _storage._visible != nil}
      /// Clears the value of `visible`. Subsequent reads from it will return its default value.
      mutating func clearVisible() {_uniqueStorage()._visible = nil}

      var minZoom: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._minZoom ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._minZoom = newValue}
      }
      /// Returns true if `minZoom` has been explicitly set.
      var hasMinZoom: Bool {return _storage._minZoom != nil}
      /// Clears the value of `minZoom`. Subsequent reads from it will return its default value.
      mutating func clearMinZoom() {_uniqueStorage()._minZoom = nil}

      var maxZoom: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._maxZoom ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._maxZoom = newValue}
      }
      /// Returns true if `maxZoom` has been explicitly set.
      var hasMaxZoom: Bool {return _storage._maxZoom != nil}
      /// Clears the value of `maxZoom`. Subsequent reads from it will return its default value.
      mutating func clearMaxZoom() {_uniqueStorage()._maxZoom = nil}

      var color: SwiftProtobuf.Google_Protobuf_Int32Value {
        get {return _storage._color ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
        set {_uniqueStorage()._color = newValue}
      }
      /// Returns true if `color` has been explicitly set.
      var hasColor: Bool {return _storage._color != nil}
      /// Clears the value of `color`. Subsequent reads from it will return its default value.
      mutating func clearColor() {_uniqueStorage()._color = nil}

      var pattern: SwiftProtobuf.Google_Protobuf_StringValue {
        get {return _storage._pattern ?? SwiftProtobuf.Google_Protobuf_StringValue()}
        set {_uniqueStorage()._pattern = newValue}
      }
      /// Returns true if `pattern` has been explicitly set.
      var hasPattern: Bool {return _storage._pattern != nil}
      /// Clears the value of `pattern`. Subsequent reads from it will return its default value.
      mutating func clearPattern() {_uniqueStorage()._pattern = nil}

      var opacity: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._opacity ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._opacity = newValue}
      }
      /// Returns true if `opacity` has been explicitly set.
      var hasOpacity: Bool {return _storage._opacity != nil}
      /// Clears the value of `opacity`. Subsequent reads from it will return its default value.
      mutating func clearOpacity() {_uniqueStorage()._opacity = nil}

      var colorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._colorTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._colorTransition = newValue}
      }
      /// Returns true if `colorTransition` has been explicitly set.
      var hasColorTransition: Bool {return _storage._colorTransition != nil}
      /// Clears the value of `colorTransition`. Subsequent reads from it will return its default value.
      mutating func clearColorTransition() {_uniqueStorage()._colorTransition = nil}

      var patternTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._patternTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._patternTransition = newValue}
      }
      /// Returns true if `patternTransition` has been explicitly set.
      var hasPatternTransition: Bool {return _storage._patternTransition != nil}
      /// Clears the value of `patternTransition`. Subsequent reads from it will return its default value.
      mutating func clearPatternTransition() {_uniqueStorage()._patternTransition = nil}

      var opacityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._opacityTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._opacityTransition = newValue}
      }
      /// Returns true if `opacityTransition` has been explicitly set.
      var hasOpacityTransition: Bool {return _storage._opacityTransition != nil}
      /// Clears the value of `opacityTransition`. Subsequent reads from it will return its default value.
      mutating func clearOpacityTransition() {_uniqueStorage()._opacityTransition = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _storage = _StorageClass.defaultInstance
    }

    struct Circle {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var visible: SwiftProtobuf.Google_Protobuf_BoolValue {
        get {return _storage._visible ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
        set {_uniqueStorage()._visible = newValue}
      }
      /// Returns true if `visible` has been explicitly set.
      var hasVisible: Bool {return _storage._visible != nil}
      /// Clears the value of `visible`. Subsequent reads from it will return its default value.
      mutating func clearVisible() {_uniqueStorage()._visible = nil}

      var minZoom: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._minZoom ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._minZoom = newValue}
      }
      /// Returns true if `minZoom` has been explicitly set.
      var hasMinZoom: Bool {return _storage._minZoom != nil}
      /// Clears the value of `minZoom`. Subsequent reads from it will return its default value.
      mutating func clearMinZoom() {_uniqueStorage()._minZoom = nil}

      var maxZoom: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._maxZoom ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._maxZoom = newValue}
      }
      /// Returns true if `maxZoom` has been explicitly set.
      var hasMaxZoom: Bool {return _storage._maxZoom != nil}
      /// Clears the value of `maxZoom`. Subsequent reads from it will return its default value.
      mutating func clearMaxZoom() {_uniqueStorage()._maxZoom = nil}

      var radius: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._radius ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._radius = newValue}
      }
      /// Returns true if `radius` has been explicitly set.
      var hasRadius: Bool {return _storage._radius != nil}
      /// Clears the value of `radius`. Subsequent reads from it will return its default value.
      mutating func clearRadius() {_uniqueStorage()._radius = nil}

      var color: SwiftProtobuf.Google_Protobuf_Int32Value {
        get {return _storage._color ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
        set {_uniqueStorage()._color = newValue}
      }
      /// Returns true if `color` has been explicitly set.
      var hasColor: Bool {return _storage._color != nil}
      /// Clears the value of `color`. Subsequent reads from it will return its default value.
      mutating func clearColor() {_uniqueStorage()._color = nil}

      var blur: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._blur ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._blur = newValue}
      }
      /// Returns true if `blur` has been explicitly set.
      var hasBlur: Bool {return _storage._blur != nil}
      /// Clears the value of `blur`. Subsequent reads from it will return its default value.
      mutating func clearBlur() {_uniqueStorage()._blur = nil}

      var opacity: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._opacity ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._opacity = newValue}
      }
      /// Returns true if `opacity` has been explicitly set.
      var hasOpacity: Bool {return _storage._opacity != nil}
      /// Clears the value of `opacity`. Subsequent reads from it will return its default value.
      mutating func clearOpacity() {_uniqueStorage()._opacity = nil}

      var translate: [Float] {
        get {return _storage._translate}
        set {_uniqueStorage()._translate = newValue}
      }

      var hasTranslate_p: Bool {
        get {return _storage._hasTranslate_p}
        set {_uniqueStorage()._hasTranslate_p = newValue}
      }

      var translateAnchor: Com_Tophap_MapboxGl_Proto_TranslateAnchor {
        get {return _storage._translateAnchor}
        set {_uniqueStorage()._translateAnchor = newValue}
      }

      var hasTranslateAnchor_p: Bool {
        get {return _storage._hasTranslateAnchor_p}
        set {_uniqueStorage()._hasTranslateAnchor_p = newValue}
      }

      var pitchScale: Com_Tophap_MapboxGl_Proto_TranslateAnchor {
        get {return _storage._pitchScale}
        set {_uniqueStorage()._pitchScale = newValue}
      }

      var hasPitchScale_p: Bool {
        get {return _storage._hasPitchScale_p}
        set {_uniqueStorage()._hasPitchScale_p = newValue}
      }

      var pitchAlignment: Com_Tophap_MapboxGl_Proto_TranslateAnchor {
        get {return _storage._pitchAlignment}
        set {_uniqueStorage()._pitchAlignment = newValue}
      }

      var hasPitchAlignment_p: Bool {
        get {return _storage._hasPitchAlignment_p}
        set {_uniqueStorage()._hasPitchAlignment_p = newValue}
      }

      var strokeWidth: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._strokeWidth ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._strokeWidth = newValue}
      }
      /// Returns true if `strokeWidth` has been explicitly set.
      var hasStrokeWidth: Bool {return _storage._strokeWidth != nil}
      /// Clears the value of `strokeWidth`. Subsequent reads from it will return its default value.
      mutating func clearStrokeWidth() {_uniqueStorage()._strokeWidth = nil}

      var strokeColor: SwiftProtobuf.Google_Protobuf_Int32Value {
        get {return _storage._strokeColor ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
        set {_uniqueStorage()._strokeColor = newValue}
      }
      /// Returns true if `strokeColor` has been explicitly set.
      var hasStrokeColor: Bool {return _storage._strokeColor != nil}
      /// Clears the value of `strokeColor`. Subsequent reads from it will return its default value.
      mutating func clearStrokeColor() {_uniqueStorage()._strokeColor = nil}

      var strokeOpacity: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._strokeOpacity ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._strokeOpacity = newValue}
      }
      /// Returns true if `strokeOpacity` has been explicitly set.
      var hasStrokeOpacity: Bool {return _storage._strokeOpacity != nil}
      /// Clears the value of `strokeOpacity`. Subsequent reads from it will return its default value.
      mutating func clearStrokeOpacity() {_uniqueStorage()._strokeOpacity = nil}

      var radiusTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._radiusTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._radiusTransition = newValue}
      }
      /// Returns true if `radiusTransition` has been explicitly set.
      var hasRadiusTransition: Bool {return _storage._radiusTransition != nil}
      /// Clears the value of `radiusTransition`. Subsequent reads from it will return its default value.
      mutating func clearRadiusTransition() {_uniqueStorage()._radiusTransition = nil}

      var colorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._colorTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._colorTransition = newValue}
      }
      /// Returns true if `colorTransition` has been explicitly set.
      var hasColorTransition: Bool {return _storage._colorTransition != nil}
      /// Clears the value of `colorTransition`. Subsequent reads from it will return its default value.
      mutating func clearColorTransition() {_uniqueStorage()._colorTransition = nil}

      var blurTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._blurTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._blurTransition = newValue}
      }
      /// Returns true if `blurTransition` has been explicitly set.
      var hasBlurTransition: Bool {return _storage._blurTransition != nil}
      /// Clears the value of `blurTransition`. Subsequent reads from it will return its default value.
      mutating func clearBlurTransition() {_uniqueStorage()._blurTransition = nil}

      var opacityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._opacityTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._opacityTransition = newValue}
      }
      /// Returns true if `opacityTransition` has been explicitly set.
      var hasOpacityTransition: Bool {return _storage._opacityTransition != nil}
      /// Clears the value of `opacityTransition`. Subsequent reads from it will return its default value.
      mutating func clearOpacityTransition() {_uniqueStorage()._opacityTransition = nil}

      var translateTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._translateTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._translateTransition = newValue}
      }
      /// Returns true if `translateTransition` has been explicitly set.
      var hasTranslateTransition: Bool {return _storage._translateTransition != nil}
      /// Clears the value of `translateTransition`. Subsequent reads from it will return its default value.
      mutating func clearTranslateTransition() {_uniqueStorage()._translateTransition = nil}

      var strokeWidthTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._strokeWidthTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._strokeWidthTransition = newValue}
      }
      /// Returns true if `strokeWidthTransition` has been explicitly set.
      var hasStrokeWidthTransition: Bool {return _storage._strokeWidthTransition != nil}
      /// Clears the value of `strokeWidthTransition`. Subsequent reads from it will return its default value.
      mutating func clearStrokeWidthTransition() {_uniqueStorage()._strokeWidthTransition = nil}

      var strokeColorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._strokeColorTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._strokeColorTransition = newValue}
      }
      /// Returns true if `strokeColorTransition` has been explicitly set.
      var hasStrokeColorTransition: Bool {return _storage._strokeColorTransition != nil}
      /// Clears the value of `strokeColorTransition`. Subsequent reads from it will return its default value.
      mutating func clearStrokeColorTransition() {_uniqueStorage()._strokeColorTransition = nil}

      var strokeOpacityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._strokeOpacityTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._strokeOpacityTransition = newValue}
      }
      /// Returns true if `strokeOpacityTransition` has been explicitly set.
      var hasStrokeOpacityTransition: Bool {return _storage._strokeOpacityTransition != nil}
      /// Clears the value of `strokeOpacityTransition`. Subsequent reads from it will return its default value.
      mutating func clearStrokeOpacityTransition() {_uniqueStorage()._strokeOpacityTransition = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _storage = _StorageClass.defaultInstance
    }

    struct FillExtrusion {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var visible: SwiftProtobuf.Google_Protobuf_BoolValue {
        get {return _storage._visible ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
        set {_uniqueStorage()._visible = newValue}
      }
      /// Returns true if `visible` has been explicitly set.
      var hasVisible: Bool {return _storage._visible != nil}
      /// Clears the value of `visible`. Subsequent reads from it will return its default value.
      mutating func clearVisible() {_uniqueStorage()._visible = nil}

      var minZoom: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._minZoom ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._minZoom = newValue}
      }
      /// Returns true if `minZoom` has been explicitly set.
      var hasMinZoom: Bool {return _storage._minZoom != nil}
      /// Clears the value of `minZoom`. Subsequent reads from it will return its default value.
      mutating func clearMinZoom() {_uniqueStorage()._minZoom = nil}

      var maxZoom: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._maxZoom ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._maxZoom = newValue}
      }
      /// Returns true if `maxZoom` has been explicitly set.
      var hasMaxZoom: Bool {return _storage._maxZoom != nil}
      /// Clears the value of `maxZoom`. Subsequent reads from it will return its default value.
      mutating func clearMaxZoom() {_uniqueStorage()._maxZoom = nil}

      var opacity: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._opacity ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._opacity = newValue}
      }
      /// Returns true if `opacity` has been explicitly set.
      var hasOpacity: Bool {return _storage._opacity != nil}
      /// Clears the value of `opacity`. Subsequent reads from it will return its default value.
      mutating func clearOpacity() {_uniqueStorage()._opacity = nil}

      var color: SwiftProtobuf.Google_Protobuf_Int32Value {
        get {return _storage._color ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
        set {_uniqueStorage()._color = newValue}
      }
      /// Returns true if `color` has been explicitly set.
      var hasColor: Bool {return _storage._color != nil}
      /// Clears the value of `color`. Subsequent reads from it will return its default value.
      mutating func clearColor() {_uniqueStorage()._color = nil}

      var translate: [Float] {
        get {return _storage._translate}
        set {_uniqueStorage()._translate = newValue}
      }

      var hasTranslate_p: Bool {
        get {return _storage._hasTranslate_p}
        set {_uniqueStorage()._hasTranslate_p = newValue}
      }

      var translateAnchor: Com_Tophap_MapboxGl_Proto_TranslateAnchor {
        get {return _storage._translateAnchor}
        set {_uniqueStorage()._translateAnchor = newValue}
      }

      var hasTranslateAnchor_p: Bool {
        get {return _storage._hasTranslateAnchor_p}
        set {_uniqueStorage()._hasTranslateAnchor_p = newValue}
      }

      var pattern: SwiftProtobuf.Google_Protobuf_StringValue {
        get {return _storage._pattern ?? SwiftProtobuf.Google_Protobuf_StringValue()}
        set {_uniqueStorage()._pattern = newValue}
      }
      /// Returns true if `pattern` has been explicitly set.
      var hasPattern: Bool {return _storage._pattern != nil}
      /// Clears the value of `pattern`. Subsequent reads from it will return its default value.
      mutating func clearPattern() {_uniqueStorage()._pattern = nil}

      var height: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._height ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._height = newValue}
      }
      /// Returns true if `height` has been explicitly set.
      var hasHeight: Bool {return _storage._height != nil}
      /// Clears the value of `height`. Subsequent reads from it will return its default value.
      mutating func clearHeight() {_uniqueStorage()._height = nil}

      var base: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._base ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._base = newValue}
      }
      /// Returns true if `base` has been explicitly set.
      var hasBase: Bool {return _storage._base != nil}
      /// Clears the value of `base`. Subsequent reads from it will return its default value.
      mutating func clearBase() {_uniqueStorage()._base = nil}

      var verticalGradient: SwiftProtobuf.Google_Protobuf_BoolValue {
        get {return _storage._verticalGradient ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
        set {_uniqueStorage()._verticalGradient = newValue}
      }
      /// Returns true if `verticalGradient` has been explicitly set.
      var hasVerticalGradient: Bool {return _storage._verticalGradient != nil}
      /// Clears the value of `verticalGradient`. Subsequent reads from it will return its default value.
      mutating func clearVerticalGradient() {_uniqueStorage()._verticalGradient = nil}

      var opacityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._opacityTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._opacityTransition = newValue}
      }
      /// Returns true if `opacityTransition` has been explicitly set.
      var hasOpacityTransition: Bool {return _storage._opacityTransition != nil}
      /// Clears the value of `opacityTransition`. Subsequent reads from it will return its default value.
      mutating func clearOpacityTransition() {_uniqueStorage()._opacityTransition = nil}

      var colorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._colorTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._colorTransition = newValue}
      }
      /// Returns true if `colorTransition` has been explicitly set.
      var hasColorTransition: Bool {return _storage._colorTransition != nil}
      /// Clears the value of `colorTransition`. Subsequent reads from it will return its default value.
      mutating func clearColorTransition() {_uniqueStorage()._colorTransition = nil}

      var translateTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._translateTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._translateTransition = newValue}
      }
      /// Returns true if `translateTransition` has been explicitly set.
      var hasTranslateTransition: Bool {return _storage._translateTransition != nil}
      /// Clears the value of `translateTransition`. Subsequent reads from it will return its default value.
      mutating func clearTranslateTransition() {_uniqueStorage()._translateTransition = nil}

      var patternTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._patternTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._patternTransition = newValue}
      }
      /// Returns true if `patternTransition` has been explicitly set.
      var hasPatternTransition: Bool {return _storage._patternTransition != nil}
      /// Clears the value of `patternTransition`. Subsequent reads from it will return its default value.
      mutating func clearPatternTransition() {_uniqueStorage()._patternTransition = nil}

      var heightTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._heightTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._heightTransition = newValue}
      }
      /// Returns true if `heightTransition` has been explicitly set.
      var hasHeightTransition: Bool {return _storage._heightTransition != nil}
      /// Clears the value of `heightTransition`. Subsequent reads from it will return its default value.
      mutating func clearHeightTransition() {_uniqueStorage()._heightTransition = nil}

      var baseTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._baseTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._baseTransition = newValue}
      }
      /// Returns true if `baseTransition` has been explicitly set.
      var hasBaseTransition: Bool {return _storage._baseTransition != nil}
      /// Clears the value of `baseTransition`. Subsequent reads from it will return its default value.
      mutating func clearBaseTransition() {_uniqueStorage()._baseTransition = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _storage = _StorageClass.defaultInstance
    }

    struct Fill {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var visible: SwiftProtobuf.Google_Protobuf_BoolValue {
        get {return _storage._visible ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
        set {_uniqueStorage()._visible = newValue}
      }
      /// Returns true if `visible` has been explicitly set.
      var hasVisible: Bool {return _storage._visible != nil}
      /// Clears the value of `visible`. Subsequent reads from it will return its default value.
      mutating func clearVisible() {_uniqueStorage()._visible = nil}

      var minZoom: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._minZoom ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._minZoom = newValue}
      }
      /// Returns true if `minZoom` has been explicitly set.
      var hasMinZoom: Bool {return _storage._minZoom != nil}
      /// Clears the value of `minZoom`. Subsequent reads from it will return its default value.
      mutating func clearMinZoom() {_uniqueStorage()._minZoom = nil}

      var maxZoom: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._maxZoom ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._maxZoom = newValue}
      }
      /// Returns true if `maxZoom` has been explicitly set.
      var hasMaxZoom: Bool {return _storage._maxZoom != nil}
      /// Clears the value of `maxZoom`. Subsequent reads from it will return its default value.
      mutating func clearMaxZoom() {_uniqueStorage()._maxZoom = nil}

      var antialias: SwiftProtobuf.Google_Protobuf_BoolValue {
        get {return _storage._antialias ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
        set {_uniqueStorage()._antialias = newValue}
      }
      /// Returns true if `antialias` has been explicitly set.
      var hasAntialias: Bool {return _storage._antialias != nil}
      /// Clears the value of `antialias`. Subsequent reads from it will return its default value.
      mutating func clearAntialias() {_uniqueStorage()._antialias = nil}

      var opacity: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._opacity ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._opacity = newValue}
      }
      /// Returns true if `opacity` has been explicitly set.
      var hasOpacity: Bool {return _storage._opacity != nil}
      /// Clears the value of `opacity`. Subsequent reads from it will return its default value.
      mutating func clearOpacity() {_uniqueStorage()._opacity = nil}

      var color: SwiftProtobuf.Google_Protobuf_Int32Value {
        get {return _storage._color ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
        set {_uniqueStorage()._color = newValue}
      }
      /// Returns true if `color` has been explicitly set.
      var hasColor: Bool {return _storage._color != nil}
      /// Clears the value of `color`. Subsequent reads from it will return its default value.
      mutating func clearColor() {_uniqueStorage()._color = nil}

      var outlineColor: SwiftProtobuf.Google_Protobuf_Int32Value {
        get {return _storage._outlineColor ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
        set {_uniqueStorage()._outlineColor = newValue}
      }
      /// Returns true if `outlineColor` has been explicitly set.
      var hasOutlineColor: Bool {return _storage._outlineColor != nil}
      /// Clears the value of `outlineColor`. Subsequent reads from it will return its default value.
      mutating func clearOutlineColor() {_uniqueStorage()._outlineColor = nil}

      var translate: [Float] {
        get {return _storage._translate}
        set {_uniqueStorage()._translate = newValue}
      }

      var hasTranslate_p: Bool {
        get {return _storage._hasTranslate_p}
        set {_uniqueStorage()._hasTranslate_p = newValue}
      }

      var translateAnchor: Com_Tophap_MapboxGl_Proto_TranslateAnchor {
        get {return _storage._translateAnchor}
        set {_uniqueStorage()._translateAnchor = newValue}
      }

      var hasTranslateAnchor_p: Bool {
        get {return _storage._hasTranslateAnchor_p}
        set {_uniqueStorage()._hasTranslateAnchor_p = newValue}
      }

      var pattern: SwiftProtobuf.Google_Protobuf_StringValue {
        get {return _storage._pattern ?? SwiftProtobuf.Google_Protobuf_StringValue()}
        set {_uniqueStorage()._pattern = newValue}
      }
      /// Returns true if `pattern` has been explicitly set.
      var hasPattern: Bool {return _storage._pattern != nil}
      /// Clears the value of `pattern`. Subsequent reads from it will return its default value.
      mutating func clearPattern() {_uniqueStorage()._pattern = nil}

      var opacityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._opacityTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._opacityTransition = newValue}
      }
      /// Returns true if `opacityTransition` has been explicitly set.
      var hasOpacityTransition: Bool {return _storage._opacityTransition != nil}
      /// Clears the value of `opacityTransition`. Subsequent reads from it will return its default value.
      mutating func clearOpacityTransition() {_uniqueStorage()._opacityTransition = nil}

      var colorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._colorTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._colorTransition = newValue}
      }
      /// Returns true if `colorTransition` has been explicitly set.
      var hasColorTransition: Bool {return _storage._colorTransition != nil}
      /// Clears the value of `colorTransition`. Subsequent reads from it will return its default value.
      mutating func clearColorTransition() {_uniqueStorage()._colorTransition = nil}

      var outlineColorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._outlineColorTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._outlineColorTransition = newValue}
      }
      /// Returns true if `outlineColorTransition` has been explicitly set.
      var hasOutlineColorTransition: Bool {return _storage._outlineColorTransition != nil}
      /// Clears the value of `outlineColorTransition`. Subsequent reads from it will return its default value.
      mutating func clearOutlineColorTransition() {_uniqueStorage()._outlineColorTransition = nil}

      var translateTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._translateTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._translateTransition = newValue}
      }
      /// Returns true if `translateTransition` has been explicitly set.
      var hasTranslateTransition: Bool {return _storage._translateTransition != nil}
      /// Clears the value of `translateTransition`. Subsequent reads from it will return its default value.
      mutating func clearTranslateTransition() {_uniqueStorage()._translateTransition = nil}

      var patternTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._patternTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._patternTransition = newValue}
      }
      /// Returns true if `patternTransition` has been explicitly set.
      var hasPatternTransition: Bool {return _storage._patternTransition != nil}
      /// Clears the value of `patternTransition`. Subsequent reads from it will return its default value.
      mutating func clearPatternTransition() {_uniqueStorage()._patternTransition = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _storage = _StorageClass.defaultInstance
    }

    struct Heatmap {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var visible: SwiftProtobuf.Google_Protobuf_BoolValue {
        get {return _storage._visible ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
        set {_uniqueStorage()._visible = newValue}
      }
      /// Returns true if `visible` has been explicitly set.
      var hasVisible: Bool {return _storage._visible != nil}
      /// Clears the value of `visible`. Subsequent reads from it will return its default value.
      mutating func clearVisible() {_uniqueStorage()._visible = nil}

      var minZoom: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._minZoom ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._minZoom = newValue}
      }
      /// Returns true if `minZoom` has been explicitly set.
      var hasMinZoom: Bool {return _storage._minZoom != nil}
      /// Clears the value of `minZoom`. Subsequent reads from it will return its default value.
      mutating func clearMinZoom() {_uniqueStorage()._minZoom = nil}

      var maxZoom: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._maxZoom ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._maxZoom = newValue}
      }
      /// Returns true if `maxZoom` has been explicitly set.
      var hasMaxZoom: Bool {return _storage._maxZoom != nil}
      /// Clears the value of `maxZoom`. Subsequent reads from it will return its default value.
      mutating func clearMaxZoom() {_uniqueStorage()._maxZoom = nil}

      var radius: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._radius ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._radius = newValue}
      }
      /// Returns true if `radius` has been explicitly set.
      var hasRadius: Bool {return _storage._radius != nil}
      /// Clears the value of `radius`. Subsequent reads from it will return its default value.
      mutating func clearRadius() {_uniqueStorage()._radius = nil}

      var weight: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._weight ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._weight = newValue}
      }
      /// Returns true if `weight` has been explicitly set.
      var hasWeight: Bool {return _storage._weight != nil}
      /// Clears the value of `weight`. Subsequent reads from it will return its default value.
      mutating func clearWeight() {_uniqueStorage()._weight = nil}

      var intensity: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._intensity ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._intensity = newValue}
      }
      /// Returns true if `intensity` has been explicitly set.
      var hasIntensity: Bool {return _storage._intensity != nil}
      /// Clears the value of `intensity`. Subsequent reads from it will return its default value.
      mutating func clearIntensity() {_uniqueStorage()._intensity = nil}

      var color: SwiftProtobuf.Google_Protobuf_Int32Value {
        get {return _storage._color ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
        set {_uniqueStorage()._color = newValue}
      }
      /// Returns true if `color` has been explicitly set.
      var hasColor: Bool {return _storage._color != nil}
      /// Clears the value of `color`. Subsequent reads from it will return its default value.
      mutating func clearColor() {_uniqueStorage()._color = nil}

      var opacity: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._opacity ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._opacity = newValue}
      }
      /// Returns true if `opacity` has been explicitly set.
      var hasOpacity: Bool {return _storage._opacity != nil}
      /// Clears the value of `opacity`. Subsequent reads from it will return its default value.
      mutating func clearOpacity() {_uniqueStorage()._opacity = nil}

      var radiusTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._radiusTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._radiusTransition = newValue}
      }
      /// Returns true if `radiusTransition` has been explicitly set.
      var hasRadiusTransition: Bool {return _storage._radiusTransition != nil}
      /// Clears the value of `radiusTransition`. Subsequent reads from it will return its default value.
      mutating func clearRadiusTransition() {_uniqueStorage()._radiusTransition = nil}

      var intensityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._intensityTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._intensityTransition = newValue}
      }
      /// Returns true if `intensityTransition` has been explicitly set.
      var hasIntensityTransition: Bool {return _storage._intensityTransition != nil}
      /// Clears the value of `intensityTransition`. Subsequent reads from it will return its default value.
      mutating func clearIntensityTransition() {_uniqueStorage()._intensityTransition = nil}

      var opacityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._opacityTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._opacityTransition = newValue}
      }
      /// Returns true if `opacityTransition` has been explicitly set.
      var hasOpacityTransition: Bool {return _storage._opacityTransition != nil}
      /// Clears the value of `opacityTransition`. Subsequent reads from it will return its default value.
      mutating func clearOpacityTransition() {_uniqueStorage()._opacityTransition = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _storage = _StorageClass.defaultInstance
    }

    struct Hillshade {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var visible: SwiftProtobuf.Google_Protobuf_BoolValue {
        get {return _storage._visible ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
        set {_uniqueStorage()._visible = newValue}
      }
      /// Returns true if `visible` has been explicitly set.
      var hasVisible: Bool {return _storage._visible != nil}
      /// Clears the value of `visible`. Subsequent reads from it will return its default value.
      mutating func clearVisible() {_uniqueStorage()._visible = nil}

      var minZoom: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._minZoom ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._minZoom = newValue}
      }
      /// Returns true if `minZoom` has been explicitly set.
      var hasMinZoom: Bool {return _storage._minZoom != nil}
      /// Clears the value of `minZoom`. Subsequent reads from it will return its default value.
      mutating func clearMinZoom() {_uniqueStorage()._minZoom = nil}

      var maxZoom: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._maxZoom ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._maxZoom = newValue}
      }
      /// Returns true if `maxZoom` has been explicitly set.
      var hasMaxZoom: Bool {return _storage._maxZoom != nil}
      /// Clears the value of `maxZoom`. Subsequent reads from it will return its default value.
      mutating func clearMaxZoom() {_uniqueStorage()._maxZoom = nil}

      var illuminationDirection: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._illuminationDirection ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._illuminationDirection = newValue}
      }
      /// Returns true if `illuminationDirection` has been explicitly set.
      var hasIlluminationDirection: Bool {return _storage._illuminationDirection != nil}
      /// Clears the value of `illuminationDirection`. Subsequent reads from it will return its default value.
      mutating func clearIlluminationDirection() {_uniqueStorage()._illuminationDirection = nil}

      var illuminationAnchor: Com_Tophap_MapboxGl_Proto_TranslateAnchor {
        get {return _storage._illuminationAnchor}
        set {_uniqueStorage()._illuminationAnchor = newValue}
      }

      var hasIlluminationAnchor_p: Bool {
        get {return _storage._hasIlluminationAnchor_p}
        set {_uniqueStorage()._hasIlluminationAnchor_p = newValue}
      }

      var exaggeration: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._exaggeration ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._exaggeration = newValue}
      }
      /// Returns true if `exaggeration` has been explicitly set.
      var hasExaggeration: Bool {return _storage._exaggeration != nil}
      /// Clears the value of `exaggeration`. Subsequent reads from it will return its default value.
      mutating func clearExaggeration() {_uniqueStorage()._exaggeration = nil}

      var shadowColor: SwiftProtobuf.Google_Protobuf_Int32Value {
        get {return _storage._shadowColor ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
        set {_uniqueStorage()._shadowColor = newValue}
      }
      /// Returns true if `shadowColor` has been explicitly set.
      var hasShadowColor: Bool {return _storage._shadowColor != nil}
      /// Clears the value of `shadowColor`. Subsequent reads from it will return its default value.
      mutating func clearShadowColor() {_uniqueStorage()._shadowColor = nil}

      var highlightColor: SwiftProtobuf.Google_Protobuf_Int32Value {
        get {return _storage._highlightColor ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
        set {_uniqueStorage()._highlightColor = newValue}
      }
      /// Returns true if `highlightColor` has been explicitly set.
      var hasHighlightColor: Bool {return _storage._highlightColor != nil}
      /// Clears the value of `highlightColor`. Subsequent reads from it will return its default value.
      mutating func clearHighlightColor() {_uniqueStorage()._highlightColor = nil}

      var accentColor: SwiftProtobuf.Google_Protobuf_Int32Value {
        get {return _storage._accentColor ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
        set {_uniqueStorage()._accentColor = newValue}
      }
      /// Returns true if `accentColor` has been explicitly set.
      var hasAccentColor: Bool {return _storage._accentColor != nil}
      /// Clears the value of `accentColor`. Subsequent reads from it will return its default value.
      mutating func clearAccentColor() {_uniqueStorage()._accentColor = nil}

      var exaggerationTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._exaggerationTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._exaggerationTransition = newValue}
      }
      /// Returns true if `exaggerationTransition` has been explicitly set.
      var hasExaggerationTransition: Bool {return _storage._exaggerationTransition != nil}
      /// Clears the value of `exaggerationTransition`. Subsequent reads from it will return its default value.
      mutating func clearExaggerationTransition() {_uniqueStorage()._exaggerationTransition = nil}

      var shadowColorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._shadowColorTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._shadowColorTransition = newValue}
      }
      /// Returns true if `shadowColorTransition` has been explicitly set.
      var hasShadowColorTransition: Bool {return _storage._shadowColorTransition != nil}
      /// Clears the value of `shadowColorTransition`. Subsequent reads from it will return its default value.
      mutating func clearShadowColorTransition() {_uniqueStorage()._shadowColorTransition = nil}

      var highlightColorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._highlightColorTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._highlightColorTransition = newValue}
      }
      /// Returns true if `highlightColorTransition` has been explicitly set.
      var hasHighlightColorTransition: Bool {return _storage._highlightColorTransition != nil}
      /// Clears the value of `highlightColorTransition`. Subsequent reads from it will return its default value.
      mutating func clearHighlightColorTransition() {_uniqueStorage()._highlightColorTransition = nil}

      var accentColorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._accentColorTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._accentColorTransition = newValue}
      }
      /// Returns true if `accentColorTransition` has been explicitly set.
      var hasAccentColorTransition: Bool {return _storage._accentColorTransition != nil}
      /// Clears the value of `accentColorTransition`. Subsequent reads from it will return its default value.
      mutating func clearAccentColorTransition() {_uniqueStorage()._accentColorTransition = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _storage = _StorageClass.defaultInstance
    }

    struct Line {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var visible: SwiftProtobuf.Google_Protobuf_BoolValue {
        get {return _storage._visible ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
        set {_uniqueStorage()._visible = newValue}
      }
      /// Returns true if `visible` has been explicitly set.
      var hasVisible: Bool {return _storage._visible != nil}
      /// Clears the value of `visible`. Subsequent reads from it will return its default value.
      mutating func clearVisible() {_uniqueStorage()._visible = nil}

      var minZoom: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._minZoom ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._minZoom = newValue}
      }
      /// Returns true if `minZoom` has been explicitly set.
      var hasMinZoom: Bool {return _storage._minZoom != nil}
      /// Clears the value of `minZoom`. Subsequent reads from it will return its default value.
      mutating func clearMinZoom() {_uniqueStorage()._minZoom = nil}

      var maxZoom: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._maxZoom ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._maxZoom = newValue}
      }
      /// Returns true if `maxZoom` has been explicitly set.
      var hasMaxZoom: Bool {return _storage._maxZoom != nil}
      /// Clears the value of `maxZoom`. Subsequent reads from it will return its default value.
      mutating func clearMaxZoom() {_uniqueStorage()._maxZoom = nil}

      var cap: Com_Tophap_MapboxGl_Proto_Layer.Line.Cap {
        get {return _storage._cap}
        set {_uniqueStorage()._cap = newValue}
      }

      var hasCap_p: Bool {
        get {return _storage._hasCap_p}
        set {_uniqueStorage()._hasCap_p = newValue}
      }

      var join: Com_Tophap_MapboxGl_Proto_Layer.Line.Join {
        get {return _storage._join}
        set {_uniqueStorage()._join = newValue}
      }

      var hasJoin_p: Bool {
        get {return _storage._hasJoin_p}
        set {_uniqueStorage()._hasJoin_p = newValue}
      }

      var miterLimit: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._miterLimit ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._miterLimit = newValue}
      }
      /// Returns true if `miterLimit` has been explicitly set.
      var hasMiterLimit: Bool {return _storage._miterLimit != nil}
      /// Clears the value of `miterLimit`. Subsequent reads from it will return its default value.
      mutating func clearMiterLimit() {_uniqueStorage()._miterLimit = nil}

      var roundLimit: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._roundLimit ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._roundLimit = newValue}
      }
      /// Returns true if `roundLimit` has been explicitly set.
      var hasRoundLimit: Bool {return _storage._roundLimit != nil}
      /// Clears the value of `roundLimit`. Subsequent reads from it will return its default value.
      mutating func clearRoundLimit() {_uniqueStorage()._roundLimit = nil}

      var opacity: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._opacity ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._opacity = newValue}
      }
      /// Returns true if `opacity` has been explicitly set.
      var hasOpacity: Bool {return _storage._opacity != nil}
      /// Clears the value of `opacity`. Subsequent reads from it will return its default value.
      mutating func clearOpacity() {_uniqueStorage()._opacity = nil}

      var color: SwiftProtobuf.Google_Protobuf_Int32Value {
        get {return _storage._color ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
        set {_uniqueStorage()._color = newValue}
      }
      /// Returns true if `color` has been explicitly set.
      var hasColor: Bool {return _storage._color != nil}
      /// Clears the value of `color`. Subsequent reads from it will return its default value.
      mutating func clearColor() {_uniqueStorage()._color = nil}

      var translate: [Float] {
        get {return _storage._translate}
        set {_uniqueStorage()._translate = newValue}
      }

      var hasTranslate_p: Bool {
        get {return _storage._hasTranslate_p}
        set {_uniqueStorage()._hasTranslate_p = newValue}
      }

      var translateAnchor: Com_Tophap_MapboxGl_Proto_TranslateAnchor {
        get {return _storage._translateAnchor}
        set {_uniqueStorage()._translateAnchor = newValue}
      }

      var hasTranslateAnchor_p: Bool {
        get {return _storage._hasTranslateAnchor_p}
        set {_uniqueStorage()._hasTranslateAnchor_p = newValue}
      }

      var width: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._width ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._width = newValue}
      }
      /// Returns true if `width` has been explicitly set.
      var hasWidth: Bool {return _storage._width != nil}
      /// Clears the value of `width`. Subsequent reads from it will return its default value.
      mutating func clearWidth() {_uniqueStorage()._width = nil}

      var gapWidth: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._gapWidth ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._gapWidth = newValue}
      }
      /// Returns true if `gapWidth` has been explicitly set.
      var hasGapWidth: Bool {return _storage._gapWidth != nil}
      /// Clears the value of `gapWidth`. Subsequent reads from it will return its default value.
      mutating func clearGapWidth() {_uniqueStorage()._gapWidth = nil}

      var offset: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._offset ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._offset = newValue}
      }
      /// Returns true if `offset` has been explicitly set.
      var hasOffset: Bool {return _storage._offset != nil}
      /// Clears the value of `offset`. Subsequent reads from it will return its default value.
      mutating func clearOffset() {_uniqueStorage()._offset = nil}

      var blur: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._blur ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._blur = newValue}
      }
      /// Returns true if `blur` has been explicitly set.
      var hasBlur: Bool {return _storage._blur != nil}
      /// Clears the value of `blur`. Subsequent reads from it will return its default value.
      mutating func clearBlur() {_uniqueStorage()._blur = nil}

      var dasharray: [Float] {
        get {return _storage._dasharray}
        set {_uniqueStorage()._dasharray = newValue}
      }

      var hasDasharray_p: Bool {
        get {return _storage._hasDasharray_p}
        set {_uniqueStorage()._hasDasharray_p = newValue}
      }

      var pattern: SwiftProtobuf.Google_Protobuf_StringValue {
        get {return _storage._pattern ?? SwiftProtobuf.Google_Protobuf_StringValue()}
        set {_uniqueStorage()._pattern = newValue}
      }
      /// Returns true if `pattern` has been explicitly set.
      var hasPattern: Bool {return _storage._pattern != nil}
      /// Clears the value of `pattern`. Subsequent reads from it will return its default value.
      mutating func clearPattern() {_uniqueStorage()._pattern = nil}

      var gradient: SwiftProtobuf.Google_Protobuf_Int32Value {
        get {return _storage._gradient ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
        set {_uniqueStorage()._gradient = newValue}
      }
      /// Returns true if `gradient` has been explicitly set.
      var hasGradient: Bool {return _storage._gradient != nil}
      /// Clears the value of `gradient`. Subsequent reads from it will return its default value.
      mutating func clearGradient() {_uniqueStorage()._gradient = nil}

      var opacityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._opacityTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._opacityTransition = newValue}
      }
      /// Returns true if `opacityTransition` has been explicitly set.
      var hasOpacityTransition: Bool {return _storage._opacityTransition != nil}
      /// Clears the value of `opacityTransition`. Subsequent reads from it will return its default value.
      mutating func clearOpacityTransition() {_uniqueStorage()._opacityTransition = nil}

      var colorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._colorTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._colorTransition = newValue}
      }
      /// Returns true if `colorTransition` has been explicitly set.
      var hasColorTransition: Bool {return _storage._colorTransition != nil}
      /// Clears the value of `colorTransition`. Subsequent reads from it will return its default value.
      mutating func clearColorTransition() {_uniqueStorage()._colorTransition = nil}

      var translateTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._translateTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._translateTransition = newValue}
      }
      /// Returns true if `translateTransition` has been explicitly set.
      var hasTranslateTransition: Bool {return _storage._translateTransition != nil}
      /// Clears the value of `translateTransition`. Subsequent reads from it will return its default value.
      mutating func clearTranslateTransition() {_uniqueStorage()._translateTransition = nil}

      var widthTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._widthTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._widthTransition = newValue}
      }
      /// Returns true if `widthTransition` has been explicitly set.
      var hasWidthTransition: Bool {return _storage._widthTransition != nil}
      /// Clears the value of `widthTransition`. Subsequent reads from it will return its default value.
      mutating func clearWidthTransition() {_uniqueStorage()._widthTransition = nil}

      var gapWidthTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._gapWidthTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._gapWidthTransition = newValue}
      }
      /// Returns true if `gapWidthTransition` has been explicitly set.
      var hasGapWidthTransition: Bool {return _storage._gapWidthTransition != nil}
      /// Clears the value of `gapWidthTransition`. Subsequent reads from it will return its default value.
      mutating func clearGapWidthTransition() {_uniqueStorage()._gapWidthTransition = nil}

      var offsetTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._offsetTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._offsetTransition = newValue}
      }
      /// Returns true if `offsetTransition` has been explicitly set.
      var hasOffsetTransition: Bool {return _storage._offsetTransition != nil}
      /// Clears the value of `offsetTransition`. Subsequent reads from it will return its default value.
      mutating func clearOffsetTransition() {_uniqueStorage()._offsetTransition = nil}

      var blurTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._blurTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._blurTransition = newValue}
      }
      /// Returns true if `blurTransition` has been explicitly set.
      var hasBlurTransition: Bool {return _storage._blurTransition != nil}
      /// Clears the value of `blurTransition`. Subsequent reads from it will return its default value.
      mutating func clearBlurTransition() {_uniqueStorage()._blurTransition = nil}

      var dasharrayTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._dasharrayTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._dasharrayTransition = newValue}
      }
      /// Returns true if `dasharrayTransition` has been explicitly set.
      var hasDasharrayTransition: Bool {return _storage._dasharrayTransition != nil}
      /// Clears the value of `dasharrayTransition`. Subsequent reads from it will return its default value.
      mutating func clearDasharrayTransition() {_uniqueStorage()._dasharrayTransition = nil}

      var patternTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._patternTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._patternTransition = newValue}
      }
      /// Returns true if `patternTransition` has been explicitly set.
      var hasPatternTransition: Bool {return _storage._patternTransition != nil}
      /// Clears the value of `patternTransition`. Subsequent reads from it will return its default value.
      mutating func clearPatternTransition() {_uniqueStorage()._patternTransition = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _storage = _StorageClass.defaultInstance
    }

    struct Symbol {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var visible: SwiftProtobuf.Google_Protobuf_BoolValue {
        get {return _storage._visible ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
        set {_uniqueStorage()._visible = newValue}
      }
      /// Returns true if `visible` has been explicitly set.
      var hasVisible: Bool {return _storage._visible != nil}
      /// Clears the value of `visible`. Subsequent reads from it will return its default value.
      mutating func clearVisible() {_uniqueStorage()._visible = nil}

      var minZoom: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._minZoom ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._minZoom = newValue}
      }
      /// Returns true if `minZoom` has been explicitly set.
      var hasMinZoom: Bool {return _storage._minZoom != nil}
      /// Clears the value of `minZoom`. Subsequent reads from it will return its default value.
      mutating func clearMinZoom() {_uniqueStorage()._minZoom = nil}

      var maxZoom: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._maxZoom ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._maxZoom = newValue}
      }
      /// Returns true if `maxZoom` has been explicitly set.
      var hasMaxZoom: Bool {return _storage._maxZoom != nil}
      /// Clears the value of `maxZoom`. Subsequent reads from it will return its default value.
      mutating func clearMaxZoom() {_uniqueStorage()._maxZoom = nil}

      var symbolPlacement: Com_Tophap_MapboxGl_Proto_Layer.Symbol.Placement {
        get {return _storage._symbolPlacement}
        set {_uniqueStorage()._symbolPlacement = newValue}
      }

      var hasSymbolPlacement_p: Bool {
        get {return _storage._hasSymbolPlacement_p}
        set {_uniqueStorage()._hasSymbolPlacement_p = newValue}
      }

      var symbolSpacing: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._symbolSpacing ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._symbolSpacing = newValue}
      }
      /// Returns true if `symbolSpacing` has been explicitly set.
      var hasSymbolSpacing: Bool {return _storage._symbolSpacing != nil}
      /// Clears the value of `symbolSpacing`. Subsequent reads from it will return its default value.
      mutating func clearSymbolSpacing() {_uniqueStorage()._symbolSpacing = nil}

      var symbolAvoidEdges: SwiftProtobuf.Google_Protobuf_BoolValue {
        get {return _storage._symbolAvoidEdges ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
        set {_uniqueStorage()._symbolAvoidEdges = newValue}
      }
      /// Returns true if `symbolAvoidEdges` has been explicitly set.
      var hasSymbolAvoidEdges: Bool {return _storage._symbolAvoidEdges != nil}
      /// Clears the value of `symbolAvoidEdges`. Subsequent reads from it will return its default value.
      mutating func clearSymbolAvoidEdges() {_uniqueStorage()._symbolAvoidEdges = nil}

      var symbolZOrder: Com_Tophap_MapboxGl_Proto_Layer.Symbol.ZOrder {
        get {return _storage._symbolZOrder}
        set {_uniqueStorage()._symbolZOrder = newValue}
      }

      var hasSymbolZOrder_p: Bool {
        get {return _storage._hasSymbolZOrder_p}
        set {_uniqueStorage()._hasSymbolZOrder_p = newValue}
      }

      var iconAllowOverlap: SwiftProtobuf.Google_Protobuf_BoolValue {
        get {return _storage._iconAllowOverlap ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
        set {_uniqueStorage()._iconAllowOverlap = newValue}
      }
      /// Returns true if `iconAllowOverlap` has been explicitly set.
      var hasIconAllowOverlap: Bool {return _storage._iconAllowOverlap != nil}
      /// Clears the value of `iconAllowOverlap`. Subsequent reads from it will return its default value.
      mutating func clearIconAllowOverlap() {_uniqueStorage()._iconAllowOverlap = nil}

      var iconIgnorePlacement: SwiftProtobuf.Google_Protobuf_BoolValue {
        get {return _storage._iconIgnorePlacement ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
        set {_uniqueStorage()._iconIgnorePlacement = newValue}
      }
      /// Returns true if `iconIgnorePlacement` has been explicitly set.
      var hasIconIgnorePlacement: Bool {return _storage._iconIgnorePlacement != nil}
      /// Clears the value of `iconIgnorePlacement`. Subsequent reads from it will return its default value.
      mutating func clearIconIgnorePlacement() {_uniqueStorage()._iconIgnorePlacement = nil}

      var iconOptional: SwiftProtobuf.Google_Protobuf_BoolValue {
        get {return _storage._iconOptional ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
        set {_uniqueStorage()._iconOptional = newValue}
      }
      /// Returns true if `iconOptional` has been explicitly set.
      var hasIconOptional: Bool {return _storage._iconOptional != nil}
      /// Clears the value of `iconOptional`. Subsequent reads from it will return its default value.
      mutating func clearIconOptional() {_uniqueStorage()._iconOptional = nil}

      var iconRotationAlignment: Com_Tophap_MapboxGl_Proto_Layer.Symbol.Alignment {
        get {return _storage._iconRotationAlignment}
        set {_uniqueStorage()._iconRotationAlignment = newValue}
      }

      var hasIconRotationAlignment_p: Bool {
        get {return _storage._hasIconRotationAlignment_p}
        set {_uniqueStorage()._hasIconRotationAlignment_p = newValue}
      }

      var iconSize: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._iconSize ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._iconSize = newValue}
      }
      /// Returns true if `iconSize` has been explicitly set.
      var hasIconSize: Bool {return _storage._iconSize != nil}
      /// Clears the value of `iconSize`. Subsequent reads from it will return its default value.
      mutating func clearIconSize() {_uniqueStorage()._iconSize = nil}

      var iconTextFit: Com_Tophap_MapboxGl_Proto_Layer.Symbol.TextFit {
        get {return _storage._iconTextFit}
        set {_uniqueStorage()._iconTextFit = newValue}
      }

      var hasIconTextFit_p: Bool {
        get {return _storage._hasIconTextFit_p}
        set {_uniqueStorage()._hasIconTextFit_p = newValue}
      }

      var iconTextFitPadding: [Float] {
        get {return _storage._iconTextFitPadding}
        set {_uniqueStorage()._iconTextFitPadding = newValue}
      }

      var hasIconTextFitPadding_p: Bool {
        get {return _storage._hasIconTextFitPadding_p}
        set {_uniqueStorage()._hasIconTextFitPadding_p = newValue}
      }

      var iconImage: SwiftProtobuf.Google_Protobuf_StringValue {
        get {return _storage._iconImage ?? SwiftProtobuf.Google_Protobuf_StringValue()}
        set {_uniqueStorage()._iconImage = newValue}
      }
      /// Returns true if `iconImage` has been explicitly set.
      var hasIconImage: Bool {return _storage._iconImage != nil}
      /// Clears the value of `iconImage`. Subsequent reads from it will return its default value.
      mutating func clearIconImage() {_uniqueStorage()._iconImage = nil}

      var iconRotate: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._iconRotate ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._iconRotate = newValue}
      }
      /// Returns true if `iconRotate` has been explicitly set.
      var hasIconRotate: Bool {return _storage._iconRotate != nil}
      /// Clears the value of `iconRotate`. Subsequent reads from it will return its default value.
      mutating func clearIconRotate() {_uniqueStorage()._iconRotate = nil}

      var iconPadding: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._iconPadding ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._iconPadding = newValue}
      }
      /// Returns true if `iconPadding` has been explicitly set.
      var hasIconPadding: Bool {return _storage._iconPadding != nil}
      /// Clears the value of `iconPadding`. Subsequent reads from it will return its default value.
      mutating func clearIconPadding() {_uniqueStorage()._iconPadding = nil}

      var iconKeepUpright: SwiftProtobuf.Google_Protobuf_BoolValue {
        get {return _storage._iconKeepUpright ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
        set {_uniqueStorage()._iconKeepUpright = newValue}
      }
      /// Returns true if `iconKeepUpright` has been explicitly set.
      var hasIconKeepUpright: Bool {return _storage._iconKeepUpright != nil}
      /// Clears the value of `iconKeepUpright`. Subsequent reads from it will return its default value.
      mutating func clearIconKeepUpright() {_uniqueStorage()._iconKeepUpright = nil}

      var iconOffset: [Float] {
        get {return _storage._iconOffset}
        set {_uniqueStorage()._iconOffset = newValue}
      }

      var hasIconOffset_p: Bool {
        get {return _storage._hasIconOffset_p}
        set {_uniqueStorage()._hasIconOffset_p = newValue}
      }

      var iconAnchor: Com_Tophap_MapboxGl_Proto_PositionAnchor {
        get {return _storage._iconAnchor}
        set {_uniqueStorage()._iconAnchor = newValue}
      }

      var hasIconAnchor_p: Bool {
        get {return _storage._hasIconAnchor_p}
        set {_uniqueStorage()._hasIconAnchor_p = newValue}
      }

      var iconPitchAlignment: Com_Tophap_MapboxGl_Proto_Layer.Symbol.Alignment {
        get {return _storage._iconPitchAlignment}
        set {_uniqueStorage()._iconPitchAlignment = newValue}
      }

      var hasIconPitchAlignment_p: Bool {
        get {return _storage._hasIconPitchAlignment_p}
        set {_uniqueStorage()._hasIconPitchAlignment_p = newValue}
      }

      var textPitchAlignment: Com_Tophap_MapboxGl_Proto_Layer.Symbol.Alignment {
        get {return _storage._textPitchAlignment}
        set {_uniqueStorage()._textPitchAlignment = newValue}
      }

      var hasTextPitchAlignment_p: Bool {
        get {return _storage._hasTextPitchAlignment_p}
        set {_uniqueStorage()._hasTextPitchAlignment_p = newValue}
      }

      var textRotationAlignment: Com_Tophap_MapboxGl_Proto_Layer.Symbol.Alignment {
        get {return _storage._textRotationAlignment}
        set {_uniqueStorage()._textRotationAlignment = newValue}
      }

      var hasTextRotationAlignment_p: Bool {
        get {return _storage._hasTextRotationAlignment_p}
        set {_uniqueStorage()._hasTextRotationAlignment_p = newValue}
      }

      var textField: [Com_Tophap_MapboxGl_Proto_FormattedSection] {
        get {return _storage._textField}
        set {_uniqueStorage()._textField = newValue}
      }

      var hasTextField_p: Bool {
        get {return _storage._hasTextField_p}
        set {_uniqueStorage()._hasTextField_p = newValue}
      }

      var textFont: [String] {
        get {return _storage._textFont}
        set {_uniqueStorage()._textFont = newValue}
      }

      var hasTextFont_p: Bool {
        get {return _storage._hasTextFont_p}
        set {_uniqueStorage()._hasTextFont_p = newValue}
      }

      var textSize: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._textSize ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._textSize = newValue}
      }
      /// Returns true if `textSize` has been explicitly set.
      var hasTextSize: Bool {return _storage._textSize != nil}
      /// Clears the value of `textSize`. Subsequent reads from it will return its default value.
      mutating func clearTextSize() {_uniqueStorage()._textSize = nil}

      var textMaxWidth: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._textMaxWidth ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._textMaxWidth = newValue}
      }
      /// Returns true if `textMaxWidth` has been explicitly set.
      var hasTextMaxWidth: Bool {return _storage._textMaxWidth != nil}
      /// Clears the value of `textMaxWidth`. Subsequent reads from it will return its default value.
      mutating func clearTextMaxWidth() {_uniqueStorage()._textMaxWidth = nil}

      var textLineHeight: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._textLineHeight ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._textLineHeight = newValue}
      }
      /// Returns true if `textLineHeight` has been explicitly set.
      var hasTextLineHeight: Bool {return _storage._textLineHeight != nil}
      /// Clears the value of `textLineHeight`. Subsequent reads from it will return its default value.
      mutating func clearTextLineHeight() {_uniqueStorage()._textLineHeight = nil}

      var textLetterSpacing: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._textLetterSpacing ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._textLetterSpacing = newValue}
      }
      /// Returns true if `textLetterSpacing` has been explicitly set.
      var hasTextLetterSpacing: Bool {return _storage._textLetterSpacing != nil}
      /// Clears the value of `textLetterSpacing`. Subsequent reads from it will return its default value.
      mutating func clearTextLetterSpacing() {_uniqueStorage()._textLetterSpacing = nil}

      var textJustify: Com_Tophap_MapboxGl_Proto_Layer.Symbol.TextJustify {
        get {return _storage._textJustify}
        set {_uniqueStorage()._textJustify = newValue}
      }

      var hasTextJustify_p: Bool {
        get {return _storage._hasTextJustify_p}
        set {_uniqueStorage()._hasTextJustify_p = newValue}
      }

      var textRadialOffset: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._textRadialOffset ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._textRadialOffset = newValue}
      }
      /// Returns true if `textRadialOffset` has been explicitly set.
      var hasTextRadialOffset: Bool {return _storage._textRadialOffset != nil}
      /// Clears the value of `textRadialOffset`. Subsequent reads from it will return its default value.
      mutating func clearTextRadialOffset() {_uniqueStorage()._textRadialOffset = nil}

      var textVariableAnchor: [Com_Tophap_MapboxGl_Proto_PositionAnchor] {
        get {return _storage._textVariableAnchor}
        set {_uniqueStorage()._textVariableAnchor = newValue}
      }

      var hasTextVariableAnchor_p: Bool {
        get {return _storage._hasTextVariableAnchor_p}
        set {_uniqueStorage()._hasTextVariableAnchor_p = newValue}
      }

      var textAnchor: Com_Tophap_MapboxGl_Proto_PositionAnchor {
        get {return _storage._textAnchor}
        set {_uniqueStorage()._textAnchor = newValue}
      }

      var hasTextAnchor_p: Bool {
        get {return _storage._hasTextAnchor_p}
        set {_uniqueStorage()._hasTextAnchor_p = newValue}
      }

      var textMaxAngle: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._textMaxAngle ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._textMaxAngle = newValue}
      }
      /// Returns true if `textMaxAngle` has been explicitly set.
      var hasTextMaxAngle: Bool {return _storage._textMaxAngle != nil}
      /// Clears the value of `textMaxAngle`. Subsequent reads from it will return its default value.
      mutating func clearTextMaxAngle() {_uniqueStorage()._textMaxAngle = nil}

      var textRotate: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._textRotate ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._textRotate = newValue}
      }
      /// Returns true if `textRotate` has been explicitly set.
      var hasTextRotate: Bool {return _storage._textRotate != nil}
      /// Clears the value of `textRotate`. Subsequent reads from it will return its default value.
      mutating func clearTextRotate() {_uniqueStorage()._textRotate = nil}

      var textPadding: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._textPadding ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._textPadding = newValue}
      }
      /// Returns true if `textPadding` has been explicitly set.
      var hasTextPadding: Bool {return _storage._textPadding != nil}
      /// Clears the value of `textPadding`. Subsequent reads from it will return its default value.
      mutating func clearTextPadding() {_uniqueStorage()._textPadding = nil}

      var textKeepUpright: SwiftProtobuf.Google_Protobuf_BoolValue {
        get {return _storage._textKeepUpright ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
        set {_uniqueStorage()._textKeepUpright = newValue}
      }
      /// Returns true if `textKeepUpright` has been explicitly set.
      var hasTextKeepUpright: Bool {return _storage._textKeepUpright != nil}
      /// Clears the value of `textKeepUpright`. Subsequent reads from it will return its default value.
      mutating func clearTextKeepUpright() {_uniqueStorage()._textKeepUpright = nil}

      var textTransform: Com_Tophap_MapboxGl_Proto_Layer.Symbol.TextTransform {
        get {return _storage._textTransform}
        set {_uniqueStorage()._textTransform = newValue}
      }

      var hasTextTransform_p: Bool {
        get {return _storage._hasTextTransform_p}
        set {_uniqueStorage()._hasTextTransform_p = newValue}
      }

      var textOffset: [Float] {
        get {return _storage._textOffset}
        set {_uniqueStorage()._textOffset = newValue}
      }

      var hasTextOffset_p: Bool {
        get {return _storage._hasTextOffset_p}
        set {_uniqueStorage()._hasTextOffset_p = newValue}
      }

      var textAllowOverlap: SwiftProtobuf.Google_Protobuf_BoolValue {
        get {return _storage._textAllowOverlap ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
        set {_uniqueStorage()._textAllowOverlap = newValue}
      }
      /// Returns true if `textAllowOverlap` has been explicitly set.
      var hasTextAllowOverlap: Bool {return _storage._textAllowOverlap != nil}
      /// Clears the value of `textAllowOverlap`. Subsequent reads from it will return its default value.
      mutating func clearTextAllowOverlap() {_uniqueStorage()._textAllowOverlap = nil}

      var textIgnorePlacement: SwiftProtobuf.Google_Protobuf_BoolValue {
        get {return _storage._textIgnorePlacement ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
        set {_uniqueStorage()._textIgnorePlacement = newValue}
      }
      /// Returns true if `textIgnorePlacement` has been explicitly set.
      var hasTextIgnorePlacement: Bool {return _storage._textIgnorePlacement != nil}
      /// Clears the value of `textIgnorePlacement`. Subsequent reads from it will return its default value.
      mutating func clearTextIgnorePlacement() {_uniqueStorage()._textIgnorePlacement = nil}

      var textOptional: SwiftProtobuf.Google_Protobuf_BoolValue {
        get {return _storage._textOptional ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
        set {_uniqueStorage()._textOptional = newValue}
      }
      /// Returns true if `textOptional` has been explicitly set.
      var hasTextOptional: Bool {return _storage._textOptional != nil}
      /// Clears the value of `textOptional`. Subsequent reads from it will return its default value.
      mutating func clearTextOptional() {_uniqueStorage()._textOptional = nil}

      var iconOpacity: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._iconOpacity ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._iconOpacity = newValue}
      }
      /// Returns true if `iconOpacity` has been explicitly set.
      var hasIconOpacity: Bool {return _storage._iconOpacity != nil}
      /// Clears the value of `iconOpacity`. Subsequent reads from it will return its default value.
      mutating func clearIconOpacity() {_uniqueStorage()._iconOpacity = nil}

      var iconColor: SwiftProtobuf.Google_Protobuf_Int32Value {
        get {return _storage._iconColor ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
        set {_uniqueStorage()._iconColor = newValue}
      }
      /// Returns true if `iconColor` has been explicitly set.
      var hasIconColor: Bool {return _storage._iconColor != nil}
      /// Clears the value of `iconColor`. Subsequent reads from it will return its default value.
      mutating func clearIconColor() {_uniqueStorage()._iconColor = nil}

      var iconHaloColor: SwiftProtobuf.Google_Protobuf_Int32Value {
        get {return _storage._iconHaloColor ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
        set {_uniqueStorage()._iconHaloColor = newValue}
      }
      /// Returns true if `iconHaloColor` has been explicitly set.
      var hasIconHaloColor: Bool {return _storage._iconHaloColor != nil}
      /// Clears the value of `iconHaloColor`. Subsequent reads from it will return its default value.
      mutating func clearIconHaloColor() {_uniqueStorage()._iconHaloColor = nil}

      var iconHaloWidth: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._iconHaloWidth ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._iconHaloWidth = newValue}
      }
      /// Returns true if `iconHaloWidth` has been explicitly set.
      var hasIconHaloWidth: Bool {return _storage._iconHaloWidth != nil}
      /// Clears the value of `iconHaloWidth`. Subsequent reads from it will return its default value.
      mutating func clearIconHaloWidth() {_uniqueStorage()._iconHaloWidth = nil}

      var iconHaloBlur: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._iconHaloBlur ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._iconHaloBlur = newValue}
      }
      /// Returns true if `iconHaloBlur` has been explicitly set.
      var hasIconHaloBlur: Bool {return _storage._iconHaloBlur != nil}
      /// Clears the value of `iconHaloBlur`. Subsequent reads from it will return its default value.
      mutating func clearIconHaloBlur() {_uniqueStorage()._iconHaloBlur = nil}

      var iconTranslate: [Float] {
        get {return _storage._iconTranslate}
        set {_uniqueStorage()._iconTranslate = newValue}
      }

      var hasIconTranslate_p: Bool {
        get {return _storage._hasIconTranslate_p}
        set {_uniqueStorage()._hasIconTranslate_p = newValue}
      }

      var iconTranslateAnchor: Com_Tophap_MapboxGl_Proto_TranslateAnchor {
        get {return _storage._iconTranslateAnchor}
        set {_uniqueStorage()._iconTranslateAnchor = newValue}
      }

      var hasIconTranslateAnchor_p: Bool {
        get {return _storage._hasIconTranslateAnchor_p}
        set {_uniqueStorage()._hasIconTranslateAnchor_p = newValue}
      }

      var textOpacity: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._textOpacity ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._textOpacity = newValue}
      }
      /// Returns true if `textOpacity` has been explicitly set.
      var hasTextOpacity: Bool {return _storage._textOpacity != nil}
      /// Clears the value of `textOpacity`. Subsequent reads from it will return its default value.
      mutating func clearTextOpacity() {_uniqueStorage()._textOpacity = nil}

      var textColor: SwiftProtobuf.Google_Protobuf_Int32Value {
        get {return _storage._textColor ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
        set {_uniqueStorage()._textColor = newValue}
      }
      /// Returns true if `textColor` has been explicitly set.
      var hasTextColor: Bool {return _storage._textColor != nil}
      /// Clears the value of `textColor`. Subsequent reads from it will return its default value.
      mutating func clearTextColor() {_uniqueStorage()._textColor = nil}

      var textHaloColor: SwiftProtobuf.Google_Protobuf_Int32Value {
        get {return _storage._textHaloColor ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
        set {_uniqueStorage()._textHaloColor = newValue}
      }
      /// Returns true if `textHaloColor` has been explicitly set.
      var hasTextHaloColor: Bool {return _storage._textHaloColor != nil}
      /// Clears the value of `textHaloColor`. Subsequent reads from it will return its default value.
      mutating func clearTextHaloColor() {_uniqueStorage()._textHaloColor = nil}

      var textHaloWidth: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._textHaloWidth ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._textHaloWidth = newValue}
      }
      /// Returns true if `textHaloWidth` has been explicitly set.
      var hasTextHaloWidth: Bool {return _storage._textHaloWidth != nil}
      /// Clears the value of `textHaloWidth`. Subsequent reads from it will return its default value.
      mutating func clearTextHaloWidth() {_uniqueStorage()._textHaloWidth = nil}

      var textHaloBlur: SwiftProtobuf.Google_Protobuf_FloatValue {
        get {return _storage._textHaloBlur ?? SwiftProtobuf.Google_Protobuf_FloatValue()}
        set {_uniqueStorage()._textHaloBlur = newValue}
      }
      /// Returns true if `textHaloBlur` has been explicitly set.
      var hasTextHaloBlur: Bool {return _storage._textHaloBlur != nil}
      /// Clears the value of `textHaloBlur`. Subsequent reads from it will return its default value.
      mutating func clearTextHaloBlur() {_uniqueStorage()._textHaloBlur = nil}

      var textTranslate: [Float] {
        get {return _storage._textTranslate}
        set {_uniqueStorage()._textTranslate = newValue}
      }

      var hasTextTranslate_p: Bool {
        get {return _storage._hasTextTranslate_p}
        set {_uniqueStorage()._hasTextTranslate_p = newValue}
      }

      var textTranslateAnchor: Com_Tophap_MapboxGl_Proto_TranslateAnchor {
        get {return _storage._textTranslateAnchor}
        set {_uniqueStorage()._textTranslateAnchor = newValue}
      }

      var hasTextTranslateAnchor_p: Bool {
        get {return _storage._hasTextTranslateAnchor_p}
        set {_uniqueStorage()._hasTextTranslateAnchor_p = newValue}
      }

      var iconOpacityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._iconOpacityTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._iconOpacityTransition = newValue}
      }
      /// Returns true if `iconOpacityTransition` has been explicitly set.
      var hasIconOpacityTransition: Bool {return _storage._iconOpacityTransition != nil}
      /// Clears the value of `iconOpacityTransition`. Subsequent reads from it will return its default value.
      mutating func clearIconOpacityTransition() {_uniqueStorage()._iconOpacityTransition = nil}

      var iconColorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._iconColorTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._iconColorTransition = newValue}
      }
      /// Returns true if `iconColorTransition` has been explicitly set.
      var hasIconColorTransition: Bool {return _storage._iconColorTransition != nil}
      /// Clears the value of `iconColorTransition`. Subsequent reads from it will return its default value.
      mutating func clearIconColorTransition() {_uniqueStorage()._iconColorTransition = nil}

      var iconHaloColorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._iconHaloColorTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._iconHaloColorTransition = newValue}
      }
      /// Returns true if `iconHaloColorTransition` has been explicitly set.
      var hasIconHaloColorTransition: Bool {return _storage._iconHaloColorTransition != nil}
      /// Clears the value of `iconHaloColorTransition`. Subsequent reads from it will return its default value.
      mutating func clearIconHaloColorTransition() {_uniqueStorage()._iconHaloColorTransition = nil}

      var iconHaloWidthTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._iconHaloWidthTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._iconHaloWidthTransition = newValue}
      }
      /// Returns true if `iconHaloWidthTransition` has been explicitly set.
      var hasIconHaloWidthTransition: Bool {return _storage._iconHaloWidthTransition != nil}
      /// Clears the value of `iconHaloWidthTransition`. Subsequent reads from it will return its default value.
      mutating func clearIconHaloWidthTransition() {_uniqueStorage()._iconHaloWidthTransition = nil}

      var iconHaloBlurTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._iconHaloBlurTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._iconHaloBlurTransition = newValue}
      }
      /// Returns true if `iconHaloBlurTransition` has been explicitly set.
      var hasIconHaloBlurTransition: Bool {return _storage._iconHaloBlurTransition != nil}
      /// Clears the value of `iconHaloBlurTransition`. Subsequent reads from it will return its default value.
      mutating func clearIconHaloBlurTransition() {_uniqueStorage()._iconHaloBlurTransition = nil}

      var iconTranslateTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._iconTranslateTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._iconTranslateTransition = newValue}
      }
      /// Returns true if `iconTranslateTransition` has been explicitly set.
      var hasIconTranslateTransition: Bool {return _storage._iconTranslateTransition != nil}
      /// Clears the value of `iconTranslateTransition`. Subsequent reads from it will return its default value.
      mutating func clearIconTranslateTransition() {_uniqueStorage()._iconTranslateTransition = nil}

      var textOpacityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._textOpacityTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._textOpacityTransition = newValue}
      }
      /// Returns true if `textOpacityTransition` has been explicitly set.
      var hasTextOpacityTransition: Bool {return _storage._textOpacityTransition != nil}
      /// Clears the value of `textOpacityTransition`. Subsequent reads from it will return its default value.
      mutating func clearTextOpacityTransition() {_uniqueStorage()._textOpacityTransition = nil}

      var textColorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._textColorTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._textColorTransition = newValue}
      }
      /// Returns true if `textColorTransition` has been explicitly set.
      var hasTextColorTransition: Bool {return _storage._textColorTransition != nil}
      /// Clears the value of `textColorTransition`. Subsequent reads from it will return its default value.
      mutating func clearTextColorTransition() {_uniqueStorage()._textColorTransition = nil}

      var textHaloColorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._textHaloColorTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._textHaloColorTransition = newValue}
      }
      /// Returns true if `textHaloColorTransition` has been explicitly set.
      var hasTextHaloColorTransition: Bool {return _storage._textHaloColorTransition != nil}
      /// Clears the value of `textHaloColorTransition`. Subsequent reads from it will return its default value.
      mutating func clearTextHaloColorTransition() {_uniqueStorage()._textHaloColorTransition = nil}

      var textHaloWidthTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._textHaloWidthTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._textHaloWidthTransition = newValue}
      }
      /// Returns true if `textHaloWidthTransition` has been explicitly set.
      var hasTextHaloWidthTransition: Bool {return _storage._textHaloWidthTransition != nil}
      /// Clears the value of `textHaloWidthTransition`. Subsequent reads from it will return its default value.
      mutating func clearTextHaloWidthTransition() {_uniqueStorage()._textHaloWidthTransition = nil}

      var textHaloBlurTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._textHaloBlurTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._textHaloBlurTransition = newValue}
      }
      /// Returns true if `textHaloBlurTransition` has been explicitly set.
      var hasTextHaloBlurTransition: Bool {return _storage._textHaloBlurTransition != nil}
      /// Clears the value of `textHaloBlurTransition`. Subsequent reads from it will return its default value.
      mutating func clearTextHaloBlurTransition() {_uniqueStorage()._textHaloBlurTransition = nil}

      var textTranslateTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions {
        get {return _storage._textTranslateTransition ?? Com_Tophap_MapboxGl_Proto_TransitionOptions()}
        set {_uniqueStorage()._textTranslateTransition = newValue}
      }
      /// Returns true if `textTranslateTransition` has been explicitly set.
      var hasTextTranslateTransition: Bool {return _storage._textTranslateTransition != nil}
      /// Clears the value of `textTranslateTransition`. Subsequent reads from it will return its default value.
      mutating func clearTextTranslateTransition() {_uniqueStorage()._textTranslateTransition = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _storage = _StorageClass.defaultInstance
    }

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.tophap.mapbox_gl.proto"

extension Com_Tophap_MapboxGl_Proto_Operations: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Operations"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_MapboxGl_Proto_Operations, rhs: Com_Tophap_MapboxGl_Proto_Operations) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Tophap_MapboxGl_Proto_Operations.Add: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Tophap_MapboxGl_Proto_Operations.protoMessageName + ".Add"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "layer"),
    2: .standard(proto: "below_id"),
    3: .standard(proto: "above_id"),
    4: .same(proto: "index"),
  ]

  fileprivate class _StorageClass {
    var _layer: Com_Tophap_MapboxGl_Proto_Layer? = nil
    var _position: Com_Tophap_MapboxGl_Proto_Operations.Add.OneOf_Position?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _layer = source._layer
      _position = source._position
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._layer)
        case 2:
          if _storage._position != nil {try decoder.handleConflictingOneOf()}
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {_storage._position = .belowID(v)}
        case 3:
          if _storage._position != nil {try decoder.handleConflictingOneOf()}
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {_storage._position = .aboveID(v)}
        case 4:
          if _storage._position != nil {try decoder.handleConflictingOneOf()}
          var v: Int32?
          try decoder.decodeSingularInt32Field(value: &v)
          if let v = v {_storage._position = .index(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._layer {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      switch _storage._position {
      case .belowID(let v)?:
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      case .aboveID(let v)?:
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      case .index(let v)?:
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_MapboxGl_Proto_Operations.Add, rhs: Com_Tophap_MapboxGl_Proto_Operations.Add) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._layer != rhs_storage._layer {return false}
        if _storage._position != rhs_storage._position {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Tophap_MapboxGl_Proto_Operations.Update: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Tophap_MapboxGl_Proto_Operations.protoMessageName + ".Update"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "background_layer"),
    3: .standard(proto: "circle_layer"),
    4: .standard(proto: "fill_layer"),
    5: .standard(proto: "fill_extrusion_layer"),
    6: .standard(proto: "line_layer"),
    7: .standard(proto: "symbol_layer"),
    8: .standard(proto: "hillshade_layer"),
    9: .standard(proto: "heatmap_layer"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _type: Com_Tophap_MapboxGl_Proto_Operations.Update.OneOf_Type?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _type = source._type
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2:
          var v: Com_Tophap_MapboxGl_Proto_Operations.Update.Background?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .backgroundLayer(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .backgroundLayer(v)}
        case 3:
          var v: Com_Tophap_MapboxGl_Proto_Operations.Update.Circle?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .circleLayer(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .circleLayer(v)}
        case 4:
          var v: Com_Tophap_MapboxGl_Proto_Operations.Update.Fill?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .fillLayer(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .fillLayer(v)}
        case 5:
          var v: Com_Tophap_MapboxGl_Proto_Operations.Update.FillExtrusion?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .fillExtrusionLayer(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .fillExtrusionLayer(v)}
        case 6:
          var v: Com_Tophap_MapboxGl_Proto_Operations.Update.Line?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .lineLayer(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .lineLayer(v)}
        case 7:
          var v: Com_Tophap_MapboxGl_Proto_Operations.Update.Symbol?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .symbolLayer(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .symbolLayer(v)}
        case 8:
          var v: Com_Tophap_MapboxGl_Proto_Operations.Update.Hillshade?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .hillshadeLayer(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .hillshadeLayer(v)}
        case 9:
          var v: Com_Tophap_MapboxGl_Proto_Operations.Update.Heatmap?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .heatmapLayer(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .heatmapLayer(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      switch _storage._type {
      case .backgroundLayer(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .circleLayer(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .fillLayer(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case .fillExtrusionLayer(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      case .lineLayer(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      case .symbolLayer(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      case .hillshadeLayer(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      case .heatmapLayer(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_MapboxGl_Proto_Operations.Update, rhs: Com_Tophap_MapboxGl_Proto_Operations.Update) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._type != rhs_storage._type {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Tophap_MapboxGl_Proto_Operations.Update.Background: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Tophap_MapboxGl_Proto_Operations.Update.protoMessageName + ".Background"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visible"),
    2: .standard(proto: "min_zoom"),
    3: .standard(proto: "max_zoom"),
    4: .same(proto: "color"),
    5: .same(proto: "pattern"),
    6: .same(proto: "opacity"),
    7: .standard(proto: "color_transition"),
    8: .standard(proto: "pattern_transition"),
    9: .standard(proto: "opacity_transition"),
  ]

  fileprivate class _StorageClass {
    var _visible: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _minZoom: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _maxZoom: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _color: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
    var _pattern: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _opacity: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _colorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _patternTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _opacityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _visible = source._visible
      _minZoom = source._minZoom
      _maxZoom = source._maxZoom
      _color = source._color
      _pattern = source._pattern
      _opacity = source._opacity
      _colorTransition = source._colorTransition
      _patternTransition = source._patternTransition
      _opacityTransition = source._opacityTransition
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._visible)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._minZoom)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._maxZoom)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._color)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._pattern)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._opacity)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._colorTransition)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._patternTransition)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._opacityTransition)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._visible {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._minZoom {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._maxZoom {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._color {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._pattern {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._opacity {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._colorTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._patternTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._opacityTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_MapboxGl_Proto_Operations.Update.Background, rhs: Com_Tophap_MapboxGl_Proto_Operations.Update.Background) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._visible != rhs_storage._visible {return false}
        if _storage._minZoom != rhs_storage._minZoom {return false}
        if _storage._maxZoom != rhs_storage._maxZoom {return false}
        if _storage._color != rhs_storage._color {return false}
        if _storage._pattern != rhs_storage._pattern {return false}
        if _storage._opacity != rhs_storage._opacity {return false}
        if _storage._colorTransition != rhs_storage._colorTransition {return false}
        if _storage._patternTransition != rhs_storage._patternTransition {return false}
        if _storage._opacityTransition != rhs_storage._opacityTransition {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Tophap_MapboxGl_Proto_Operations.Update.Circle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Tophap_MapboxGl_Proto_Operations.Update.protoMessageName + ".Circle"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visible"),
    2: .standard(proto: "min_zoom"),
    3: .standard(proto: "max_zoom"),
    4: .same(proto: "radius"),
    5: .same(proto: "color"),
    6: .same(proto: "blur"),
    7: .same(proto: "opacity"),
    8: .same(proto: "translate"),
    9: .standard(proto: "has_translate"),
    10: .standard(proto: "translate_anchor"),
    11: .standard(proto: "has_translate_anchor"),
    12: .standard(proto: "pitch_scale"),
    13: .standard(proto: "has_pitch_scale"),
    14: .standard(proto: "pitch_alignment"),
    15: .standard(proto: "has_pitch_alignment"),
    16: .standard(proto: "stroke_width"),
    17: .standard(proto: "stroke_color"),
    18: .standard(proto: "stroke_opacity"),
    19: .standard(proto: "radius_transition"),
    20: .standard(proto: "color_transition"),
    21: .standard(proto: "blur_transition"),
    22: .standard(proto: "opacity_transition"),
    23: .standard(proto: "translate_transition"),
    24: .standard(proto: "stroke_width_transition"),
    25: .standard(proto: "stroke_color_transition"),
    26: .standard(proto: "stroke_opacity_transition"),
  ]

  fileprivate class _StorageClass {
    var _visible: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _minZoom: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _maxZoom: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radius: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _color: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
    var _blur: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _opacity: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _translate: [Float] = []
    var _hasTranslate_p: Bool = false
    var _translateAnchor: Com_Tophap_MapboxGl_Proto_TranslateAnchor = .map
    var _hasTranslateAnchor_p: Bool = false
    var _pitchScale: Com_Tophap_MapboxGl_Proto_TranslateAnchor = .map
    var _hasPitchScale_p: Bool = false
    var _pitchAlignment: Com_Tophap_MapboxGl_Proto_TranslateAnchor = .map
    var _hasPitchAlignment_p: Bool = false
    var _strokeWidth: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _strokeColor: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
    var _strokeOpacity: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radiusTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _colorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _blurTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _opacityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _translateTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _strokeWidthTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _strokeColorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _strokeOpacityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _visible = source._visible
      _minZoom = source._minZoom
      _maxZoom = source._maxZoom
      _radius = source._radius
      _color = source._color
      _blur = source._blur
      _opacity = source._opacity
      _translate = source._translate
      _hasTranslate_p = source._hasTranslate_p
      _translateAnchor = source._translateAnchor
      _hasTranslateAnchor_p = source._hasTranslateAnchor_p
      _pitchScale = source._pitchScale
      _hasPitchScale_p = source._hasPitchScale_p
      _pitchAlignment = source._pitchAlignment
      _hasPitchAlignment_p = source._hasPitchAlignment_p
      _strokeWidth = source._strokeWidth
      _strokeColor = source._strokeColor
      _strokeOpacity = source._strokeOpacity
      _radiusTransition = source._radiusTransition
      _colorTransition = source._colorTransition
      _blurTransition = source._blurTransition
      _opacityTransition = source._opacityTransition
      _translateTransition = source._translateTransition
      _strokeWidthTransition = source._strokeWidthTransition
      _strokeColorTransition = source._strokeColorTransition
      _strokeOpacityTransition = source._strokeOpacityTransition
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._visible)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._minZoom)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._maxZoom)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._radius)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._color)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._blur)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._opacity)
        case 8: try decoder.decodeRepeatedFloatField(value: &_storage._translate)
        case 9: try decoder.decodeSingularBoolField(value: &_storage._hasTranslate_p)
        case 10: try decoder.decodeSingularEnumField(value: &_storage._translateAnchor)
        case 11: try decoder.decodeSingularBoolField(value: &_storage._hasTranslateAnchor_p)
        case 12: try decoder.decodeSingularEnumField(value: &_storage._pitchScale)
        case 13: try decoder.decodeSingularBoolField(value: &_storage._hasPitchScale_p)
        case 14: try decoder.decodeSingularEnumField(value: &_storage._pitchAlignment)
        case 15: try decoder.decodeSingularBoolField(value: &_storage._hasPitchAlignment_p)
        case 16: try decoder.decodeSingularMessageField(value: &_storage._strokeWidth)
        case 17: try decoder.decodeSingularMessageField(value: &_storage._strokeColor)
        case 18: try decoder.decodeSingularMessageField(value: &_storage._strokeOpacity)
        case 19: try decoder.decodeSingularMessageField(value: &_storage._radiusTransition)
        case 20: try decoder.decodeSingularMessageField(value: &_storage._colorTransition)
        case 21: try decoder.decodeSingularMessageField(value: &_storage._blurTransition)
        case 22: try decoder.decodeSingularMessageField(value: &_storage._opacityTransition)
        case 23: try decoder.decodeSingularMessageField(value: &_storage._translateTransition)
        case 24: try decoder.decodeSingularMessageField(value: &_storage._strokeWidthTransition)
        case 25: try decoder.decodeSingularMessageField(value: &_storage._strokeColorTransition)
        case 26: try decoder.decodeSingularMessageField(value: &_storage._strokeOpacityTransition)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._visible {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._minZoom {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._maxZoom {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._radius {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._color {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._blur {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._opacity {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if !_storage._translate.isEmpty {
        try visitor.visitPackedFloatField(value: _storage._translate, fieldNumber: 8)
      }
      if _storage._hasTranslate_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasTranslate_p, fieldNumber: 9)
      }
      if _storage._translateAnchor != .map {
        try visitor.visitSingularEnumField(value: _storage._translateAnchor, fieldNumber: 10)
      }
      if _storage._hasTranslateAnchor_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasTranslateAnchor_p, fieldNumber: 11)
      }
      if _storage._pitchScale != .map {
        try visitor.visitSingularEnumField(value: _storage._pitchScale, fieldNumber: 12)
      }
      if _storage._hasPitchScale_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasPitchScale_p, fieldNumber: 13)
      }
      if _storage._pitchAlignment != .map {
        try visitor.visitSingularEnumField(value: _storage._pitchAlignment, fieldNumber: 14)
      }
      if _storage._hasPitchAlignment_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasPitchAlignment_p, fieldNumber: 15)
      }
      if let v = _storage._strokeWidth {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
      if let v = _storage._strokeColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
      if let v = _storage._strokeOpacity {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if let v = _storage._radiusTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      }
      if let v = _storage._colorTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if let v = _storage._blurTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      }
      if let v = _storage._opacityTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      }
      if let v = _storage._translateTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      }
      if let v = _storage._strokeWidthTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      }
      if let v = _storage._strokeColorTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
      }
      if let v = _storage._strokeOpacityTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_MapboxGl_Proto_Operations.Update.Circle, rhs: Com_Tophap_MapboxGl_Proto_Operations.Update.Circle) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._visible != rhs_storage._visible {return false}
        if _storage._minZoom != rhs_storage._minZoom {return false}
        if _storage._maxZoom != rhs_storage._maxZoom {return false}
        if _storage._radius != rhs_storage._radius {return false}
        if _storage._color != rhs_storage._color {return false}
        if _storage._blur != rhs_storage._blur {return false}
        if _storage._opacity != rhs_storage._opacity {return false}
        if _storage._translate != rhs_storage._translate {return false}
        if _storage._hasTranslate_p != rhs_storage._hasTranslate_p {return false}
        if _storage._translateAnchor != rhs_storage._translateAnchor {return false}
        if _storage._hasTranslateAnchor_p != rhs_storage._hasTranslateAnchor_p {return false}
        if _storage._pitchScale != rhs_storage._pitchScale {return false}
        if _storage._hasPitchScale_p != rhs_storage._hasPitchScale_p {return false}
        if _storage._pitchAlignment != rhs_storage._pitchAlignment {return false}
        if _storage._hasPitchAlignment_p != rhs_storage._hasPitchAlignment_p {return false}
        if _storage._strokeWidth != rhs_storage._strokeWidth {return false}
        if _storage._strokeColor != rhs_storage._strokeColor {return false}
        if _storage._strokeOpacity != rhs_storage._strokeOpacity {return false}
        if _storage._radiusTransition != rhs_storage._radiusTransition {return false}
        if _storage._colorTransition != rhs_storage._colorTransition {return false}
        if _storage._blurTransition != rhs_storage._blurTransition {return false}
        if _storage._opacityTransition != rhs_storage._opacityTransition {return false}
        if _storage._translateTransition != rhs_storage._translateTransition {return false}
        if _storage._strokeWidthTransition != rhs_storage._strokeWidthTransition {return false}
        if _storage._strokeColorTransition != rhs_storage._strokeColorTransition {return false}
        if _storage._strokeOpacityTransition != rhs_storage._strokeOpacityTransition {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Tophap_MapboxGl_Proto_Operations.Update.FillExtrusion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Tophap_MapboxGl_Proto_Operations.Update.protoMessageName + ".FillExtrusion"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visible"),
    2: .standard(proto: "min_zoom"),
    3: .standard(proto: "max_zoom"),
    4: .same(proto: "opacity"),
    5: .same(proto: "color"),
    6: .same(proto: "translate"),
    7: .standard(proto: "has_translate"),
    8: .standard(proto: "translate_anchor"),
    9: .standard(proto: "has_translate_anchor"),
    10: .same(proto: "pattern"),
    11: .same(proto: "height"),
    12: .same(proto: "base"),
    13: .standard(proto: "vertical_gradient"),
    14: .standard(proto: "opacity_transition"),
    15: .standard(proto: "color_transition"),
    16: .standard(proto: "translate_transition"),
    17: .standard(proto: "pattern_transition"),
    18: .standard(proto: "height_transition"),
    19: .standard(proto: "base_transition"),
  ]

  fileprivate class _StorageClass {
    var _visible: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _minZoom: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _maxZoom: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _opacity: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _color: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
    var _translate: [Float] = []
    var _hasTranslate_p: Bool = false
    var _translateAnchor: Com_Tophap_MapboxGl_Proto_TranslateAnchor = .map
    var _hasTranslateAnchor_p: Bool = false
    var _pattern: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _height: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _base: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _verticalGradient: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _opacityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _colorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _translateTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _patternTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _heightTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _baseTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _visible = source._visible
      _minZoom = source._minZoom
      _maxZoom = source._maxZoom
      _opacity = source._opacity
      _color = source._color
      _translate = source._translate
      _hasTranslate_p = source._hasTranslate_p
      _translateAnchor = source._translateAnchor
      _hasTranslateAnchor_p = source._hasTranslateAnchor_p
      _pattern = source._pattern
      _height = source._height
      _base = source._base
      _verticalGradient = source._verticalGradient
      _opacityTransition = source._opacityTransition
      _colorTransition = source._colorTransition
      _translateTransition = source._translateTransition
      _patternTransition = source._patternTransition
      _heightTransition = source._heightTransition
      _baseTransition = source._baseTransition
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._visible)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._minZoom)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._maxZoom)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._opacity)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._color)
        case 6: try decoder.decodeRepeatedFloatField(value: &_storage._translate)
        case 7: try decoder.decodeSingularBoolField(value: &_storage._hasTranslate_p)
        case 8: try decoder.decodeSingularEnumField(value: &_storage._translateAnchor)
        case 9: try decoder.decodeSingularBoolField(value: &_storage._hasTranslateAnchor_p)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._pattern)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._height)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._base)
        case 13: try decoder.decodeSingularMessageField(value: &_storage._verticalGradient)
        case 14: try decoder.decodeSingularMessageField(value: &_storage._opacityTransition)
        case 15: try decoder.decodeSingularMessageField(value: &_storage._colorTransition)
        case 16: try decoder.decodeSingularMessageField(value: &_storage._translateTransition)
        case 17: try decoder.decodeSingularMessageField(value: &_storage._patternTransition)
        case 18: try decoder.decodeSingularMessageField(value: &_storage._heightTransition)
        case 19: try decoder.decodeSingularMessageField(value: &_storage._baseTransition)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._visible {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._minZoom {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._maxZoom {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._opacity {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._color {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._translate.isEmpty {
        try visitor.visitPackedFloatField(value: _storage._translate, fieldNumber: 6)
      }
      if _storage._hasTranslate_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasTranslate_p, fieldNumber: 7)
      }
      if _storage._translateAnchor != .map {
        try visitor.visitSingularEnumField(value: _storage._translateAnchor, fieldNumber: 8)
      }
      if _storage._hasTranslateAnchor_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasTranslateAnchor_p, fieldNumber: 9)
      }
      if let v = _storage._pattern {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._height {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._base {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if let v = _storage._verticalGradient {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if let v = _storage._opacityTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if let v = _storage._colorTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
      if let v = _storage._translateTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
      if let v = _storage._patternTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
      if let v = _storage._heightTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if let v = _storage._baseTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_MapboxGl_Proto_Operations.Update.FillExtrusion, rhs: Com_Tophap_MapboxGl_Proto_Operations.Update.FillExtrusion) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._visible != rhs_storage._visible {return false}
        if _storage._minZoom != rhs_storage._minZoom {return false}
        if _storage._maxZoom != rhs_storage._maxZoom {return false}
        if _storage._opacity != rhs_storage._opacity {return false}
        if _storage._color != rhs_storage._color {return false}
        if _storage._translate != rhs_storage._translate {return false}
        if _storage._hasTranslate_p != rhs_storage._hasTranslate_p {return false}
        if _storage._translateAnchor != rhs_storage._translateAnchor {return false}
        if _storage._hasTranslateAnchor_p != rhs_storage._hasTranslateAnchor_p {return false}
        if _storage._pattern != rhs_storage._pattern {return false}
        if _storage._height != rhs_storage._height {return false}
        if _storage._base != rhs_storage._base {return false}
        if _storage._verticalGradient != rhs_storage._verticalGradient {return false}
        if _storage._opacityTransition != rhs_storage._opacityTransition {return false}
        if _storage._colorTransition != rhs_storage._colorTransition {return false}
        if _storage._translateTransition != rhs_storage._translateTransition {return false}
        if _storage._patternTransition != rhs_storage._patternTransition {return false}
        if _storage._heightTransition != rhs_storage._heightTransition {return false}
        if _storage._baseTransition != rhs_storage._baseTransition {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Tophap_MapboxGl_Proto_Operations.Update.Fill: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Tophap_MapboxGl_Proto_Operations.Update.protoMessageName + ".Fill"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visible"),
    2: .standard(proto: "min_zoom"),
    3: .standard(proto: "max_zoom"),
    4: .same(proto: "antialias"),
    5: .same(proto: "opacity"),
    6: .same(proto: "color"),
    7: .standard(proto: "outline_color"),
    8: .same(proto: "translate"),
    9: .standard(proto: "has_translate"),
    10: .standard(proto: "translate_anchor"),
    11: .standard(proto: "has_translate_anchor"),
    12: .same(proto: "pattern"),
    13: .standard(proto: "opacity_transition"),
    14: .standard(proto: "color_transition"),
    15: .standard(proto: "outline_color_transition"),
    16: .standard(proto: "translate_transition"),
    17: .standard(proto: "pattern_transition"),
  ]

  fileprivate class _StorageClass {
    var _visible: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _minZoom: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _maxZoom: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _antialias: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _opacity: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _color: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
    var _outlineColor: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
    var _translate: [Float] = []
    var _hasTranslate_p: Bool = false
    var _translateAnchor: Com_Tophap_MapboxGl_Proto_TranslateAnchor = .map
    var _hasTranslateAnchor_p: Bool = false
    var _pattern: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _opacityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _colorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _outlineColorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _translateTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _patternTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _visible = source._visible
      _minZoom = source._minZoom
      _maxZoom = source._maxZoom
      _antialias = source._antialias
      _opacity = source._opacity
      _color = source._color
      _outlineColor = source._outlineColor
      _translate = source._translate
      _hasTranslate_p = source._hasTranslate_p
      _translateAnchor = source._translateAnchor
      _hasTranslateAnchor_p = source._hasTranslateAnchor_p
      _pattern = source._pattern
      _opacityTransition = source._opacityTransition
      _colorTransition = source._colorTransition
      _outlineColorTransition = source._outlineColorTransition
      _translateTransition = source._translateTransition
      _patternTransition = source._patternTransition
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._visible)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._minZoom)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._maxZoom)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._antialias)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._opacity)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._color)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._outlineColor)
        case 8: try decoder.decodeRepeatedFloatField(value: &_storage._translate)
        case 9: try decoder.decodeSingularBoolField(value: &_storage._hasTranslate_p)
        case 10: try decoder.decodeSingularEnumField(value: &_storage._translateAnchor)
        case 11: try decoder.decodeSingularBoolField(value: &_storage._hasTranslateAnchor_p)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._pattern)
        case 13: try decoder.decodeSingularMessageField(value: &_storage._opacityTransition)
        case 14: try decoder.decodeSingularMessageField(value: &_storage._colorTransition)
        case 15: try decoder.decodeSingularMessageField(value: &_storage._outlineColorTransition)
        case 16: try decoder.decodeSingularMessageField(value: &_storage._translateTransition)
        case 17: try decoder.decodeSingularMessageField(value: &_storage._patternTransition)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._visible {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._minZoom {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._maxZoom {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._antialias {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._opacity {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._color {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._outlineColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if !_storage._translate.isEmpty {
        try visitor.visitPackedFloatField(value: _storage._translate, fieldNumber: 8)
      }
      if _storage._hasTranslate_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasTranslate_p, fieldNumber: 9)
      }
      if _storage._translateAnchor != .map {
        try visitor.visitSingularEnumField(value: _storage._translateAnchor, fieldNumber: 10)
      }
      if _storage._hasTranslateAnchor_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasTranslateAnchor_p, fieldNumber: 11)
      }
      if let v = _storage._pattern {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if let v = _storage._opacityTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if let v = _storage._colorTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if let v = _storage._outlineColorTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
      if let v = _storage._translateTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
      if let v = _storage._patternTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_MapboxGl_Proto_Operations.Update.Fill, rhs: Com_Tophap_MapboxGl_Proto_Operations.Update.Fill) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._visible != rhs_storage._visible {return false}
        if _storage._minZoom != rhs_storage._minZoom {return false}
        if _storage._maxZoom != rhs_storage._maxZoom {return false}
        if _storage._antialias != rhs_storage._antialias {return false}
        if _storage._opacity != rhs_storage._opacity {return false}
        if _storage._color != rhs_storage._color {return false}
        if _storage._outlineColor != rhs_storage._outlineColor {return false}
        if _storage._translate != rhs_storage._translate {return false}
        if _storage._hasTranslate_p != rhs_storage._hasTranslate_p {return false}
        if _storage._translateAnchor != rhs_storage._translateAnchor {return false}
        if _storage._hasTranslateAnchor_p != rhs_storage._hasTranslateAnchor_p {return false}
        if _storage._pattern != rhs_storage._pattern {return false}
        if _storage._opacityTransition != rhs_storage._opacityTransition {return false}
        if _storage._colorTransition != rhs_storage._colorTransition {return false}
        if _storage._outlineColorTransition != rhs_storage._outlineColorTransition {return false}
        if _storage._translateTransition != rhs_storage._translateTransition {return false}
        if _storage._patternTransition != rhs_storage._patternTransition {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Tophap_MapboxGl_Proto_Operations.Update.Heatmap: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Tophap_MapboxGl_Proto_Operations.Update.protoMessageName + ".Heatmap"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visible"),
    2: .standard(proto: "min_zoom"),
    3: .standard(proto: "max_zoom"),
    4: .same(proto: "radius"),
    5: .same(proto: "weight"),
    6: .same(proto: "intensity"),
    7: .same(proto: "color"),
    8: .same(proto: "opacity"),
    9: .standard(proto: "radius_transition"),
    10: .standard(proto: "intensity_transition"),
    11: .standard(proto: "opacity_transition"),
  ]

  fileprivate class _StorageClass {
    var _visible: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _minZoom: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _maxZoom: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radius: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _weight: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _intensity: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _color: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
    var _opacity: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _radiusTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _intensityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _opacityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _visible = source._visible
      _minZoom = source._minZoom
      _maxZoom = source._maxZoom
      _radius = source._radius
      _weight = source._weight
      _intensity = source._intensity
      _color = source._color
      _opacity = source._opacity
      _radiusTransition = source._radiusTransition
      _intensityTransition = source._intensityTransition
      _opacityTransition = source._opacityTransition
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._visible)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._minZoom)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._maxZoom)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._radius)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._weight)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._intensity)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._color)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._opacity)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._radiusTransition)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._intensityTransition)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._opacityTransition)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._visible {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._minZoom {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._maxZoom {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._radius {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._weight {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._intensity {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._color {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._opacity {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._radiusTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._intensityTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._opacityTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_MapboxGl_Proto_Operations.Update.Heatmap, rhs: Com_Tophap_MapboxGl_Proto_Operations.Update.Heatmap) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._visible != rhs_storage._visible {return false}
        if _storage._minZoom != rhs_storage._minZoom {return false}
        if _storage._maxZoom != rhs_storage._maxZoom {return false}
        if _storage._radius != rhs_storage._radius {return false}
        if _storage._weight != rhs_storage._weight {return false}
        if _storage._intensity != rhs_storage._intensity {return false}
        if _storage._color != rhs_storage._color {return false}
        if _storage._opacity != rhs_storage._opacity {return false}
        if _storage._radiusTransition != rhs_storage._radiusTransition {return false}
        if _storage._intensityTransition != rhs_storage._intensityTransition {return false}
        if _storage._opacityTransition != rhs_storage._opacityTransition {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Tophap_MapboxGl_Proto_Operations.Update.Hillshade: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Tophap_MapboxGl_Proto_Operations.Update.protoMessageName + ".Hillshade"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visible"),
    2: .standard(proto: "min_zoom"),
    3: .standard(proto: "max_zoom"),
    4: .standard(proto: "illumination_direction"),
    5: .standard(proto: "illumination_anchor"),
    6: .standard(proto: "has_illumination_anchor"),
    7: .same(proto: "exaggeration"),
    8: .standard(proto: "shadow_color"),
    9: .standard(proto: "highlight_color"),
    10: .standard(proto: "accent_color"),
    11: .standard(proto: "exaggeration_transition"),
    12: .standard(proto: "shadow_color_transition"),
    13: .standard(proto: "highlight_color_transition"),
    14: .standard(proto: "accent_color_transition"),
  ]

  fileprivate class _StorageClass {
    var _visible: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _minZoom: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _maxZoom: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _illuminationDirection: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _illuminationAnchor: Com_Tophap_MapboxGl_Proto_TranslateAnchor = .map
    var _hasIlluminationAnchor_p: Bool = false
    var _exaggeration: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _shadowColor: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
    var _highlightColor: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
    var _accentColor: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
    var _exaggerationTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _shadowColorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _highlightColorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _accentColorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _visible = source._visible
      _minZoom = source._minZoom
      _maxZoom = source._maxZoom
      _illuminationDirection = source._illuminationDirection
      _illuminationAnchor = source._illuminationAnchor
      _hasIlluminationAnchor_p = source._hasIlluminationAnchor_p
      _exaggeration = source._exaggeration
      _shadowColor = source._shadowColor
      _highlightColor = source._highlightColor
      _accentColor = source._accentColor
      _exaggerationTransition = source._exaggerationTransition
      _shadowColorTransition = source._shadowColorTransition
      _highlightColorTransition = source._highlightColorTransition
      _accentColorTransition = source._accentColorTransition
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._visible)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._minZoom)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._maxZoom)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._illuminationDirection)
        case 5: try decoder.decodeSingularEnumField(value: &_storage._illuminationAnchor)
        case 6: try decoder.decodeSingularBoolField(value: &_storage._hasIlluminationAnchor_p)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._exaggeration)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._shadowColor)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._highlightColor)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._accentColor)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._exaggerationTransition)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._shadowColorTransition)
        case 13: try decoder.decodeSingularMessageField(value: &_storage._highlightColorTransition)
        case 14: try decoder.decodeSingularMessageField(value: &_storage._accentColorTransition)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._visible {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._minZoom {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._maxZoom {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._illuminationDirection {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if _storage._illuminationAnchor != .map {
        try visitor.visitSingularEnumField(value: _storage._illuminationAnchor, fieldNumber: 5)
      }
      if _storage._hasIlluminationAnchor_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasIlluminationAnchor_p, fieldNumber: 6)
      }
      if let v = _storage._exaggeration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._shadowColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._highlightColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._accentColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._exaggerationTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._shadowColorTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if let v = _storage._highlightColorTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if let v = _storage._accentColorTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_MapboxGl_Proto_Operations.Update.Hillshade, rhs: Com_Tophap_MapboxGl_Proto_Operations.Update.Hillshade) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._visible != rhs_storage._visible {return false}
        if _storage._minZoom != rhs_storage._minZoom {return false}
        if _storage._maxZoom != rhs_storage._maxZoom {return false}
        if _storage._illuminationDirection != rhs_storage._illuminationDirection {return false}
        if _storage._illuminationAnchor != rhs_storage._illuminationAnchor {return false}
        if _storage._hasIlluminationAnchor_p != rhs_storage._hasIlluminationAnchor_p {return false}
        if _storage._exaggeration != rhs_storage._exaggeration {return false}
        if _storage._shadowColor != rhs_storage._shadowColor {return false}
        if _storage._highlightColor != rhs_storage._highlightColor {return false}
        if _storage._accentColor != rhs_storage._accentColor {return false}
        if _storage._exaggerationTransition != rhs_storage._exaggerationTransition {return false}
        if _storage._shadowColorTransition != rhs_storage._shadowColorTransition {return false}
        if _storage._highlightColorTransition != rhs_storage._highlightColorTransition {return false}
        if _storage._accentColorTransition != rhs_storage._accentColorTransition {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Tophap_MapboxGl_Proto_Operations.Update.Line: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Tophap_MapboxGl_Proto_Operations.Update.protoMessageName + ".Line"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visible"),
    2: .standard(proto: "min_zoom"),
    3: .standard(proto: "max_zoom"),
    4: .same(proto: "cap"),
    5: .standard(proto: "has_cap"),
    6: .same(proto: "join"),
    7: .standard(proto: "has_join"),
    8: .standard(proto: "miter_limit"),
    9: .standard(proto: "round_limit"),
    10: .same(proto: "opacity"),
    11: .same(proto: "color"),
    12: .same(proto: "translate"),
    13: .standard(proto: "has_translate"),
    14: .standard(proto: "translate_anchor"),
    15: .standard(proto: "has_translate_anchor"),
    16: .same(proto: "width"),
    17: .standard(proto: "gap_width"),
    18: .same(proto: "offset"),
    19: .same(proto: "blur"),
    20: .same(proto: "dasharray"),
    21: .standard(proto: "has_dasharray"),
    22: .same(proto: "pattern"),
    23: .same(proto: "gradient"),
    24: .standard(proto: "opacity_transition"),
    25: .standard(proto: "color_transition"),
    26: .standard(proto: "translate_transition"),
    27: .standard(proto: "width_transition"),
    28: .standard(proto: "gap_width_transition"),
    29: .standard(proto: "offset_transition"),
    30: .standard(proto: "blur_transition"),
    31: .standard(proto: "dasharray_transition"),
    32: .standard(proto: "pattern_transition"),
  ]

  fileprivate class _StorageClass {
    var _visible: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _minZoom: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _maxZoom: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _cap: Com_Tophap_MapboxGl_Proto_Layer.Line.Cap = .butt
    var _hasCap_p: Bool = false
    var _join: Com_Tophap_MapboxGl_Proto_Layer.Line.Join = .miter
    var _hasJoin_p: Bool = false
    var _miterLimit: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _roundLimit: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _opacity: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _color: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
    var _translate: [Float] = []
    var _hasTranslate_p: Bool = false
    var _translateAnchor: Com_Tophap_MapboxGl_Proto_TranslateAnchor = .map
    var _hasTranslateAnchor_p: Bool = false
    var _width: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _gapWidth: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _offset: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _blur: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _dasharray: [Float] = []
    var _hasDasharray_p: Bool = false
    var _pattern: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _gradient: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
    var _opacityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _colorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _translateTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _widthTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _gapWidthTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _offsetTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _blurTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _dasharrayTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _patternTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _visible = source._visible
      _minZoom = source._minZoom
      _maxZoom = source._maxZoom
      _cap = source._cap
      _hasCap_p = source._hasCap_p
      _join = source._join
      _hasJoin_p = source._hasJoin_p
      _miterLimit = source._miterLimit
      _roundLimit = source._roundLimit
      _opacity = source._opacity
      _color = source._color
      _translate = source._translate
      _hasTranslate_p = source._hasTranslate_p
      _translateAnchor = source._translateAnchor
      _hasTranslateAnchor_p = source._hasTranslateAnchor_p
      _width = source._width
      _gapWidth = source._gapWidth
      _offset = source._offset
      _blur = source._blur
      _dasharray = source._dasharray
      _hasDasharray_p = source._hasDasharray_p
      _pattern = source._pattern
      _gradient = source._gradient
      _opacityTransition = source._opacityTransition
      _colorTransition = source._colorTransition
      _translateTransition = source._translateTransition
      _widthTransition = source._widthTransition
      _gapWidthTransition = source._gapWidthTransition
      _offsetTransition = source._offsetTransition
      _blurTransition = source._blurTransition
      _dasharrayTransition = source._dasharrayTransition
      _patternTransition = source._patternTransition
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._visible)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._minZoom)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._maxZoom)
        case 4: try decoder.decodeSingularEnumField(value: &_storage._cap)
        case 5: try decoder.decodeSingularBoolField(value: &_storage._hasCap_p)
        case 6: try decoder.decodeSingularEnumField(value: &_storage._join)
        case 7: try decoder.decodeSingularBoolField(value: &_storage._hasJoin_p)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._miterLimit)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._roundLimit)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._opacity)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._color)
        case 12: try decoder.decodeRepeatedFloatField(value: &_storage._translate)
        case 13: try decoder.decodeSingularBoolField(value: &_storage._hasTranslate_p)
        case 14: try decoder.decodeSingularEnumField(value: &_storage._translateAnchor)
        case 15: try decoder.decodeSingularBoolField(value: &_storage._hasTranslateAnchor_p)
        case 16: try decoder.decodeSingularMessageField(value: &_storage._width)
        case 17: try decoder.decodeSingularMessageField(value: &_storage._gapWidth)
        case 18: try decoder.decodeSingularMessageField(value: &_storage._offset)
        case 19: try decoder.decodeSingularMessageField(value: &_storage._blur)
        case 20: try decoder.decodeRepeatedFloatField(value: &_storage._dasharray)
        case 21: try decoder.decodeSingularBoolField(value: &_storage._hasDasharray_p)
        case 22: try decoder.decodeSingularMessageField(value: &_storage._pattern)
        case 23: try decoder.decodeSingularMessageField(value: &_storage._gradient)
        case 24: try decoder.decodeSingularMessageField(value: &_storage._opacityTransition)
        case 25: try decoder.decodeSingularMessageField(value: &_storage._colorTransition)
        case 26: try decoder.decodeSingularMessageField(value: &_storage._translateTransition)
        case 27: try decoder.decodeSingularMessageField(value: &_storage._widthTransition)
        case 28: try decoder.decodeSingularMessageField(value: &_storage._gapWidthTransition)
        case 29: try decoder.decodeSingularMessageField(value: &_storage._offsetTransition)
        case 30: try decoder.decodeSingularMessageField(value: &_storage._blurTransition)
        case 31: try decoder.decodeSingularMessageField(value: &_storage._dasharrayTransition)
        case 32: try decoder.decodeSingularMessageField(value: &_storage._patternTransition)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._visible {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._minZoom {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._maxZoom {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _storage._cap != .butt {
        try visitor.visitSingularEnumField(value: _storage._cap, fieldNumber: 4)
      }
      if _storage._hasCap_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasCap_p, fieldNumber: 5)
      }
      if _storage._join != .miter {
        try visitor.visitSingularEnumField(value: _storage._join, fieldNumber: 6)
      }
      if _storage._hasJoin_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasJoin_p, fieldNumber: 7)
      }
      if let v = _storage._miterLimit {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._roundLimit {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._opacity {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._color {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if !_storage._translate.isEmpty {
        try visitor.visitPackedFloatField(value: _storage._translate, fieldNumber: 12)
      }
      if _storage._hasTranslate_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasTranslate_p, fieldNumber: 13)
      }
      if _storage._translateAnchor != .map {
        try visitor.visitSingularEnumField(value: _storage._translateAnchor, fieldNumber: 14)
      }
      if _storage._hasTranslateAnchor_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasTranslateAnchor_p, fieldNumber: 15)
      }
      if let v = _storage._width {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
      if let v = _storage._gapWidth {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
      if let v = _storage._offset {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if let v = _storage._blur {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      }
      if !_storage._dasharray.isEmpty {
        try visitor.visitPackedFloatField(value: _storage._dasharray, fieldNumber: 20)
      }
      if _storage._hasDasharray_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasDasharray_p, fieldNumber: 21)
      }
      if let v = _storage._pattern {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      }
      if let v = _storage._gradient {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      }
      if let v = _storage._opacityTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      }
      if let v = _storage._colorTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
      }
      if let v = _storage._translateTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      }
      if let v = _storage._widthTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
      }
      if let v = _storage._gapWidthTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 28)
      }
      if let v = _storage._offsetTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 29)
      }
      if let v = _storage._blurTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
      }
      if let v = _storage._dasharrayTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 31)
      }
      if let v = _storage._patternTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 32)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_MapboxGl_Proto_Operations.Update.Line, rhs: Com_Tophap_MapboxGl_Proto_Operations.Update.Line) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._visible != rhs_storage._visible {return false}
        if _storage._minZoom != rhs_storage._minZoom {return false}
        if _storage._maxZoom != rhs_storage._maxZoom {return false}
        if _storage._cap != rhs_storage._cap {return false}
        if _storage._hasCap_p != rhs_storage._hasCap_p {return false}
        if _storage._join != rhs_storage._join {return false}
        if _storage._hasJoin_p != rhs_storage._hasJoin_p {return false}
        if _storage._miterLimit != rhs_storage._miterLimit {return false}
        if _storage._roundLimit != rhs_storage._roundLimit {return false}
        if _storage._opacity != rhs_storage._opacity {return false}
        if _storage._color != rhs_storage._color {return false}
        if _storage._translate != rhs_storage._translate {return false}
        if _storage._hasTranslate_p != rhs_storage._hasTranslate_p {return false}
        if _storage._translateAnchor != rhs_storage._translateAnchor {return false}
        if _storage._hasTranslateAnchor_p != rhs_storage._hasTranslateAnchor_p {return false}
        if _storage._width != rhs_storage._width {return false}
        if _storage._gapWidth != rhs_storage._gapWidth {return false}
        if _storage._offset != rhs_storage._offset {return false}
        if _storage._blur != rhs_storage._blur {return false}
        if _storage._dasharray != rhs_storage._dasharray {return false}
        if _storage._hasDasharray_p != rhs_storage._hasDasharray_p {return false}
        if _storage._pattern != rhs_storage._pattern {return false}
        if _storage._gradient != rhs_storage._gradient {return false}
        if _storage._opacityTransition != rhs_storage._opacityTransition {return false}
        if _storage._colorTransition != rhs_storage._colorTransition {return false}
        if _storage._translateTransition != rhs_storage._translateTransition {return false}
        if _storage._widthTransition != rhs_storage._widthTransition {return false}
        if _storage._gapWidthTransition != rhs_storage._gapWidthTransition {return false}
        if _storage._offsetTransition != rhs_storage._offsetTransition {return false}
        if _storage._blurTransition != rhs_storage._blurTransition {return false}
        if _storage._dasharrayTransition != rhs_storage._dasharrayTransition {return false}
        if _storage._patternTransition != rhs_storage._patternTransition {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Tophap_MapboxGl_Proto_Operations.Update.Symbol: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Tophap_MapboxGl_Proto_Operations.Update.protoMessageName + ".Symbol"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visible"),
    2: .standard(proto: "min_zoom"),
    3: .standard(proto: "max_zoom"),
    4: .standard(proto: "symbol_placement"),
    5: .standard(proto: "has_symbol_placement"),
    6: .standard(proto: "symbol_spacing"),
    7: .standard(proto: "symbol_avoid_edges"),
    8: .standard(proto: "symbol_z_order"),
    9: .standard(proto: "has_symbol_z_order"),
    10: .standard(proto: "icon_allow_overlap"),
    11: .standard(proto: "icon_ignore_placement"),
    12: .standard(proto: "icon_optional"),
    13: .standard(proto: "icon_rotation_alignment"),
    14: .standard(proto: "has_icon_rotation_alignment"),
    15: .standard(proto: "icon_size"),
    16: .standard(proto: "icon_text_fit"),
    17: .standard(proto: "has_icon_text_fit"),
    18: .standard(proto: "icon_text_fit_padding"),
    19: .standard(proto: "has_icon_text_fit_padding"),
    20: .standard(proto: "icon_image"),
    21: .standard(proto: "icon_rotate"),
    22: .standard(proto: "icon_padding"),
    23: .standard(proto: "icon_keep_upright"),
    24: .standard(proto: "icon_offset"),
    25: .standard(proto: "has_icon_offset"),
    26: .standard(proto: "icon_anchor"),
    27: .standard(proto: "has_icon_anchor"),
    28: .standard(proto: "icon_pitch_alignment"),
    29: .standard(proto: "has_icon_pitch_alignment"),
    30: .standard(proto: "text_pitch_alignment"),
    31: .standard(proto: "has_text_pitch_alignment"),
    32: .standard(proto: "text_rotation_alignment"),
    33: .standard(proto: "has_text_rotation_alignment"),
    34: .standard(proto: "text_field"),
    35: .standard(proto: "has_text_field"),
    36: .standard(proto: "text_font"),
    37: .standard(proto: "has_text_font"),
    38: .standard(proto: "text_size"),
    39: .standard(proto: "text_max_width"),
    40: .standard(proto: "text_line_height"),
    41: .standard(proto: "text_letter_spacing"),
    42: .standard(proto: "text_justify"),
    43: .standard(proto: "has_text_justify"),
    44: .standard(proto: "text_radial_offset"),
    45: .standard(proto: "text_variable_anchor"),
    46: .standard(proto: "has_text_variable_anchor"),
    47: .standard(proto: "text_anchor"),
    48: .standard(proto: "has_text_anchor"),
    49: .standard(proto: "text_max_angle"),
    50: .standard(proto: "text_rotate"),
    51: .standard(proto: "text_padding"),
    52: .standard(proto: "text_keep_upright"),
    53: .standard(proto: "text_transform"),
    54: .standard(proto: "has_text_transform"),
    55: .standard(proto: "text_offset"),
    56: .standard(proto: "has_text_offset"),
    57: .standard(proto: "text_allow_overlap"),
    58: .standard(proto: "text_ignore_placement"),
    59: .standard(proto: "text_optional"),
    60: .standard(proto: "icon_opacity"),
    61: .standard(proto: "icon_color"),
    62: .standard(proto: "icon_halo_color"),
    63: .standard(proto: "icon_halo_width"),
    64: .standard(proto: "icon_halo_blur"),
    65: .standard(proto: "icon_translate"),
    66: .standard(proto: "has_icon_translate"),
    67: .standard(proto: "icon_translate_anchor"),
    68: .standard(proto: "has_icon_translate_anchor"),
    69: .standard(proto: "text_opacity"),
    70: .standard(proto: "text_color"),
    71: .standard(proto: "text_halo_color"),
    72: .standard(proto: "text_halo_width"),
    73: .standard(proto: "text_halo_blur"),
    74: .standard(proto: "text_translate"),
    75: .standard(proto: "has_text_translate"),
    76: .standard(proto: "text_translate_anchor"),
    77: .standard(proto: "has_text_translate_anchor"),
    78: .standard(proto: "icon_opacity_transition"),
    79: .standard(proto: "icon_color_transition"),
    80: .standard(proto: "icon_halo_color_transition"),
    81: .standard(proto: "icon_halo_width_transition"),
    82: .standard(proto: "icon_halo_blur_transition"),
    83: .standard(proto: "icon_translate_transition"),
    84: .standard(proto: "text_opacity_transition"),
    85: .standard(proto: "text_color_transition"),
    86: .standard(proto: "text_halo_color_transition"),
    87: .standard(proto: "text_halo_width_transition"),
    88: .standard(proto: "text_halo_blur_transition"),
    89: .standard(proto: "text_translate_transition"),
  ]

  fileprivate class _StorageClass {
    var _visible: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _minZoom: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _maxZoom: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _symbolPlacement: Com_Tophap_MapboxGl_Proto_Layer.Symbol.Placement = .point
    var _hasSymbolPlacement_p: Bool = false
    var _symbolSpacing: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _symbolAvoidEdges: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _symbolZOrder: Com_Tophap_MapboxGl_Proto_Layer.Symbol.ZOrder = .auto
    var _hasSymbolZOrder_p: Bool = false
    var _iconAllowOverlap: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _iconIgnorePlacement: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _iconOptional: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _iconRotationAlignment: Com_Tophap_MapboxGl_Proto_Layer.Symbol.Alignment = .auto
    var _hasIconRotationAlignment_p: Bool = false
    var _iconSize: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _iconTextFit: Com_Tophap_MapboxGl_Proto_Layer.Symbol.TextFit = .none
    var _hasIconTextFit_p: Bool = false
    var _iconTextFitPadding: [Float] = []
    var _hasIconTextFitPadding_p: Bool = false
    var _iconImage: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _iconRotate: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _iconPadding: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _iconKeepUpright: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _iconOffset: [Float] = []
    var _hasIconOffset_p: Bool = false
    var _iconAnchor: Com_Tophap_MapboxGl_Proto_PositionAnchor = .positionCenter
    var _hasIconAnchor_p: Bool = false
    var _iconPitchAlignment: Com_Tophap_MapboxGl_Proto_Layer.Symbol.Alignment = .auto
    var _hasIconPitchAlignment_p: Bool = false
    var _textPitchAlignment: Com_Tophap_MapboxGl_Proto_Layer.Symbol.Alignment = .auto
    var _hasTextPitchAlignment_p: Bool = false
    var _textRotationAlignment: Com_Tophap_MapboxGl_Proto_Layer.Symbol.Alignment = .auto
    var _hasTextRotationAlignment_p: Bool = false
    var _textField: [Com_Tophap_MapboxGl_Proto_FormattedSection] = []
    var _hasTextField_p: Bool = false
    var _textFont: [String] = []
    var _hasTextFont_p: Bool = false
    var _textSize: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _textMaxWidth: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _textLineHeight: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _textLetterSpacing: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _textJustify: Com_Tophap_MapboxGl_Proto_Layer.Symbol.TextJustify = .justifyAuto
    var _hasTextJustify_p: Bool = false
    var _textRadialOffset: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _textVariableAnchor: [Com_Tophap_MapboxGl_Proto_PositionAnchor] = []
    var _hasTextVariableAnchor_p: Bool = false
    var _textAnchor: Com_Tophap_MapboxGl_Proto_PositionAnchor = .positionCenter
    var _hasTextAnchor_p: Bool = false
    var _textMaxAngle: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _textRotate: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _textPadding: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _textKeepUpright: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _textTransform: Com_Tophap_MapboxGl_Proto_Layer.Symbol.TextTransform = .transformNone
    var _hasTextTransform_p: Bool = false
    var _textOffset: [Float] = []
    var _hasTextOffset_p: Bool = false
    var _textAllowOverlap: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _textIgnorePlacement: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _textOptional: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
    var _iconOpacity: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _iconColor: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
    var _iconHaloColor: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
    var _iconHaloWidth: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _iconHaloBlur: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _iconTranslate: [Float] = []
    var _hasIconTranslate_p: Bool = false
    var _iconTranslateAnchor: Com_Tophap_MapboxGl_Proto_TranslateAnchor = .map
    var _hasIconTranslateAnchor_p: Bool = false
    var _textOpacity: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _textColor: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
    var _textHaloColor: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
    var _textHaloWidth: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _textHaloBlur: SwiftProtobuf.Google_Protobuf_FloatValue? = nil
    var _textTranslate: [Float] = []
    var _hasTextTranslate_p: Bool = false
    var _textTranslateAnchor: Com_Tophap_MapboxGl_Proto_TranslateAnchor = .map
    var _hasTextTranslateAnchor_p: Bool = false
    var _iconOpacityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _iconColorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _iconHaloColorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _iconHaloWidthTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _iconHaloBlurTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _iconTranslateTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _textOpacityTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _textColorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _textHaloColorTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _textHaloWidthTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _textHaloBlurTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil
    var _textTranslateTransition: Com_Tophap_MapboxGl_Proto_TransitionOptions? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _visible = source._visible
      _minZoom = source._minZoom
      _maxZoom = source._maxZoom
      _symbolPlacement = source._symbolPlacement
      _hasSymbolPlacement_p = source._hasSymbolPlacement_p
      _symbolSpacing = source._symbolSpacing
      _symbolAvoidEdges = source._symbolAvoidEdges
      _symbolZOrder = source._symbolZOrder
      _hasSymbolZOrder_p = source._hasSymbolZOrder_p
      _iconAllowOverlap = source._iconAllowOverlap
      _iconIgnorePlacement = source._iconIgnorePlacement
      _iconOptional = source._iconOptional
      _iconRotationAlignment = source._iconRotationAlignment
      _hasIconRotationAlignment_p = source._hasIconRotationAlignment_p
      _iconSize = source._iconSize
      _iconTextFit = source._iconTextFit
      _hasIconTextFit_p = source._hasIconTextFit_p
      _iconTextFitPadding = source._iconTextFitPadding
      _hasIconTextFitPadding_p = source._hasIconTextFitPadding_p
      _iconImage = source._iconImage
      _iconRotate = source._iconRotate
      _iconPadding = source._iconPadding
      _iconKeepUpright = source._iconKeepUpright
      _iconOffset = source._iconOffset
      _hasIconOffset_p = source._hasIconOffset_p
      _iconAnchor = source._iconAnchor
      _hasIconAnchor_p = source._hasIconAnchor_p
      _iconPitchAlignment = source._iconPitchAlignment
      _hasIconPitchAlignment_p = source._hasIconPitchAlignment_p
      _textPitchAlignment = source._textPitchAlignment
      _hasTextPitchAlignment_p = source._hasTextPitchAlignment_p
      _textRotationAlignment = source._textRotationAlignment
      _hasTextRotationAlignment_p = source._hasTextRotationAlignment_p
      _textField = source._textField
      _hasTextField_p = source._hasTextField_p
      _textFont = source._textFont
      _hasTextFont_p = source._hasTextFont_p
      _textSize = source._textSize
      _textMaxWidth = source._textMaxWidth
      _textLineHeight = source._textLineHeight
      _textLetterSpacing = source._textLetterSpacing
      _textJustify = source._textJustify
      _hasTextJustify_p = source._hasTextJustify_p
      _textRadialOffset = source._textRadialOffset
      _textVariableAnchor = source._textVariableAnchor
      _hasTextVariableAnchor_p = source._hasTextVariableAnchor_p
      _textAnchor = source._textAnchor
      _hasTextAnchor_p = source._hasTextAnchor_p
      _textMaxAngle = source._textMaxAngle
      _textRotate = source._textRotate
      _textPadding = source._textPadding
      _textKeepUpright = source._textKeepUpright
      _textTransform = source._textTransform
      _hasTextTransform_p = source._hasTextTransform_p
      _textOffset = source._textOffset
      _hasTextOffset_p = source._hasTextOffset_p
      _textAllowOverlap = source._textAllowOverlap
      _textIgnorePlacement = source._textIgnorePlacement
      _textOptional = source._textOptional
      _iconOpacity = source._iconOpacity
      _iconColor = source._iconColor
      _iconHaloColor = source._iconHaloColor
      _iconHaloWidth = source._iconHaloWidth
      _iconHaloBlur = source._iconHaloBlur
      _iconTranslate = source._iconTranslate
      _hasIconTranslate_p = source._hasIconTranslate_p
      _iconTranslateAnchor = source._iconTranslateAnchor
      _hasIconTranslateAnchor_p = source._hasIconTranslateAnchor_p
      _textOpacity = source._textOpacity
      _textColor = source._textColor
      _textHaloColor = source._textHaloColor
      _textHaloWidth = source._textHaloWidth
      _textHaloBlur = source._textHaloBlur
      _textTranslate = source._textTranslate
      _hasTextTranslate_p = source._hasTextTranslate_p
      _textTranslateAnchor = source._textTranslateAnchor
      _hasTextTranslateAnchor_p = source._hasTextTranslateAnchor_p
      _iconOpacityTransition = source._iconOpacityTransition
      _iconColorTransition = source._iconColorTransition
      _iconHaloColorTransition = source._iconHaloColorTransition
      _iconHaloWidthTransition = source._iconHaloWidthTransition
      _iconHaloBlurTransition = source._iconHaloBlurTransition
      _iconTranslateTransition = source._iconTranslateTransition
      _textOpacityTransition = source._textOpacityTransition
      _textColorTransition = source._textColorTransition
      _textHaloColorTransition = source._textHaloColorTransition
      _textHaloWidthTransition = source._textHaloWidthTransition
      _textHaloBlurTransition = source._textHaloBlurTransition
      _textTranslateTransition = source._textTranslateTransition
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._visible)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._minZoom)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._maxZoom)
        case 4: try decoder.decodeSingularEnumField(value: &_storage._symbolPlacement)
        case 5: try decoder.decodeSingularBoolField(value: &_storage._hasSymbolPlacement_p)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._symbolSpacing)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._symbolAvoidEdges)
        case 8: try decoder.decodeSingularEnumField(value: &_storage._symbolZOrder)
        case 9: try decoder.decodeSingularBoolField(value: &_storage._hasSymbolZOrder_p)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._iconAllowOverlap)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._iconIgnorePlacement)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._iconOptional)
        case 13: try decoder.decodeSingularEnumField(value: &_storage._iconRotationAlignment)
        case 14: try decoder.decodeSingularBoolField(value: &_storage._hasIconRotationAlignment_p)
        case 15: try decoder.decodeSingularMessageField(value: &_storage._iconSize)
        case 16: try decoder.decodeSingularEnumField(value: &_storage._iconTextFit)
        case 17: try decoder.decodeSingularBoolField(value: &_storage._hasIconTextFit_p)
        case 18: try decoder.decodeRepeatedFloatField(value: &_storage._iconTextFitPadding)
        case 19: try decoder.decodeSingularBoolField(value: &_storage._hasIconTextFitPadding_p)
        case 20: try decoder.decodeSingularMessageField(value: &_storage._iconImage)
        case 21: try decoder.decodeSingularMessageField(value: &_storage._iconRotate)
        case 22: try decoder.decodeSingularMessageField(value: &_storage._iconPadding)
        case 23: try decoder.decodeSingularMessageField(value: &_storage._iconKeepUpright)
        case 24: try decoder.decodeRepeatedFloatField(value: &_storage._iconOffset)
        case 25: try decoder.decodeSingularBoolField(value: &_storage._hasIconOffset_p)
        case 26: try decoder.decodeSingularEnumField(value: &_storage._iconAnchor)
        case 27: try decoder.decodeSingularBoolField(value: &_storage._hasIconAnchor_p)
        case 28: try decoder.decodeSingularEnumField(value: &_storage._iconPitchAlignment)
        case 29: try decoder.decodeSingularBoolField(value: &_storage._hasIconPitchAlignment_p)
        case 30: try decoder.decodeSingularEnumField(value: &_storage._textPitchAlignment)
        case 31: try decoder.decodeSingularBoolField(value: &_storage._hasTextPitchAlignment_p)
        case 32: try decoder.decodeSingularEnumField(value: &_storage._textRotationAlignment)
        case 33: try decoder.decodeSingularBoolField(value: &_storage._hasTextRotationAlignment_p)
        case 34: try decoder.decodeRepeatedMessageField(value: &_storage._textField)
        case 35: try decoder.decodeSingularBoolField(value: &_storage._hasTextField_p)
        case 36: try decoder.decodeRepeatedStringField(value: &_storage._textFont)
        case 37: try decoder.decodeSingularBoolField(value: &_storage._hasTextFont_p)
        case 38: try decoder.decodeSingularMessageField(value: &_storage._textSize)
        case 39: try decoder.decodeSingularMessageField(value: &_storage._textMaxWidth)
        case 40: try decoder.decodeSingularMessageField(value: &_storage._textLineHeight)
        case 41: try decoder.decodeSingularMessageField(value: &_storage._textLetterSpacing)
        case 42: try decoder.decodeSingularEnumField(value: &_storage._textJustify)
        case 43: try decoder.decodeSingularBoolField(value: &_storage._hasTextJustify_p)
        case 44: try decoder.decodeSingularMessageField(value: &_storage._textRadialOffset)
        case 45: try decoder.decodeRepeatedEnumField(value: &_storage._textVariableAnchor)
        case 46: try decoder.decodeSingularBoolField(value: &_storage._hasTextVariableAnchor_p)
        case 47: try decoder.decodeSingularEnumField(value: &_storage._textAnchor)
        case 48: try decoder.decodeSingularBoolField(value: &_storage._hasTextAnchor_p)
        case 49: try decoder.decodeSingularMessageField(value: &_storage._textMaxAngle)
        case 50: try decoder.decodeSingularMessageField(value: &_storage._textRotate)
        case 51: try decoder.decodeSingularMessageField(value: &_storage._textPadding)
        case 52: try decoder.decodeSingularMessageField(value: &_storage._textKeepUpright)
        case 53: try decoder.decodeSingularEnumField(value: &_storage._textTransform)
        case 54: try decoder.decodeSingularBoolField(value: &_storage._hasTextTransform_p)
        case 55: try decoder.decodeRepeatedFloatField(value: &_storage._textOffset)
        case 56: try decoder.decodeSingularBoolField(value: &_storage._hasTextOffset_p)
        case 57: try decoder.decodeSingularMessageField(value: &_storage._textAllowOverlap)
        case 58: try decoder.decodeSingularMessageField(value: &_storage._textIgnorePlacement)
        case 59: try decoder.decodeSingularMessageField(value: &_storage._textOptional)
        case 60: try decoder.decodeSingularMessageField(value: &_storage._iconOpacity)
        case 61: try decoder.decodeSingularMessageField(value: &_storage._iconColor)
        case 62: try decoder.decodeSingularMessageField(value: &_storage._iconHaloColor)
        case 63: try decoder.decodeSingularMessageField(value: &_storage._iconHaloWidth)
        case 64: try decoder.decodeSingularMessageField(value: &_storage._iconHaloBlur)
        case 65: try decoder.decodeRepeatedFloatField(value: &_storage._iconTranslate)
        case 66: try decoder.decodeSingularBoolField(value: &_storage._hasIconTranslate_p)
        case 67: try decoder.decodeSingularEnumField(value: &_storage._iconTranslateAnchor)
        case 68: try decoder.decodeSingularBoolField(value: &_storage._hasIconTranslateAnchor_p)
        case 69: try decoder.decodeSingularMessageField(value: &_storage._textOpacity)
        case 70: try decoder.decodeSingularMessageField(value: &_storage._textColor)
        case 71: try decoder.decodeSingularMessageField(value: &_storage._textHaloColor)
        case 72: try decoder.decodeSingularMessageField(value: &_storage._textHaloWidth)
        case 73: try decoder.decodeSingularMessageField(value: &_storage._textHaloBlur)
        case 74: try decoder.decodeRepeatedFloatField(value: &_storage._textTranslate)
        case 75: try decoder.decodeSingularBoolField(value: &_storage._hasTextTranslate_p)
        case 76: try decoder.decodeSingularEnumField(value: &_storage._textTranslateAnchor)
        case 77: try decoder.decodeSingularBoolField(value: &_storage._hasTextTranslateAnchor_p)
        case 78: try decoder.decodeSingularMessageField(value: &_storage._iconOpacityTransition)
        case 79: try decoder.decodeSingularMessageField(value: &_storage._iconColorTransition)
        case 80: try decoder.decodeSingularMessageField(value: &_storage._iconHaloColorTransition)
        case 81: try decoder.decodeSingularMessageField(value: &_storage._iconHaloWidthTransition)
        case 82: try decoder.decodeSingularMessageField(value: &_storage._iconHaloBlurTransition)
        case 83: try decoder.decodeSingularMessageField(value: &_storage._iconTranslateTransition)
        case 84: try decoder.decodeSingularMessageField(value: &_storage._textOpacityTransition)
        case 85: try decoder.decodeSingularMessageField(value: &_storage._textColorTransition)
        case 86: try decoder.decodeSingularMessageField(value: &_storage._textHaloColorTransition)
        case 87: try decoder.decodeSingularMessageField(value: &_storage._textHaloWidthTransition)
        case 88: try decoder.decodeSingularMessageField(value: &_storage._textHaloBlurTransition)
        case 89: try decoder.decodeSingularMessageField(value: &_storage._textTranslateTransition)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._visible {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._minZoom {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._maxZoom {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _storage._symbolPlacement != .point {
        try visitor.visitSingularEnumField(value: _storage._symbolPlacement, fieldNumber: 4)
      }
      if _storage._hasSymbolPlacement_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasSymbolPlacement_p, fieldNumber: 5)
      }
      if let v = _storage._symbolSpacing {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._symbolAvoidEdges {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if _storage._symbolZOrder != .auto {
        try visitor.visitSingularEnumField(value: _storage._symbolZOrder, fieldNumber: 8)
      }
      if _storage._hasSymbolZOrder_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasSymbolZOrder_p, fieldNumber: 9)
      }
      if let v = _storage._iconAllowOverlap {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._iconIgnorePlacement {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._iconOptional {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if _storage._iconRotationAlignment != .auto {
        try visitor.visitSingularEnumField(value: _storage._iconRotationAlignment, fieldNumber: 13)
      }
      if _storage._hasIconRotationAlignment_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasIconRotationAlignment_p, fieldNumber: 14)
      }
      if let v = _storage._iconSize {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
      if _storage._iconTextFit != .none {
        try visitor.visitSingularEnumField(value: _storage._iconTextFit, fieldNumber: 16)
      }
      if _storage._hasIconTextFit_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasIconTextFit_p, fieldNumber: 17)
      }
      if !_storage._iconTextFitPadding.isEmpty {
        try visitor.visitPackedFloatField(value: _storage._iconTextFitPadding, fieldNumber: 18)
      }
      if _storage._hasIconTextFitPadding_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasIconTextFitPadding_p, fieldNumber: 19)
      }
      if let v = _storage._iconImage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if let v = _storage._iconRotate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      }
      if let v = _storage._iconPadding {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      }
      if let v = _storage._iconKeepUpright {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      }
      if !_storage._iconOffset.isEmpty {
        try visitor.visitPackedFloatField(value: _storage._iconOffset, fieldNumber: 24)
      }
      if _storage._hasIconOffset_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasIconOffset_p, fieldNumber: 25)
      }
      if _storage._iconAnchor != .positionCenter {
        try visitor.visitSingularEnumField(value: _storage._iconAnchor, fieldNumber: 26)
      }
      if _storage._hasIconAnchor_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasIconAnchor_p, fieldNumber: 27)
      }
      if _storage._iconPitchAlignment != .auto {
        try visitor.visitSingularEnumField(value: _storage._iconPitchAlignment, fieldNumber: 28)
      }
      if _storage._hasIconPitchAlignment_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasIconPitchAlignment_p, fieldNumber: 29)
      }
      if _storage._textPitchAlignment != .auto {
        try visitor.visitSingularEnumField(value: _storage._textPitchAlignment, fieldNumber: 30)
      }
      if _storage._hasTextPitchAlignment_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasTextPitchAlignment_p, fieldNumber: 31)
      }
      if _storage._textRotationAlignment != .auto {
        try visitor.visitSingularEnumField(value: _storage._textRotationAlignment, fieldNumber: 32)
      }
      if _storage._hasTextRotationAlignment_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasTextRotationAlignment_p, fieldNumber: 33)
      }
      if !_storage._textField.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._textField, fieldNumber: 34)
      }
      if _storage._hasTextField_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasTextField_p, fieldNumber: 35)
      }
      if !_storage._textFont.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._textFont, fieldNumber: 36)
      }
      if _storage._hasTextFont_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasTextFont_p, fieldNumber: 37)
      }
      if let v = _storage._textSize {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 38)
      }
      if let v = _storage._textMaxWidth {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 39)
      }
      if let v = _storage._textLineHeight {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 40)
      }
      if let v = _storage._textLetterSpacing {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 41)
      }
      if _storage._textJustify != .justifyAuto {
        try visitor.visitSingularEnumField(value: _storage._textJustify, fieldNumber: 42)
      }
      if _storage._hasTextJustify_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasTextJustify_p, fieldNumber: 43)
      }
      if let v = _storage._textRadialOffset {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 44)
      }
      if !_storage._textVariableAnchor.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._textVariableAnchor, fieldNumber: 45)
      }
      if _storage._hasTextVariableAnchor_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasTextVariableAnchor_p, fieldNumber: 46)
      }
      if _storage._textAnchor != .positionCenter {
        try visitor.visitSingularEnumField(value: _storage._textAnchor, fieldNumber: 47)
      }
      if _storage._hasTextAnchor_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasTextAnchor_p, fieldNumber: 48)
      }
      if let v = _storage._textMaxAngle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 49)
      }
      if let v = _storage._textRotate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 50)
      }
      if let v = _storage._textPadding {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 51)
      }
      if let v = _storage._textKeepUpright {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 52)
      }
      if _storage._textTransform != .transformNone {
        try visitor.visitSingularEnumField(value: _storage._textTransform, fieldNumber: 53)
      }
      if _storage._hasTextTransform_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasTextTransform_p, fieldNumber: 54)
      }
      if !_storage._textOffset.isEmpty {
        try visitor.visitPackedFloatField(value: _storage._textOffset, fieldNumber: 55)
      }
      if _storage._hasTextOffset_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasTextOffset_p, fieldNumber: 56)
      }
      if let v = _storage._textAllowOverlap {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 57)
      }
      if let v = _storage._textIgnorePlacement {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 58)
      }
      if let v = _storage._textOptional {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 59)
      }
      if let v = _storage._iconOpacity {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 60)
      }
      if let v = _storage._iconColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 61)
      }
      if let v = _storage._iconHaloColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 62)
      }
      if let v = _storage._iconHaloWidth {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 63)
      }
      if let v = _storage._iconHaloBlur {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 64)
      }
      if !_storage._iconTranslate.isEmpty {
        try visitor.visitPackedFloatField(value: _storage._iconTranslate, fieldNumber: 65)
      }
      if _storage._hasIconTranslate_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasIconTranslate_p, fieldNumber: 66)
      }
      if _storage._iconTranslateAnchor != .map {
        try visitor.visitSingularEnumField(value: _storage._iconTranslateAnchor, fieldNumber: 67)
      }
      if _storage._hasIconTranslateAnchor_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasIconTranslateAnchor_p, fieldNumber: 68)
      }
      if let v = _storage._textOpacity {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 69)
      }
      if let v = _storage._textColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 70)
      }
      if let v = _storage._textHaloColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 71)
      }
      if let v = _storage._textHaloWidth {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 72)
      }
      if let v = _storage._textHaloBlur {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 73)
      }
      if !_storage._textTranslate.isEmpty {
        try visitor.visitPackedFloatField(value: _storage._textTranslate, fieldNumber: 74)
      }
      if _storage._hasTextTranslate_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasTextTranslate_p, fieldNumber: 75)
      }
      if _storage._textTranslateAnchor != .map {
        try visitor.visitSingularEnumField(value: _storage._textTranslateAnchor, fieldNumber: 76)
      }
      if _storage._hasTextTranslateAnchor_p != false {
        try visitor.visitSingularBoolField(value: _storage._hasTextTranslateAnchor_p, fieldNumber: 77)
      }
      if let v = _storage._iconOpacityTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 78)
      }
      if let v = _storage._iconColorTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 79)
      }
      if let v = _storage._iconHaloColorTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 80)
      }
      if let v = _storage._iconHaloWidthTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 81)
      }
      if let v = _storage._iconHaloBlurTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 82)
      }
      if let v = _storage._iconTranslateTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 83)
      }
      if let v = _storage._textOpacityTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 84)
      }
      if let v = _storage._textColorTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 85)
      }
      if let v = _storage._textHaloColorTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 86)
      }
      if let v = _storage._textHaloWidthTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 87)
      }
      if let v = _storage._textHaloBlurTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 88)
      }
      if let v = _storage._textTranslateTransition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 89)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_MapboxGl_Proto_Operations.Update.Symbol, rhs: Com_Tophap_MapboxGl_Proto_Operations.Update.Symbol) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._visible != rhs_storage._visible {return false}
        if _storage._minZoom != rhs_storage._minZoom {return false}
        if _storage._maxZoom != rhs_storage._maxZoom {return false}
        if _storage._symbolPlacement != rhs_storage._symbolPlacement {return false}
        if _storage._hasSymbolPlacement_p != rhs_storage._hasSymbolPlacement_p {return false}
        if _storage._symbolSpacing != rhs_storage._symbolSpacing {return false}
        if _storage._symbolAvoidEdges != rhs_storage._symbolAvoidEdges {return false}
        if _storage._symbolZOrder != rhs_storage._symbolZOrder {return false}
        if _storage._hasSymbolZOrder_p != rhs_storage._hasSymbolZOrder_p {return false}
        if _storage._iconAllowOverlap != rhs_storage._iconAllowOverlap {return false}
        if _storage._iconIgnorePlacement != rhs_storage._iconIgnorePlacement {return false}
        if _storage._iconOptional != rhs_storage._iconOptional {return false}
        if _storage._iconRotationAlignment != rhs_storage._iconRotationAlignment {return false}
        if _storage._hasIconRotationAlignment_p != rhs_storage._hasIconRotationAlignment_p {return false}
        if _storage._iconSize != rhs_storage._iconSize {return false}
        if _storage._iconTextFit != rhs_storage._iconTextFit {return false}
        if _storage._hasIconTextFit_p != rhs_storage._hasIconTextFit_p {return false}
        if _storage._iconTextFitPadding != rhs_storage._iconTextFitPadding {return false}
        if _storage._hasIconTextFitPadding_p != rhs_storage._hasIconTextFitPadding_p {return false}
        if _storage._iconImage != rhs_storage._iconImage {return false}
        if _storage._iconRotate != rhs_storage._iconRotate {return false}
        if _storage._iconPadding != rhs_storage._iconPadding {return false}
        if _storage._iconKeepUpright != rhs_storage._iconKeepUpright {return false}
        if _storage._iconOffset != rhs_storage._iconOffset {return false}
        if _storage._hasIconOffset_p != rhs_storage._hasIconOffset_p {return false}
        if _storage._iconAnchor != rhs_storage._iconAnchor {return false}
        if _storage._hasIconAnchor_p != rhs_storage._hasIconAnchor_p {return false}
        if _storage._iconPitchAlignment != rhs_storage._iconPitchAlignment {return false}
        if _storage._hasIconPitchAlignment_p != rhs_storage._hasIconPitchAlignment_p {return false}
        if _storage._textPitchAlignment != rhs_storage._textPitchAlignment {return false}
        if _storage._hasTextPitchAlignment_p != rhs_storage._hasTextPitchAlignment_p {return false}
        if _storage._textRotationAlignment != rhs_storage._textRotationAlignment {return false}
        if _storage._hasTextRotationAlignment_p != rhs_storage._hasTextRotationAlignment_p {return false}
        if _storage._textField != rhs_storage._textField {return false}
        if _storage._hasTextField_p != rhs_storage._hasTextField_p {return false}
        if _storage._textFont != rhs_storage._textFont {return false}
        if _storage._hasTextFont_p != rhs_storage._hasTextFont_p {return false}
        if _storage._textSize != rhs_storage._textSize {return false}
        if _storage._textMaxWidth != rhs_storage._textMaxWidth {return false}
        if _storage._textLineHeight != rhs_storage._textLineHeight {return false}
        if _storage._textLetterSpacing != rhs_storage._textLetterSpacing {return false}
        if _storage._textJustify != rhs_storage._textJustify {return false}
        if _storage._hasTextJustify_p != rhs_storage._hasTextJustify_p {return false}
        if _storage._textRadialOffset != rhs_storage._textRadialOffset {return false}
        if _storage._textVariableAnchor != rhs_storage._textVariableAnchor {return false}
        if _storage._hasTextVariableAnchor_p != rhs_storage._hasTextVariableAnchor_p {return false}
        if _storage._textAnchor != rhs_storage._textAnchor {return false}
        if _storage._hasTextAnchor_p != rhs_storage._hasTextAnchor_p {return false}
        if _storage._textMaxAngle != rhs_storage._textMaxAngle {return false}
        if _storage._textRotate != rhs_storage._textRotate {return false}
        if _storage._textPadding != rhs_storage._textPadding {return false}
        if _storage._textKeepUpright != rhs_storage._textKeepUpright {return false}
        if _storage._textTransform != rhs_storage._textTransform {return false}
        if _storage._hasTextTransform_p != rhs_storage._hasTextTransform_p {return false}
        if _storage._textOffset != rhs_storage._textOffset {return false}
        if _storage._hasTextOffset_p != rhs_storage._hasTextOffset_p {return false}
        if _storage._textAllowOverlap != rhs_storage._textAllowOverlap {return false}
        if _storage._textIgnorePlacement != rhs_storage._textIgnorePlacement {return false}
        if _storage._textOptional != rhs_storage._textOptional {return false}
        if _storage._iconOpacity != rhs_storage._iconOpacity {return false}
        if _storage._iconColor != rhs_storage._iconColor {return false}
        if _storage._iconHaloColor != rhs_storage._iconHaloColor {return false}
        if _storage._iconHaloWidth != rhs_storage._iconHaloWidth {return false}
        if _storage._iconHaloBlur != rhs_storage._iconHaloBlur {return false}
        if _storage._iconTranslate != rhs_storage._iconTranslate {return false}
        if _storage._hasIconTranslate_p != rhs_storage._hasIconTranslate_p {return false}
        if _storage._iconTranslateAnchor != rhs_storage._iconTranslateAnchor {return false}
        if _storage._hasIconTranslateAnchor_p != rhs_storage._hasIconTranslateAnchor_p {return false}
        if _storage._textOpacity != rhs_storage._textOpacity {return false}
        if _storage._textColor != rhs_storage._textColor {return false}
        if _storage._textHaloColor != rhs_storage._textHaloColor {return false}
        if _storage._textHaloWidth != rhs_storage._textHaloWidth {return false}
        if _storage._textHaloBlur != rhs_storage._textHaloBlur {return false}
        if _storage._textTranslate != rhs_storage._textTranslate {return false}
        if _storage._hasTextTranslate_p != rhs_storage._hasTextTranslate_p {return false}
        if _storage._textTranslateAnchor != rhs_storage._textTranslateAnchor {return false}
        if _storage._hasTextTranslateAnchor_p != rhs_storage._hasTextTranslateAnchor_p {return false}
        if _storage._iconOpacityTransition != rhs_storage._iconOpacityTransition {return false}
        if _storage._iconColorTransition != rhs_storage._iconColorTransition {return false}
        if _storage._iconHaloColorTransition != rhs_storage._iconHaloColorTransition {return false}
        if _storage._iconHaloWidthTransition != rhs_storage._iconHaloWidthTransition {return false}
        if _storage._iconHaloBlurTransition != rhs_storage._iconHaloBlurTransition {return false}
        if _storage._iconTranslateTransition != rhs_storage._iconTranslateTransition {return false}
        if _storage._textOpacityTransition != rhs_storage._textOpacityTransition {return false}
        if _storage._textColorTransition != rhs_storage._textColorTransition {return false}
        if _storage._textHaloColorTransition != rhs_storage._textHaloColorTransition {return false}
        if _storage._textHaloWidthTransition != rhs_storage._textHaloWidthTransition {return false}
        if _storage._textHaloBlurTransition != rhs_storage._textHaloBlurTransition {return false}
        if _storage._textTranslateTransition != rhs_storage._textTranslateTransition {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
