// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: map.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// protoc --proto_path=lib/src/models/proto --dart_out=lib/src/models/proto/generated lib/src/models/proto/**.proto lib/src/models/proto/google/protobuf/**.proto && protoc --proto_path=lib/src/models/proto --java_out=android/src/main/kotlin/ lib/src/models/proto/**.proto && protoc --proto_path=lib/src/models/proto --swift_out=ios/Classes/proto lib/src/models/proto/**.proto
struct Com_Tophap_Mapboxgl_Proto_Map {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Options {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var apiBaseUri: String {
      get {return _storage._apiBaseUri}
      set {_uniqueStorage()._apiBaseUri = newValue}
    }

    var localIdeographFontFamily: String {
      get {return _storage._localIdeographFontFamily}
      set {_uniqueStorage()._localIdeographFontFamily = newValue}
    }

    var crossSourceCollisions: Bool {
      get {return _storage._crossSourceCollisions}
      set {_uniqueStorage()._crossSourceCollisions = newValue}
    }

    var cameraPosition: Com_Tophap_Mapboxgl_Proto_Map.CameraPosition {
      get {return _storage._cameraPosition ?? Com_Tophap_Mapboxgl_Proto_Map.CameraPosition()}
      set {_uniqueStorage()._cameraPosition = newValue}
    }
    /// Returns true if `cameraPosition` has been explicitly set.
    var hasCameraPosition: Bool {return _storage._cameraPosition != nil}
    /// Clears the value of `cameraPosition`. Subsequent reads from it will return its default value.
    mutating func clearCameraPosition() {_uniqueStorage()._cameraPosition = nil}

    var maxZoom: Double {
      get {return _storage._maxZoom}
      set {_uniqueStorage()._maxZoom = newValue}
    }

    var minZoom: Double {
      get {return _storage._minZoom}
      set {_uniqueStorage()._minZoom = newValue}
    }

    var zoomGestures: Bool {
      get {return _storage._zoomGestures}
      set {_uniqueStorage()._zoomGestures = newValue}
    }

    var scrollGestures: Bool {
      get {return _storage._scrollGestures}
      set {_uniqueStorage()._scrollGestures = newValue}
    }

    var rotateGestures: Bool {
      get {return _storage._rotateGestures}
      set {_uniqueStorage()._rotateGestures = newValue}
    }

    var tiltGestures: Bool {
      get {return _storage._tiltGestures}
      set {_uniqueStorage()._tiltGestures = newValue}
    }

    var doubleTapGestures: Bool {
      get {return _storage._doubleTapGestures}
      set {_uniqueStorage()._doubleTapGestures = newValue}
    }

    var quickZoomGestures: Bool {
      get {return _storage._quickZoomGestures}
      set {_uniqueStorage()._quickZoomGestures = newValue}
    }

    var compass: Bool {
      get {return _storage._compass}
      set {_uniqueStorage()._compass = newValue}
    }

    var compassPosition: Com_Tophap_Mapboxgl_Proto_OrnamentPosition {
      get {return _storage._compassPosition}
      set {_uniqueStorage()._compassPosition = newValue}
    }

    var compassMargin: [Int32] {
      get {return _storage._compassMargin}
      set {_uniqueStorage()._compassMargin = newValue}
    }

    var compassFadeFacingNorth: Bool {
      get {return _storage._compassFadeFacingNorth}
      set {_uniqueStorage()._compassFadeFacingNorth = newValue}
    }

    var logo: Bool {
      get {return _storage._logo}
      set {_uniqueStorage()._logo = newValue}
    }

    var logoPosition: Com_Tophap_Mapboxgl_Proto_OrnamentPosition {
      get {return _storage._logoPosition}
      set {_uniqueStorage()._logoPosition = newValue}
    }

    var logoMargin: [Int32] {
      get {return _storage._logoMargin}
      set {_uniqueStorage()._logoMargin = newValue}
    }

    var attribution: Bool {
      get {return _storage._attribution}
      set {_uniqueStorage()._attribution = newValue}
    }

    var attributionPosition: Com_Tophap_Mapboxgl_Proto_OrnamentPosition {
      get {return _storage._attributionPosition}
      set {_uniqueStorage()._attributionPosition = newValue}
    }

    var attributionMargin: [Int32] {
      get {return _storage._attributionMargin}
      set {_uniqueStorage()._attributionMargin = newValue}
    }

    var attributionTintColor: Com_Tophap_Mapboxgl_Proto_Color {
      get {return _storage._attributionTintColor ?? Com_Tophap_Mapboxgl_Proto_Color()}
      set {_uniqueStorage()._attributionTintColor = newValue}
    }
    /// Returns true if `attributionTintColor` has been explicitly set.
    var hasAttributionTintColor: Bool {return _storage._attributionTintColor != nil}
    /// Clears the value of `attributionTintColor`. Subsequent reads from it will return its default value.
    mutating func clearAttributionTintColor() {_uniqueStorage()._attributionTintColor = nil}

    var renderTextureMode: Bool {
      get {return _storage._renderTextureMode}
      set {_uniqueStorage()._renderTextureMode = newValue}
    }

    var renderTextureTranslucentSurface: Bool {
      get {return _storage._renderTextureTranslucentSurface}
      set {_uniqueStorage()._renderTextureTranslucentSurface = newValue}
    }

    var enableTilePrefetch: Bool {
      get {return _storage._enableTilePrefetch}
      set {_uniqueStorage()._enableTilePrefetch = newValue}
    }

    var enableZMediaOverlay: Bool {
      get {return _storage._enableZMediaOverlay}
      set {_uniqueStorage()._enableZMediaOverlay = newValue}
    }

    var pixelRatio: Float {
      get {return _storage._pixelRatio}
      set {_uniqueStorage()._pixelRatio = newValue}
    }

    var foregroundLoadColor: Com_Tophap_Mapboxgl_Proto_Color {
      get {return _storage._foregroundLoadColor ?? Com_Tophap_Mapboxgl_Proto_Color()}
      set {_uniqueStorage()._foregroundLoadColor = newValue}
    }
    /// Returns true if `foregroundLoadColor` has been explicitly set.
    var hasForegroundLoadColor: Bool {return _storage._foregroundLoadColor != nil}
    /// Clears the value of `foregroundLoadColor`. Subsequent reads from it will return its default value.
    mutating func clearForegroundLoadColor() {_uniqueStorage()._foregroundLoadColor = nil}

    var style: OneOf_Style? {
      get {return _storage._style}
      set {_uniqueStorage()._style = newValue}
    }

    var fromMapbox: Com_Tophap_Mapboxgl_Proto_Style.MapboxStyle {
      get {
        if case .fromMapbox(let v)? = _storage._style {return v}
        return .mapboxStreets
      }
      set {_uniqueStorage()._style = .fromMapbox(newValue)}
    }

    var fromUri: String {
      get {
        if case .fromUri(let v)? = _storage._style {return v}
        return String()
      }
      set {_uniqueStorage()._style = .fromUri(newValue)}
    }

    var fromJson: String {
      get {
        if case .fromJson(let v)? = _storage._style {return v}
        return String()
      }
      set {_uniqueStorage()._style = .fromJson(newValue)}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_Style: Equatable {
      case fromMapbox(Com_Tophap_Mapboxgl_Proto_Style.MapboxStyle)
      case fromUri(String)
      case fromJson(String)

    #if !swift(>=4.1)
      static func ==(lhs: Com_Tophap_Mapboxgl_Proto_Map.Options.OneOf_Style, rhs: Com_Tophap_Mapboxgl_Proto_Map.Options.OneOf_Style) -> Bool {
        switch (lhs, rhs) {
        case (.fromMapbox(let l), .fromMapbox(let r)): return l == r
        case (.fromUri(let l), .fromUri(let r)): return l == r
        case (.fromJson(let l), .fromJson(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct CameraPosition {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var bearing: Double {
      get {return _storage._bearing}
      set {_uniqueStorage()._bearing = newValue}
    }

    var target: Com_Tophap_Mapboxgl_Proto_LatLng {
      get {return _storage._target ?? Com_Tophap_Mapboxgl_Proto_LatLng()}
      set {_uniqueStorage()._target = newValue}
    }
    /// Returns true if `target` has been explicitly set.
    var hasTarget: Bool {return _storage._target != nil}
    /// Clears the value of `target`. Subsequent reads from it will return its default value.
    mutating func clearTarget() {_uniqueStorage()._target = nil}

    var tilt: Double {
      get {return _storage._tilt}
      set {_uniqueStorage()._tilt = newValue}
    }

    var zoom: Double {
      get {return _storage._zoom}
      set {_uniqueStorage()._zoom = newValue}
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum MoveReason: SwiftProtobuf.Enum {
      typealias RawValue = Int
      case apiGesture // = 0
      case developerAnimation // = 1
      case apiAnimation // = 2
      case UNRECOGNIZED(Int)

      init() {
        self = .apiGesture
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .apiGesture
        case 1: self = .developerAnimation
        case 2: self = .apiAnimation
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      var rawValue: Int {
        switch self {
        case .apiGesture: return 0
        case .developerAnimation: return 1
        case .apiAnimation: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct Operations {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct Ready {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var viewID: Int32 {
        get {return _storage._viewID}
        set {_uniqueStorage()._viewID = newValue}
      }

      var prefetchesTiles: Bool {
        get {return _storage._prefetchesTiles}
        set {_uniqueStorage()._prefetchesTiles = newValue}
      }

      var minZoom: Double {
        get {return _storage._minZoom}
        set {_uniqueStorage()._minZoom = newValue}
      }

      var maxZoom: Double {
        get {return _storage._maxZoom}
        set {_uniqueStorage()._maxZoom = newValue}
      }

      var camera: Com_Tophap_Mapboxgl_Proto_Map.CameraPosition {
        get {return _storage._camera ?? Com_Tophap_Mapboxgl_Proto_Map.CameraPosition()}
        set {_uniqueStorage()._camera = newValue}
      }
      /// Returns true if `camera` has been explicitly set.
      var hasCamera: Bool {return _storage._camera != nil}
      /// Clears the value of `camera`. Subsequent reads from it will return its default value.
      mutating func clearCamera() {_uniqueStorage()._camera = nil}

      var style: Com_Tophap_Mapboxgl_Proto_Style {
        get {return _storage._style ?? Com_Tophap_Mapboxgl_Proto_Style()}
        set {_uniqueStorage()._style = newValue}
      }
      /// Returns true if `style` has been explicitly set.
      var hasStyle: Bool {return _storage._style != nil}
      /// Clears the value of `style`. Subsequent reads from it will return its default value.
      mutating func clearStyle() {_uniqueStorage()._style = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _storage = _StorageClass.defaultInstance
    }

    struct CameraUpdate {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var cameraPosition: Com_Tophap_Mapboxgl_Proto_Map.CameraPosition {
        get {return _storage._cameraPosition ?? Com_Tophap_Mapboxgl_Proto_Map.CameraPosition()}
        set {_uniqueStorage()._cameraPosition = newValue}
      }
      /// Returns true if `cameraPosition` has been explicitly set.
      var hasCameraPosition: Bool {return _storage._cameraPosition != nil}
      /// Clears the value of `cameraPosition`. Subsequent reads from it will return its default value.
      mutating func clearCameraPosition() {_uniqueStorage()._cameraPosition = nil}

      var latLng: Com_Tophap_Mapboxgl_Proto_LatLng {
        get {return _storage._latLng ?? Com_Tophap_Mapboxgl_Proto_LatLng()}
        set {_uniqueStorage()._latLng = newValue}
      }
      /// Returns true if `latLng` has been explicitly set.
      var hasLatLng: Bool {return _storage._latLng != nil}
      /// Clears the value of `latLng`. Subsequent reads from it will return its default value.
      mutating func clearLatLng() {_uniqueStorage()._latLng = nil}

      var bounds: Com_Tophap_Mapboxgl_Proto_LatLngBounds {
        get {return _storage._bounds ?? Com_Tophap_Mapboxgl_Proto_LatLngBounds()}
        set {_uniqueStorage()._bounds = newValue}
      }
      /// Returns true if `bounds` has been explicitly set.
      var hasBounds: Bool {return _storage._bounds != nil}
      /// Clears the value of `bounds`. Subsequent reads from it will return its default value.
      mutating func clearBounds() {_uniqueStorage()._bounds = nil}

      var bearing: Double {
        get {return _storage._bearing}
        set {_uniqueStorage()._bearing = newValue}
      }

      var tilt: Double {
        get {return _storage._tilt}
        set {_uniqueStorage()._tilt = newValue}
      }

      var padding: [Int32] {
        get {return _storage._padding}
        set {_uniqueStorage()._padding = newValue}
      }

      var zoom: Double {
        get {return _storage._zoom}
        set {_uniqueStorage()._zoom = newValue}
      }

      var amount: Double {
        get {return _storage._amount}
        set {_uniqueStorage()._amount = newValue}
      }

      var focusX: Int32 {
        get {return _storage._focusX}
        set {_uniqueStorage()._focusX = newValue}
      }

      var focusY: Int32 {
        get {return _storage._focusY}
        set {_uniqueStorage()._focusY = newValue}
      }

      var operation: Com_Tophap_Mapboxgl_Proto_Map.Operations.CameraUpdate.TypeEnum {
        get {return _storage._operation}
        set {_uniqueStorage()._operation = newValue}
      }

      var unknownFields = SwiftProtobuf.UnknownStorage()

      enum Result: SwiftProtobuf.Enum {
        typealias RawValue = Int
        case finished // = 0
        case canceled // = 1
        case UNRECOGNIZED(Int)

        init() {
          self = .finished
        }

        init?(rawValue: Int) {
          switch rawValue {
          case 0: self = .finished
          case 1: self = .canceled
          default: self = .UNRECOGNIZED(rawValue)
          }
        }

        var rawValue: Int {
          switch self {
          case .finished: return 0
          case .canceled: return 1
          case .UNRECOGNIZED(let i): return i
          }
        }

      }

      enum TypeEnum: SwiftProtobuf.Enum {
        typealias RawValue = Int
        case newCameraPosition // = 0
        case newLatLng // = 1
        case newLatLngBounds // = 2
        case newLatLngZoom // = 3
        case zoomBy // = 4
        case zoomIn // = 5
        case zoomOut // = 6
        case zoomTo // = 7
        case bearingTo // = 8
        case tiltTo // = 9
        case UNRECOGNIZED(Int)

        init() {
          self = .newCameraPosition
        }

        init?(rawValue: Int) {
          switch rawValue {
          case 0: self = .newCameraPosition
          case 1: self = .newLatLng
          case 2: self = .newLatLngBounds
          case 3: self = .newLatLngZoom
          case 4: self = .zoomBy
          case 5: self = .zoomIn
          case 6: self = .zoomOut
          case 7: self = .zoomTo
          case 8: self = .bearingTo
          case 9: self = .tiltTo
          default: self = .UNRECOGNIZED(rawValue)
          }
        }

        var rawValue: Int {
          switch self {
          case .newCameraPosition: return 0
          case .newLatLng: return 1
          case .newLatLngBounds: return 2
          case .newLatLngZoom: return 3
          case .zoomBy: return 4
          case .zoomIn: return 5
          case .zoomOut: return 6
          case .zoomTo: return 7
          case .bearingTo: return 8
          case .tiltTo: return 9
          case .UNRECOGNIZED(let i): return i
          }
        }

      }

      init() {}

      fileprivate var _storage = _StorageClass.defaultInstance
    }

    struct EaseCamera {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var update: Com_Tophap_Mapboxgl_Proto_Map.Operations.CameraUpdate {
        get {return _storage._update ?? Com_Tophap_Mapboxgl_Proto_Map.Operations.CameraUpdate()}
        set {_uniqueStorage()._update = newValue}
      }
      /// Returns true if `update` has been explicitly set.
      var hasUpdate: Bool {return _storage._update != nil}
      /// Clears the value of `update`. Subsequent reads from it will return its default value.
      mutating func clearUpdate() {_uniqueStorage()._update = nil}

      var duration: Int32 {
        get {return _storage._duration}
        set {_uniqueStorage()._duration = newValue}
      }

      var easingInterpolator: Bool {
        get {return _storage._easingInterpolator}
        set {_uniqueStorage()._easingInterpolator = newValue}
      }

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _storage = _StorageClass.defaultInstance
    }

    struct AnimateCamera {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var update: Com_Tophap_Mapboxgl_Proto_Map.Operations.CameraUpdate {
        get {return _storage._update ?? Com_Tophap_Mapboxgl_Proto_Map.Operations.CameraUpdate()}
        set {_uniqueStorage()._update = newValue}
      }
      /// Returns true if `update` has been explicitly set.
      var hasUpdate: Bool {return _storage._update != nil}
      /// Clears the value of `update`. Subsequent reads from it will return its default value.
      mutating func clearUpdate() {_uniqueStorage()._update = nil}

      var duration: Int32 {
        get {return _storage._duration}
        set {_uniqueStorage()._duration = newValue}
      }

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _storage = _StorageClass.defaultInstance
    }

    struct ScrollBy {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var x: Float = 0

      var y: Float = 0

      var duration: Int64 = 0

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    struct SetFocalBearing {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var bearing: Double = 0

      var focalX: Float = 0

      var focalY: Float = 0

      var duration: Int64 = 0

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    struct GetCameraForLatLngBounds {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var bounds: Com_Tophap_Mapboxgl_Proto_LatLngBounds {
        get {return _storage._bounds ?? Com_Tophap_Mapboxgl_Proto_LatLngBounds()}
        set {_uniqueStorage()._bounds = newValue}
      }
      /// Returns true if `bounds` has been explicitly set.
      var hasBounds: Bool {return _storage._bounds != nil}
      /// Clears the value of `bounds`. Subsequent reads from it will return its default value.
      mutating func clearBounds() {_uniqueStorage()._bounds = nil}

      var padding: [Int32] {
        get {return _storage._padding}
        set {_uniqueStorage()._padding = newValue}
      }

      var bearing: Double {
        get {return _storage._bearing}
        set {_uniqueStorage()._bearing = newValue}
      }

      var tilt: Double {
        get {return _storage._tilt}
        set {_uniqueStorage()._tilt = newValue}
      }

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _storage = _StorageClass.defaultInstance
    }

    init() {}
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.tophap.mapboxgl.proto"

extension Com_Tophap_Mapboxgl_Proto_Map: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Map"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_Mapboxgl_Proto_Map, rhs: Com_Tophap_Mapboxgl_Proto_Map) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Tophap_Mapboxgl_Proto_Map.Options: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Tophap_Mapboxgl_Proto_Map.protoMessageName + ".Options"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "api_base_uri"),
    2: .standard(proto: "local_ideograph_font_family"),
    3: .standard(proto: "cross_source_collisions"),
    4: .standard(proto: "camera_position"),
    5: .standard(proto: "max_zoom"),
    6: .standard(proto: "min_zoom"),
    7: .standard(proto: "zoom_gestures"),
    8: .standard(proto: "scroll_gestures"),
    9: .standard(proto: "rotate_gestures"),
    10: .standard(proto: "tilt_gestures"),
    11: .standard(proto: "double_tap_gestures"),
    12: .standard(proto: "quick_zoom_gestures"),
    13: .same(proto: "compass"),
    14: .standard(proto: "compass_position"),
    15: .standard(proto: "compass_margin"),
    16: .standard(proto: "compass_fade_facing_north"),
    17: .same(proto: "logo"),
    18: .standard(proto: "logo_position"),
    19: .standard(proto: "logo_margin"),
    20: .same(proto: "attribution"),
    21: .standard(proto: "attribution_position"),
    22: .standard(proto: "attribution_margin"),
    23: .standard(proto: "attribution_tint_color"),
    24: .standard(proto: "render_texture_mode"),
    25: .standard(proto: "render_texture_translucent_surface"),
    26: .standard(proto: "enable_tile_prefetch"),
    27: .standard(proto: "enable_z_media_overlay"),
    28: .standard(proto: "pixel_ratio"),
    29: .standard(proto: "foreground_load_color"),
    30: .standard(proto: "from_mapbox"),
    31: .standard(proto: "from_uri"),
    32: .standard(proto: "from_json"),
  ]

  fileprivate class _StorageClass {
    var _apiBaseUri: String = String()
    var _localIdeographFontFamily: String = String()
    var _crossSourceCollisions: Bool = false
    var _cameraPosition: Com_Tophap_Mapboxgl_Proto_Map.CameraPosition? = nil
    var _maxZoom: Double = 0
    var _minZoom: Double = 0
    var _zoomGestures: Bool = false
    var _scrollGestures: Bool = false
    var _rotateGestures: Bool = false
    var _tiltGestures: Bool = false
    var _doubleTapGestures: Bool = false
    var _quickZoomGestures: Bool = false
    var _compass: Bool = false
    var _compassPosition: Com_Tophap_Mapboxgl_Proto_OrnamentPosition = .topLeft
    var _compassMargin: [Int32] = []
    var _compassFadeFacingNorth: Bool = false
    var _logo: Bool = false
    var _logoPosition: Com_Tophap_Mapboxgl_Proto_OrnamentPosition = .topLeft
    var _logoMargin: [Int32] = []
    var _attribution: Bool = false
    var _attributionPosition: Com_Tophap_Mapboxgl_Proto_OrnamentPosition = .topLeft
    var _attributionMargin: [Int32] = []
    var _attributionTintColor: Com_Tophap_Mapboxgl_Proto_Color? = nil
    var _renderTextureMode: Bool = false
    var _renderTextureTranslucentSurface: Bool = false
    var _enableTilePrefetch: Bool = false
    var _enableZMediaOverlay: Bool = false
    var _pixelRatio: Float = 0
    var _foregroundLoadColor: Com_Tophap_Mapboxgl_Proto_Color? = nil
    var _style: Com_Tophap_Mapboxgl_Proto_Map.Options.OneOf_Style?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _apiBaseUri = source._apiBaseUri
      _localIdeographFontFamily = source._localIdeographFontFamily
      _crossSourceCollisions = source._crossSourceCollisions
      _cameraPosition = source._cameraPosition
      _maxZoom = source._maxZoom
      _minZoom = source._minZoom
      _zoomGestures = source._zoomGestures
      _scrollGestures = source._scrollGestures
      _rotateGestures = source._rotateGestures
      _tiltGestures = source._tiltGestures
      _doubleTapGestures = source._doubleTapGestures
      _quickZoomGestures = source._quickZoomGestures
      _compass = source._compass
      _compassPosition = source._compassPosition
      _compassMargin = source._compassMargin
      _compassFadeFacingNorth = source._compassFadeFacingNorth
      _logo = source._logo
      _logoPosition = source._logoPosition
      _logoMargin = source._logoMargin
      _attribution = source._attribution
      _attributionPosition = source._attributionPosition
      _attributionMargin = source._attributionMargin
      _attributionTintColor = source._attributionTintColor
      _renderTextureMode = source._renderTextureMode
      _renderTextureTranslucentSurface = source._renderTextureTranslucentSurface
      _enableTilePrefetch = source._enableTilePrefetch
      _enableZMediaOverlay = source._enableZMediaOverlay
      _pixelRatio = source._pixelRatio
      _foregroundLoadColor = source._foregroundLoadColor
      _style = source._style
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._apiBaseUri)
        case 2: try decoder.decodeSingularStringField(value: &_storage._localIdeographFontFamily)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._crossSourceCollisions)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._cameraPosition)
        case 5: try decoder.decodeSingularDoubleField(value: &_storage._maxZoom)
        case 6: try decoder.decodeSingularDoubleField(value: &_storage._minZoom)
        case 7: try decoder.decodeSingularBoolField(value: &_storage._zoomGestures)
        case 8: try decoder.decodeSingularBoolField(value: &_storage._scrollGestures)
        case 9: try decoder.decodeSingularBoolField(value: &_storage._rotateGestures)
        case 10: try decoder.decodeSingularBoolField(value: &_storage._tiltGestures)
        case 11: try decoder.decodeSingularBoolField(value: &_storage._doubleTapGestures)
        case 12: try decoder.decodeSingularBoolField(value: &_storage._quickZoomGestures)
        case 13: try decoder.decodeSingularBoolField(value: &_storage._compass)
        case 14: try decoder.decodeSingularEnumField(value: &_storage._compassPosition)
        case 15: try decoder.decodeRepeatedInt32Field(value: &_storage._compassMargin)
        case 16: try decoder.decodeSingularBoolField(value: &_storage._compassFadeFacingNorth)
        case 17: try decoder.decodeSingularBoolField(value: &_storage._logo)
        case 18: try decoder.decodeSingularEnumField(value: &_storage._logoPosition)
        case 19: try decoder.decodeRepeatedInt32Field(value: &_storage._logoMargin)
        case 20: try decoder.decodeSingularBoolField(value: &_storage._attribution)
        case 21: try decoder.decodeSingularEnumField(value: &_storage._attributionPosition)
        case 22: try decoder.decodeRepeatedInt32Field(value: &_storage._attributionMargin)
        case 23: try decoder.decodeSingularMessageField(value: &_storage._attributionTintColor)
        case 24: try decoder.decodeSingularBoolField(value: &_storage._renderTextureMode)
        case 25: try decoder.decodeSingularBoolField(value: &_storage._renderTextureTranslucentSurface)
        case 26: try decoder.decodeSingularBoolField(value: &_storage._enableTilePrefetch)
        case 27: try decoder.decodeSingularBoolField(value: &_storage._enableZMediaOverlay)
        case 28: try decoder.decodeSingularFloatField(value: &_storage._pixelRatio)
        case 29: try decoder.decodeSingularMessageField(value: &_storage._foregroundLoadColor)
        case 30:
          if _storage._style != nil {try decoder.handleConflictingOneOf()}
          var v: Com_Tophap_Mapboxgl_Proto_Style.MapboxStyle?
          try decoder.decodeSingularEnumField(value: &v)
          if let v = v {_storage._style = .fromMapbox(v)}
        case 31:
          if _storage._style != nil {try decoder.handleConflictingOneOf()}
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {_storage._style = .fromUri(v)}
        case 32:
          if _storage._style != nil {try decoder.handleConflictingOneOf()}
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {_storage._style = .fromJson(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._apiBaseUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._apiBaseUri, fieldNumber: 1)
      }
      if !_storage._localIdeographFontFamily.isEmpty {
        try visitor.visitSingularStringField(value: _storage._localIdeographFontFamily, fieldNumber: 2)
      }
      if _storage._crossSourceCollisions != false {
        try visitor.visitSingularBoolField(value: _storage._crossSourceCollisions, fieldNumber: 3)
      }
      if let v = _storage._cameraPosition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if _storage._maxZoom != 0 {
        try visitor.visitSingularDoubleField(value: _storage._maxZoom, fieldNumber: 5)
      }
      if _storage._minZoom != 0 {
        try visitor.visitSingularDoubleField(value: _storage._minZoom, fieldNumber: 6)
      }
      if _storage._zoomGestures != false {
        try visitor.visitSingularBoolField(value: _storage._zoomGestures, fieldNumber: 7)
      }
      if _storage._scrollGestures != false {
        try visitor.visitSingularBoolField(value: _storage._scrollGestures, fieldNumber: 8)
      }
      if _storage._rotateGestures != false {
        try visitor.visitSingularBoolField(value: _storage._rotateGestures, fieldNumber: 9)
      }
      if _storage._tiltGestures != false {
        try visitor.visitSingularBoolField(value: _storage._tiltGestures, fieldNumber: 10)
      }
      if _storage._doubleTapGestures != false {
        try visitor.visitSingularBoolField(value: _storage._doubleTapGestures, fieldNumber: 11)
      }
      if _storage._quickZoomGestures != false {
        try visitor.visitSingularBoolField(value: _storage._quickZoomGestures, fieldNumber: 12)
      }
      if _storage._compass != false {
        try visitor.visitSingularBoolField(value: _storage._compass, fieldNumber: 13)
      }
      if _storage._compassPosition != .topLeft {
        try visitor.visitSingularEnumField(value: _storage._compassPosition, fieldNumber: 14)
      }
      if !_storage._compassMargin.isEmpty {
        try visitor.visitPackedInt32Field(value: _storage._compassMargin, fieldNumber: 15)
      }
      if _storage._compassFadeFacingNorth != false {
        try visitor.visitSingularBoolField(value: _storage._compassFadeFacingNorth, fieldNumber: 16)
      }
      if _storage._logo != false {
        try visitor.visitSingularBoolField(value: _storage._logo, fieldNumber: 17)
      }
      if _storage._logoPosition != .topLeft {
        try visitor.visitSingularEnumField(value: _storage._logoPosition, fieldNumber: 18)
      }
      if !_storage._logoMargin.isEmpty {
        try visitor.visitPackedInt32Field(value: _storage._logoMargin, fieldNumber: 19)
      }
      if _storage._attribution != false {
        try visitor.visitSingularBoolField(value: _storage._attribution, fieldNumber: 20)
      }
      if _storage._attributionPosition != .topLeft {
        try visitor.visitSingularEnumField(value: _storage._attributionPosition, fieldNumber: 21)
      }
      if !_storage._attributionMargin.isEmpty {
        try visitor.visitPackedInt32Field(value: _storage._attributionMargin, fieldNumber: 22)
      }
      if let v = _storage._attributionTintColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      }
      if _storage._renderTextureMode != false {
        try visitor.visitSingularBoolField(value: _storage._renderTextureMode, fieldNumber: 24)
      }
      if _storage._renderTextureTranslucentSurface != false {
        try visitor.visitSingularBoolField(value: _storage._renderTextureTranslucentSurface, fieldNumber: 25)
      }
      if _storage._enableTilePrefetch != false {
        try visitor.visitSingularBoolField(value: _storage._enableTilePrefetch, fieldNumber: 26)
      }
      if _storage._enableZMediaOverlay != false {
        try visitor.visitSingularBoolField(value: _storage._enableZMediaOverlay, fieldNumber: 27)
      }
      if _storage._pixelRatio != 0 {
        try visitor.visitSingularFloatField(value: _storage._pixelRatio, fieldNumber: 28)
      }
      if let v = _storage._foregroundLoadColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 29)
      }
      switch _storage._style {
      case .fromMapbox(let v)?:
        try visitor.visitSingularEnumField(value: v, fieldNumber: 30)
      case .fromUri(let v)?:
        try visitor.visitSingularStringField(value: v, fieldNumber: 31)
      case .fromJson(let v)?:
        try visitor.visitSingularStringField(value: v, fieldNumber: 32)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_Mapboxgl_Proto_Map.Options, rhs: Com_Tophap_Mapboxgl_Proto_Map.Options) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._apiBaseUri != rhs_storage._apiBaseUri {return false}
        if _storage._localIdeographFontFamily != rhs_storage._localIdeographFontFamily {return false}
        if _storage._crossSourceCollisions != rhs_storage._crossSourceCollisions {return false}
        if _storage._cameraPosition != rhs_storage._cameraPosition {return false}
        if _storage._maxZoom != rhs_storage._maxZoom {return false}
        if _storage._minZoom != rhs_storage._minZoom {return false}
        if _storage._zoomGestures != rhs_storage._zoomGestures {return false}
        if _storage._scrollGestures != rhs_storage._scrollGestures {return false}
        if _storage._rotateGestures != rhs_storage._rotateGestures {return false}
        if _storage._tiltGestures != rhs_storage._tiltGestures {return false}
        if _storage._doubleTapGestures != rhs_storage._doubleTapGestures {return false}
        if _storage._quickZoomGestures != rhs_storage._quickZoomGestures {return false}
        if _storage._compass != rhs_storage._compass {return false}
        if _storage._compassPosition != rhs_storage._compassPosition {return false}
        if _storage._compassMargin != rhs_storage._compassMargin {return false}
        if _storage._compassFadeFacingNorth != rhs_storage._compassFadeFacingNorth {return false}
        if _storage._logo != rhs_storage._logo {return false}
        if _storage._logoPosition != rhs_storage._logoPosition {return false}
        if _storage._logoMargin != rhs_storage._logoMargin {return false}
        if _storage._attribution != rhs_storage._attribution {return false}
        if _storage._attributionPosition != rhs_storage._attributionPosition {return false}
        if _storage._attributionMargin != rhs_storage._attributionMargin {return false}
        if _storage._attributionTintColor != rhs_storage._attributionTintColor {return false}
        if _storage._renderTextureMode != rhs_storage._renderTextureMode {return false}
        if _storage._renderTextureTranslucentSurface != rhs_storage._renderTextureTranslucentSurface {return false}
        if _storage._enableTilePrefetch != rhs_storage._enableTilePrefetch {return false}
        if _storage._enableZMediaOverlay != rhs_storage._enableZMediaOverlay {return false}
        if _storage._pixelRatio != rhs_storage._pixelRatio {return false}
        if _storage._foregroundLoadColor != rhs_storage._foregroundLoadColor {return false}
        if _storage._style != rhs_storage._style {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Tophap_Mapboxgl_Proto_Map.CameraPosition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Tophap_Mapboxgl_Proto_Map.protoMessageName + ".CameraPosition"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bearing"),
    2: .same(proto: "target"),
    3: .same(proto: "tilt"),
    4: .same(proto: "zoom"),
  ]

  fileprivate class _StorageClass {
    var _bearing: Double = 0
    var _target: Com_Tophap_Mapboxgl_Proto_LatLng? = nil
    var _tilt: Double = 0
    var _zoom: Double = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _bearing = source._bearing
      _target = source._target
      _tilt = source._tilt
      _zoom = source._zoom
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularDoubleField(value: &_storage._bearing)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._target)
        case 3: try decoder.decodeSingularDoubleField(value: &_storage._tilt)
        case 4: try decoder.decodeSingularDoubleField(value: &_storage._zoom)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._bearing != 0 {
        try visitor.visitSingularDoubleField(value: _storage._bearing, fieldNumber: 1)
      }
      if let v = _storage._target {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._tilt != 0 {
        try visitor.visitSingularDoubleField(value: _storage._tilt, fieldNumber: 3)
      }
      if _storage._zoom != 0 {
        try visitor.visitSingularDoubleField(value: _storage._zoom, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_Mapboxgl_Proto_Map.CameraPosition, rhs: Com_Tophap_Mapboxgl_Proto_Map.CameraPosition) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._bearing != rhs_storage._bearing {return false}
        if _storage._target != rhs_storage._target {return false}
        if _storage._tilt != rhs_storage._tilt {return false}
        if _storage._zoom != rhs_storage._zoom {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Tophap_Mapboxgl_Proto_Map.CameraPosition.MoveReason: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "API_GESTURE"),
    1: .same(proto: "DEVELOPER_ANIMATION"),
    2: .same(proto: "API_ANIMATION"),
  ]
}

extension Com_Tophap_Mapboxgl_Proto_Map.Operations: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Tophap_Mapboxgl_Proto_Map.protoMessageName + ".Operations"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_Mapboxgl_Proto_Map.Operations, rhs: Com_Tophap_Mapboxgl_Proto_Map.Operations) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Tophap_Mapboxgl_Proto_Map.Operations.Ready: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Tophap_Mapboxgl_Proto_Map.Operations.protoMessageName + ".Ready"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "view_id"),
    2: .standard(proto: "prefetches_tiles"),
    3: .standard(proto: "min_zoom"),
    4: .standard(proto: "max_zoom"),
    5: .same(proto: "camera"),
    6: .same(proto: "style"),
  ]

  fileprivate class _StorageClass {
    var _viewID: Int32 = 0
    var _prefetchesTiles: Bool = false
    var _minZoom: Double = 0
    var _maxZoom: Double = 0
    var _camera: Com_Tophap_Mapboxgl_Proto_Map.CameraPosition? = nil
    var _style: Com_Tophap_Mapboxgl_Proto_Style? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _viewID = source._viewID
      _prefetchesTiles = source._prefetchesTiles
      _minZoom = source._minZoom
      _maxZoom = source._maxZoom
      _camera = source._camera
      _style = source._style
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt32Field(value: &_storage._viewID)
        case 2: try decoder.decodeSingularBoolField(value: &_storage._prefetchesTiles)
        case 3: try decoder.decodeSingularDoubleField(value: &_storage._minZoom)
        case 4: try decoder.decodeSingularDoubleField(value: &_storage._maxZoom)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._camera)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._style)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._viewID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._viewID, fieldNumber: 1)
      }
      if _storage._prefetchesTiles != false {
        try visitor.visitSingularBoolField(value: _storage._prefetchesTiles, fieldNumber: 2)
      }
      if _storage._minZoom != 0 {
        try visitor.visitSingularDoubleField(value: _storage._minZoom, fieldNumber: 3)
      }
      if _storage._maxZoom != 0 {
        try visitor.visitSingularDoubleField(value: _storage._maxZoom, fieldNumber: 4)
      }
      if let v = _storage._camera {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._style {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_Mapboxgl_Proto_Map.Operations.Ready, rhs: Com_Tophap_Mapboxgl_Proto_Map.Operations.Ready) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._viewID != rhs_storage._viewID {return false}
        if _storage._prefetchesTiles != rhs_storage._prefetchesTiles {return false}
        if _storage._minZoom != rhs_storage._minZoom {return false}
        if _storage._maxZoom != rhs_storage._maxZoom {return false}
        if _storage._camera != rhs_storage._camera {return false}
        if _storage._style != rhs_storage._style {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Tophap_Mapboxgl_Proto_Map.Operations.CameraUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Tophap_Mapboxgl_Proto_Map.Operations.protoMessageName + ".CameraUpdate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "camera_position"),
    2: .standard(proto: "lat_lng"),
    3: .same(proto: "bounds"),
    4: .same(proto: "bearing"),
    5: .same(proto: "tilt"),
    6: .same(proto: "padding"),
    7: .same(proto: "zoom"),
    8: .same(proto: "amount"),
    9: .standard(proto: "focus_x"),
    10: .standard(proto: "focus_y"),
    11: .same(proto: "operation"),
  ]

  fileprivate class _StorageClass {
    var _cameraPosition: Com_Tophap_Mapboxgl_Proto_Map.CameraPosition? = nil
    var _latLng: Com_Tophap_Mapboxgl_Proto_LatLng? = nil
    var _bounds: Com_Tophap_Mapboxgl_Proto_LatLngBounds? = nil
    var _bearing: Double = 0
    var _tilt: Double = 0
    var _padding: [Int32] = []
    var _zoom: Double = 0
    var _amount: Double = 0
    var _focusX: Int32 = 0
    var _focusY: Int32 = 0
    var _operation: Com_Tophap_Mapboxgl_Proto_Map.Operations.CameraUpdate.TypeEnum = .newCameraPosition

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _cameraPosition = source._cameraPosition
      _latLng = source._latLng
      _bounds = source._bounds
      _bearing = source._bearing
      _tilt = source._tilt
      _padding = source._padding
      _zoom = source._zoom
      _amount = source._amount
      _focusX = source._focusX
      _focusY = source._focusY
      _operation = source._operation
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._cameraPosition)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._latLng)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._bounds)
        case 4: try decoder.decodeSingularDoubleField(value: &_storage._bearing)
        case 5: try decoder.decodeSingularDoubleField(value: &_storage._tilt)
        case 6: try decoder.decodeRepeatedInt32Field(value: &_storage._padding)
        case 7: try decoder.decodeSingularDoubleField(value: &_storage._zoom)
        case 8: try decoder.decodeSingularDoubleField(value: &_storage._amount)
        case 9: try decoder.decodeSingularInt32Field(value: &_storage._focusX)
        case 10: try decoder.decodeSingularInt32Field(value: &_storage._focusY)
        case 11: try decoder.decodeSingularEnumField(value: &_storage._operation)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._cameraPosition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._latLng {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._bounds {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _storage._bearing != 0 {
        try visitor.visitSingularDoubleField(value: _storage._bearing, fieldNumber: 4)
      }
      if _storage._tilt != 0 {
        try visitor.visitSingularDoubleField(value: _storage._tilt, fieldNumber: 5)
      }
      if !_storage._padding.isEmpty {
        try visitor.visitPackedInt32Field(value: _storage._padding, fieldNumber: 6)
      }
      if _storage._zoom != 0 {
        try visitor.visitSingularDoubleField(value: _storage._zoom, fieldNumber: 7)
      }
      if _storage._amount != 0 {
        try visitor.visitSingularDoubleField(value: _storage._amount, fieldNumber: 8)
      }
      if _storage._focusX != 0 {
        try visitor.visitSingularInt32Field(value: _storage._focusX, fieldNumber: 9)
      }
      if _storage._focusY != 0 {
        try visitor.visitSingularInt32Field(value: _storage._focusY, fieldNumber: 10)
      }
      if _storage._operation != .newCameraPosition {
        try visitor.visitSingularEnumField(value: _storage._operation, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_Mapboxgl_Proto_Map.Operations.CameraUpdate, rhs: Com_Tophap_Mapboxgl_Proto_Map.Operations.CameraUpdate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._cameraPosition != rhs_storage._cameraPosition {return false}
        if _storage._latLng != rhs_storage._latLng {return false}
        if _storage._bounds != rhs_storage._bounds {return false}
        if _storage._bearing != rhs_storage._bearing {return false}
        if _storage._tilt != rhs_storage._tilt {return false}
        if _storage._padding != rhs_storage._padding {return false}
        if _storage._zoom != rhs_storage._zoom {return false}
        if _storage._amount != rhs_storage._amount {return false}
        if _storage._focusX != rhs_storage._focusX {return false}
        if _storage._focusY != rhs_storage._focusY {return false}
        if _storage._operation != rhs_storage._operation {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Tophap_Mapboxgl_Proto_Map.Operations.CameraUpdate.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "FINISHED"),
    1: .same(proto: "CANCELED"),
  ]
}

extension Com_Tophap_Mapboxgl_Proto_Map.Operations.CameraUpdate.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NEW_CAMERA_POSITION"),
    1: .same(proto: "NEW_LAT_LNG"),
    2: .same(proto: "NEW_LAT_LNG_BOUNDS"),
    3: .same(proto: "NEW_LAT_LNG_ZOOM"),
    4: .same(proto: "ZOOM_BY"),
    5: .same(proto: "ZOOM_IN"),
    6: .same(proto: "ZOOM_OUT"),
    7: .same(proto: "ZOOM_TO"),
    8: .same(proto: "BEARING_TO"),
    9: .same(proto: "TILT_TO"),
  ]
}

extension Com_Tophap_Mapboxgl_Proto_Map.Operations.EaseCamera: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Tophap_Mapboxgl_Proto_Map.Operations.protoMessageName + ".EaseCamera"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "update"),
    2: .same(proto: "duration"),
    3: .standard(proto: "easing_interpolator"),
  ]

  fileprivate class _StorageClass {
    var _update: Com_Tophap_Mapboxgl_Proto_Map.Operations.CameraUpdate? = nil
    var _duration: Int32 = 0
    var _easingInterpolator: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _update = source._update
      _duration = source._duration
      _easingInterpolator = source._easingInterpolator
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._update)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._duration)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._easingInterpolator)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._update {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._duration != 0 {
        try visitor.visitSingularInt32Field(value: _storage._duration, fieldNumber: 2)
      }
      if _storage._easingInterpolator != false {
        try visitor.visitSingularBoolField(value: _storage._easingInterpolator, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_Mapboxgl_Proto_Map.Operations.EaseCamera, rhs: Com_Tophap_Mapboxgl_Proto_Map.Operations.EaseCamera) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._update != rhs_storage._update {return false}
        if _storage._duration != rhs_storage._duration {return false}
        if _storage._easingInterpolator != rhs_storage._easingInterpolator {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Tophap_Mapboxgl_Proto_Map.Operations.AnimateCamera: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Tophap_Mapboxgl_Proto_Map.Operations.protoMessageName + ".AnimateCamera"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "update"),
    2: .same(proto: "duration"),
  ]

  fileprivate class _StorageClass {
    var _update: Com_Tophap_Mapboxgl_Proto_Map.Operations.CameraUpdate? = nil
    var _duration: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _update = source._update
      _duration = source._duration
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._update)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._duration)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._update {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._duration != 0 {
        try visitor.visitSingularInt32Field(value: _storage._duration, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_Mapboxgl_Proto_Map.Operations.AnimateCamera, rhs: Com_Tophap_Mapboxgl_Proto_Map.Operations.AnimateCamera) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._update != rhs_storage._update {return false}
        if _storage._duration != rhs_storage._duration {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Tophap_Mapboxgl_Proto_Map.Operations.ScrollBy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Tophap_Mapboxgl_Proto_Map.Operations.protoMessageName + ".ScrollBy"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
    3: .same(proto: "duration"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.x)
      case 2: try decoder.decodeSingularFloatField(value: &self.y)
      case 3: try decoder.decodeSingularInt64Field(value: &self.duration)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.x != 0 {
      try visitor.visitSingularFloatField(value: self.x, fieldNumber: 1)
    }
    if self.y != 0 {
      try visitor.visitSingularFloatField(value: self.y, fieldNumber: 2)
    }
    if self.duration != 0 {
      try visitor.visitSingularInt64Field(value: self.duration, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_Mapboxgl_Proto_Map.Operations.ScrollBy, rhs: Com_Tophap_Mapboxgl_Proto_Map.Operations.ScrollBy) -> Bool {
    if lhs.x != rhs.x {return false}
    if lhs.y != rhs.y {return false}
    if lhs.duration != rhs.duration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Tophap_Mapboxgl_Proto_Map.Operations.SetFocalBearing: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Tophap_Mapboxgl_Proto_Map.Operations.protoMessageName + ".SetFocalBearing"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bearing"),
    2: .standard(proto: "focal_x"),
    3: .standard(proto: "focal_y"),
    4: .same(proto: "duration"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.bearing)
      case 2: try decoder.decodeSingularFloatField(value: &self.focalX)
      case 3: try decoder.decodeSingularFloatField(value: &self.focalY)
      case 4: try decoder.decodeSingularInt64Field(value: &self.duration)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.bearing != 0 {
      try visitor.visitSingularDoubleField(value: self.bearing, fieldNumber: 1)
    }
    if self.focalX != 0 {
      try visitor.visitSingularFloatField(value: self.focalX, fieldNumber: 2)
    }
    if self.focalY != 0 {
      try visitor.visitSingularFloatField(value: self.focalY, fieldNumber: 3)
    }
    if self.duration != 0 {
      try visitor.visitSingularInt64Field(value: self.duration, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_Mapboxgl_Proto_Map.Operations.SetFocalBearing, rhs: Com_Tophap_Mapboxgl_Proto_Map.Operations.SetFocalBearing) -> Bool {
    if lhs.bearing != rhs.bearing {return false}
    if lhs.focalX != rhs.focalX {return false}
    if lhs.focalY != rhs.focalY {return false}
    if lhs.duration != rhs.duration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Tophap_Mapboxgl_Proto_Map.Operations.GetCameraForLatLngBounds: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Com_Tophap_Mapboxgl_Proto_Map.Operations.protoMessageName + ".GetCameraForLatLngBounds"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bounds"),
    2: .same(proto: "padding"),
    3: .same(proto: "bearing"),
    4: .same(proto: "tilt"),
  ]

  fileprivate class _StorageClass {
    var _bounds: Com_Tophap_Mapboxgl_Proto_LatLngBounds? = nil
    var _padding: [Int32] = []
    var _bearing: Double = 0
    var _tilt: Double = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _bounds = source._bounds
      _padding = source._padding
      _bearing = source._bearing
      _tilt = source._tilt
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._bounds)
        case 2: try decoder.decodeRepeatedInt32Field(value: &_storage._padding)
        case 3: try decoder.decodeSingularDoubleField(value: &_storage._bearing)
        case 4: try decoder.decodeSingularDoubleField(value: &_storage._tilt)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._bounds {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._padding.isEmpty {
        try visitor.visitPackedInt32Field(value: _storage._padding, fieldNumber: 2)
      }
      if _storage._bearing != 0 {
        try visitor.visitSingularDoubleField(value: _storage._bearing, fieldNumber: 3)
      }
      if _storage._tilt != 0 {
        try visitor.visitSingularDoubleField(value: _storage._tilt, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Tophap_Mapboxgl_Proto_Map.Operations.GetCameraForLatLngBounds, rhs: Com_Tophap_Mapboxgl_Proto_Map.Operations.GetCameraForLatLngBounds) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._bounds != rhs_storage._bounds {return false}
        if _storage._padding != rhs_storage._padding {return false}
        if _storage._bearing != rhs_storage._bearing {return false}
        if _storage._tilt != rhs_storage._tilt {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
