// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: layers.proto

package com.tophap.mapbox_gl.proto;

public final class Layers {
  private Layers() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface LayerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.tophap.mapbox_gl.proto.Layer)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Background background_layer = 1;</code>
     */
    boolean hasBackgroundLayer();
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Background background_layer = 1;</code>
     */
    com.tophap.mapbox_gl.proto.Layers.Layer.Background getBackgroundLayer();
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Background background_layer = 1;</code>
     */
    com.tophap.mapbox_gl.proto.Layers.Layer.BackgroundOrBuilder getBackgroundLayerOrBuilder();

    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Circle circle_layer = 2;</code>
     */
    boolean hasCircleLayer();
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Circle circle_layer = 2;</code>
     */
    com.tophap.mapbox_gl.proto.Layers.Layer.Circle getCircleLayer();
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Circle circle_layer = 2;</code>
     */
    com.tophap.mapbox_gl.proto.Layers.Layer.CircleOrBuilder getCircleLayerOrBuilder();

    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Fill fill_layer = 3;</code>
     */
    boolean hasFillLayer();
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Fill fill_layer = 3;</code>
     */
    com.tophap.mapbox_gl.proto.Layers.Layer.Fill getFillLayer();
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Fill fill_layer = 3;</code>
     */
    com.tophap.mapbox_gl.proto.Layers.Layer.FillOrBuilder getFillLayerOrBuilder();

    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.FillExtrusion fill_extrusion_layer = 4;</code>
     */
    boolean hasFillExtrusionLayer();
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.FillExtrusion fill_extrusion_layer = 4;</code>
     */
    com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion getFillExtrusionLayer();
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.FillExtrusion fill_extrusion_layer = 4;</code>
     */
    com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusionOrBuilder getFillExtrusionLayerOrBuilder();

    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Line line_layer = 5;</code>
     */
    boolean hasLineLayer();
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Line line_layer = 5;</code>
     */
    com.tophap.mapbox_gl.proto.Layers.Layer.Line getLineLayer();
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Line line_layer = 5;</code>
     */
    com.tophap.mapbox_gl.proto.Layers.Layer.LineOrBuilder getLineLayerOrBuilder();

    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol symbol_layer = 6;</code>
     */
    boolean hasSymbolLayer();
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol symbol_layer = 6;</code>
     */
    com.tophap.mapbox_gl.proto.Layers.Layer.Symbol getSymbolLayer();
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol symbol_layer = 6;</code>
     */
    com.tophap.mapbox_gl.proto.Layers.Layer.SymbolOrBuilder getSymbolLayerOrBuilder();

    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Hillshade hillshade_layer = 7;</code>
     */
    boolean hasHillshadeLayer();
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Hillshade hillshade_layer = 7;</code>
     */
    com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade getHillshadeLayer();
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Hillshade hillshade_layer = 7;</code>
     */
    com.tophap.mapbox_gl.proto.Layers.Layer.HillshadeOrBuilder getHillshadeLayerOrBuilder();

    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Heatmap heatmap_layer = 8;</code>
     */
    boolean hasHeatmapLayer();
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Heatmap heatmap_layer = 8;</code>
     */
    com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap getHeatmapLayer();
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Heatmap heatmap_layer = 8;</code>
     */
    com.tophap.mapbox_gl.proto.Layers.Layer.HeatmapOrBuilder getHeatmapLayerOrBuilder();

    public com.tophap.mapbox_gl.proto.Layers.Layer.TypeCase getTypeCase();
  }
  /**
   * Protobuf type {@code com.tophap.mapbox_gl.proto.Layer}
   */
  public  static final class Layer extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.tophap.mapbox_gl.proto.Layer)
      LayerOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Layer.newBuilder() to construct.
    private Layer(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Layer() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Layer(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.tophap.mapbox_gl.proto.Layers.Layer.Background.Builder subBuilder = null;
              if (typeCase_ == 1) {
                subBuilder = ((com.tophap.mapbox_gl.proto.Layers.Layer.Background) type_).toBuilder();
              }
              type_ =
                  input.readMessage(com.tophap.mapbox_gl.proto.Layers.Layer.Background.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((com.tophap.mapbox_gl.proto.Layers.Layer.Background) type_);
                type_ = subBuilder.buildPartial();
              }
              typeCase_ = 1;
              break;
            }
            case 18: {
              com.tophap.mapbox_gl.proto.Layers.Layer.Circle.Builder subBuilder = null;
              if (typeCase_ == 2) {
                subBuilder = ((com.tophap.mapbox_gl.proto.Layers.Layer.Circle) type_).toBuilder();
              }
              type_ =
                  input.readMessage(com.tophap.mapbox_gl.proto.Layers.Layer.Circle.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((com.tophap.mapbox_gl.proto.Layers.Layer.Circle) type_);
                type_ = subBuilder.buildPartial();
              }
              typeCase_ = 2;
              break;
            }
            case 26: {
              com.tophap.mapbox_gl.proto.Layers.Layer.Fill.Builder subBuilder = null;
              if (typeCase_ == 3) {
                subBuilder = ((com.tophap.mapbox_gl.proto.Layers.Layer.Fill) type_).toBuilder();
              }
              type_ =
                  input.readMessage(com.tophap.mapbox_gl.proto.Layers.Layer.Fill.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((com.tophap.mapbox_gl.proto.Layers.Layer.Fill) type_);
                type_ = subBuilder.buildPartial();
              }
              typeCase_ = 3;
              break;
            }
            case 34: {
              com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion.Builder subBuilder = null;
              if (typeCase_ == 4) {
                subBuilder = ((com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion) type_).toBuilder();
              }
              type_ =
                  input.readMessage(com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion) type_);
                type_ = subBuilder.buildPartial();
              }
              typeCase_ = 4;
              break;
            }
            case 42: {
              com.tophap.mapbox_gl.proto.Layers.Layer.Line.Builder subBuilder = null;
              if (typeCase_ == 5) {
                subBuilder = ((com.tophap.mapbox_gl.proto.Layers.Layer.Line) type_).toBuilder();
              }
              type_ =
                  input.readMessage(com.tophap.mapbox_gl.proto.Layers.Layer.Line.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((com.tophap.mapbox_gl.proto.Layers.Layer.Line) type_);
                type_ = subBuilder.buildPartial();
              }
              typeCase_ = 5;
              break;
            }
            case 50: {
              com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Builder subBuilder = null;
              if (typeCase_ == 6) {
                subBuilder = ((com.tophap.mapbox_gl.proto.Layers.Layer.Symbol) type_).toBuilder();
              }
              type_ =
                  input.readMessage(com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((com.tophap.mapbox_gl.proto.Layers.Layer.Symbol) type_);
                type_ = subBuilder.buildPartial();
              }
              typeCase_ = 6;
              break;
            }
            case 58: {
              com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade.Builder subBuilder = null;
              if (typeCase_ == 7) {
                subBuilder = ((com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade) type_).toBuilder();
              }
              type_ =
                  input.readMessage(com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade) type_);
                type_ = subBuilder.buildPartial();
              }
              typeCase_ = 7;
              break;
            }
            case 66: {
              com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap.Builder subBuilder = null;
              if (typeCase_ == 8) {
                subBuilder = ((com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap) type_).toBuilder();
              }
              type_ =
                  input.readMessage(com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap) type_);
                type_ = subBuilder.buildPartial();
              }
              typeCase_ = 8;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.tophap.mapbox_gl.proto.Layers.Layer.class, com.tophap.mapbox_gl.proto.Layers.Layer.Builder.class);
    }

    public interface BackgroundOrBuilder extends
        // @@protoc_insertion_point(interface_extends:com.tophap.mapbox_gl.proto.Layer.Background)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>string id = 1;</code>
       */
      java.lang.String getId();
      /**
       * <code>string id = 1;</code>
       */
      com.google.protobuf.ByteString
          getIdBytes();

      /**
       * <code>bool visible = 2;</code>
       */
      boolean getVisible();

      /**
       * <code>float min_zoom = 3;</code>
       */
      float getMinZoom();

      /**
       * <code>float max_zoom = 4;</code>
       */
      float getMaxZoom();

      /**
       * <code>.com.tophap.mapbox_gl.proto.Color color = 5;</code>
       */
      boolean hasColor();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color color = 5;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.Color getColor();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color color = 5;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getColorOrBuilder();

      /**
       * <code>string pattern = 6;</code>
       */
      java.lang.String getPattern();
      /**
       * <code>string pattern = 6;</code>
       */
      com.google.protobuf.ByteString
          getPatternBytes();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 8;</code>
       */
      boolean hasColorTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 8;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getColorTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 8;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getColorTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 9;</code>
       */
      boolean hasPatternTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 9;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getPatternTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 9;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getPatternTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 10;</code>
       */
      boolean hasOpacityTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 10;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getOpacityTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 10;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getOpacityTransitionOrBuilder();
    }
    /**
     * Protobuf type {@code com.tophap.mapbox_gl.proto.Layer.Background}
     */
    public  static final class Background extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:com.tophap.mapbox_gl.proto.Layer.Background)
        BackgroundOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Background.newBuilder() to construct.
      private Background(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Background() {
        id_ = "";
        pattern_ = "";
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Background(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();

                id_ = s;
                break;
              }
              case 16: {

                visible_ = input.readBool();
                break;
              }
              case 29: {

                minZoom_ = input.readFloat();
                break;
              }
              case 37: {

                maxZoom_ = input.readFloat();
                break;
              }
              case 42: {
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder subBuilder = null;
                if (color_ != null) {
                  subBuilder = color_.toBuilder();
                }
                color_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.Color.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(color_);
                  color_ = subBuilder.buildPartial();
                }

                break;
              }
              case 50: {
                java.lang.String s = input.readStringRequireUtf8();

                pattern_ = s;
                break;
              }
              case 66: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (colorTransition_ != null) {
                  subBuilder = colorTransition_.toBuilder();
                }
                colorTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(colorTransition_);
                  colorTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 74: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (patternTransition_ != null) {
                  subBuilder = patternTransition_.toBuilder();
                }
                patternTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(patternTransition_);
                  patternTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 82: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (opacityTransition_ != null) {
                  subBuilder = opacityTransition_.toBuilder();
                }
                opacityTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(opacityTransition_);
                  opacityTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_Background_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_Background_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.tophap.mapbox_gl.proto.Layers.Layer.Background.class, com.tophap.mapbox_gl.proto.Layers.Layer.Background.Builder.class);
      }

      public static final int ID_FIELD_NUMBER = 1;
      private volatile java.lang.Object id_;
      /**
       * <code>string id = 1;</code>
       */
      public java.lang.String getId() {
        java.lang.Object ref = id_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          id_ = s;
          return s;
        }
      }
      /**
       * <code>string id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = id_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          id_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int VISIBLE_FIELD_NUMBER = 2;
      private boolean visible_;
      /**
       * <code>bool visible = 2;</code>
       */
      public boolean getVisible() {
        return visible_;
      }

      public static final int MIN_ZOOM_FIELD_NUMBER = 3;
      private float minZoom_;
      /**
       * <code>float min_zoom = 3;</code>
       */
      public float getMinZoom() {
        return minZoom_;
      }

      public static final int MAX_ZOOM_FIELD_NUMBER = 4;
      private float maxZoom_;
      /**
       * <code>float max_zoom = 4;</code>
       */
      public float getMaxZoom() {
        return maxZoom_;
      }

      public static final int COLOR_FIELD_NUMBER = 5;
      private com.tophap.mapbox_gl.proto.MapboxUtil.Color color_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color color = 5;</code>
       */
      public boolean hasColor() {
        return color_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color color = 5;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.Color getColor() {
        return color_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : color_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color color = 5;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getColorOrBuilder() {
        return getColor();
      }

      public static final int PATTERN_FIELD_NUMBER = 6;
      private volatile java.lang.Object pattern_;
      /**
       * <code>string pattern = 6;</code>
       */
      public java.lang.String getPattern() {
        java.lang.Object ref = pattern_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          pattern_ = s;
          return s;
        }
      }
      /**
       * <code>string pattern = 6;</code>
       */
      public com.google.protobuf.ByteString
          getPatternBytes() {
        java.lang.Object ref = pattern_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          pattern_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int COLOR_TRANSITION_FIELD_NUMBER = 8;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions colorTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 8;</code>
       */
      public boolean hasColorTransition() {
        return colorTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 8;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getColorTransition() {
        return colorTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : colorTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 8;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getColorTransitionOrBuilder() {
        return getColorTransition();
      }

      public static final int PATTERN_TRANSITION_FIELD_NUMBER = 9;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions patternTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 9;</code>
       */
      public boolean hasPatternTransition() {
        return patternTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 9;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getPatternTransition() {
        return patternTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : patternTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 9;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getPatternTransitionOrBuilder() {
        return getPatternTransition();
      }

      public static final int OPACITY_TRANSITION_FIELD_NUMBER = 10;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions opacityTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 10;</code>
       */
      public boolean hasOpacityTransition() {
        return opacityTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 10;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getOpacityTransition() {
        return opacityTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : opacityTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 10;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getOpacityTransitionOrBuilder() {
        return getOpacityTransition();
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!getIdBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, id_);
        }
        if (visible_ != false) {
          output.writeBool(2, visible_);
        }
        if (minZoom_ != 0F) {
          output.writeFloat(3, minZoom_);
        }
        if (maxZoom_ != 0F) {
          output.writeFloat(4, maxZoom_);
        }
        if (color_ != null) {
          output.writeMessage(5, getColor());
        }
        if (!getPatternBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 6, pattern_);
        }
        if (colorTransition_ != null) {
          output.writeMessage(8, getColorTransition());
        }
        if (patternTransition_ != null) {
          output.writeMessage(9, getPatternTransition());
        }
        if (opacityTransition_ != null) {
          output.writeMessage(10, getOpacityTransition());
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!getIdBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, id_);
        }
        if (visible_ != false) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(2, visible_);
        }
        if (minZoom_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(3, minZoom_);
        }
        if (maxZoom_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(4, maxZoom_);
        }
        if (color_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(5, getColor());
        }
        if (!getPatternBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, pattern_);
        }
        if (colorTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(8, getColorTransition());
        }
        if (patternTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(9, getPatternTransition());
        }
        if (opacityTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10, getOpacityTransition());
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.tophap.mapbox_gl.proto.Layers.Layer.Background)) {
          return super.equals(obj);
        }
        com.tophap.mapbox_gl.proto.Layers.Layer.Background other = (com.tophap.mapbox_gl.proto.Layers.Layer.Background) obj;

        if (!getId()
            .equals(other.getId())) return false;
        if (getVisible()
            != other.getVisible()) return false;
        if (java.lang.Float.floatToIntBits(getMinZoom())
            != java.lang.Float.floatToIntBits(
                other.getMinZoom())) return false;
        if (java.lang.Float.floatToIntBits(getMaxZoom())
            != java.lang.Float.floatToIntBits(
                other.getMaxZoom())) return false;
        if (hasColor() != other.hasColor()) return false;
        if (hasColor()) {
          if (!getColor()
              .equals(other.getColor())) return false;
        }
        if (!getPattern()
            .equals(other.getPattern())) return false;
        if (hasColorTransition() != other.hasColorTransition()) return false;
        if (hasColorTransition()) {
          if (!getColorTransition()
              .equals(other.getColorTransition())) return false;
        }
        if (hasPatternTransition() != other.hasPatternTransition()) return false;
        if (hasPatternTransition()) {
          if (!getPatternTransition()
              .equals(other.getPatternTransition())) return false;
        }
        if (hasOpacityTransition() != other.hasOpacityTransition()) return false;
        if (hasOpacityTransition()) {
          if (!getOpacityTransition()
              .equals(other.getOpacityTransition())) return false;
        }
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + ID_FIELD_NUMBER;
        hash = (53 * hash) + getId().hashCode();
        hash = (37 * hash) + VISIBLE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getVisible());
        hash = (37 * hash) + MIN_ZOOM_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMinZoom());
        hash = (37 * hash) + MAX_ZOOM_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMaxZoom());
        if (hasColor()) {
          hash = (37 * hash) + COLOR_FIELD_NUMBER;
          hash = (53 * hash) + getColor().hashCode();
        }
        hash = (37 * hash) + PATTERN_FIELD_NUMBER;
        hash = (53 * hash) + getPattern().hashCode();
        if (hasColorTransition()) {
          hash = (37 * hash) + COLOR_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getColorTransition().hashCode();
        }
        if (hasPatternTransition()) {
          hash = (37 * hash) + PATTERN_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getPatternTransition().hashCode();
        }
        if (hasOpacityTransition()) {
          hash = (37 * hash) + OPACITY_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getOpacityTransition().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.tophap.mapbox_gl.proto.Layers.Layer.Background parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Background parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Background parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Background parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Background parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Background parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Background parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Background parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Background parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Background parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Background parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Background parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.tophap.mapbox_gl.proto.Layers.Layer.Background prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.tophap.mapbox_gl.proto.Layer.Background}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:com.tophap.mapbox_gl.proto.Layer.Background)
          com.tophap.mapbox_gl.proto.Layers.Layer.BackgroundOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_Background_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_Background_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.tophap.mapbox_gl.proto.Layers.Layer.Background.class, com.tophap.mapbox_gl.proto.Layers.Layer.Background.Builder.class);
        }

        // Construct using com.tophap.mapbox_gl.proto.Layers.Layer.Background.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          id_ = "";

          visible_ = false;

          minZoom_ = 0F;

          maxZoom_ = 0F;

          if (colorBuilder_ == null) {
            color_ = null;
          } else {
            color_ = null;
            colorBuilder_ = null;
          }
          pattern_ = "";

          if (colorTransitionBuilder_ == null) {
            colorTransition_ = null;
          } else {
            colorTransition_ = null;
            colorTransitionBuilder_ = null;
          }
          if (patternTransitionBuilder_ == null) {
            patternTransition_ = null;
          } else {
            patternTransition_ = null;
            patternTransitionBuilder_ = null;
          }
          if (opacityTransitionBuilder_ == null) {
            opacityTransition_ = null;
          } else {
            opacityTransition_ = null;
            opacityTransitionBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_Background_descriptor;
        }

        @java.lang.Override
        public com.tophap.mapbox_gl.proto.Layers.Layer.Background getDefaultInstanceForType() {
          return com.tophap.mapbox_gl.proto.Layers.Layer.Background.getDefaultInstance();
        }

        @java.lang.Override
        public com.tophap.mapbox_gl.proto.Layers.Layer.Background build() {
          com.tophap.mapbox_gl.proto.Layers.Layer.Background result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.tophap.mapbox_gl.proto.Layers.Layer.Background buildPartial() {
          com.tophap.mapbox_gl.proto.Layers.Layer.Background result = new com.tophap.mapbox_gl.proto.Layers.Layer.Background(this);
          result.id_ = id_;
          result.visible_ = visible_;
          result.minZoom_ = minZoom_;
          result.maxZoom_ = maxZoom_;
          if (colorBuilder_ == null) {
            result.color_ = color_;
          } else {
            result.color_ = colorBuilder_.build();
          }
          result.pattern_ = pattern_;
          if (colorTransitionBuilder_ == null) {
            result.colorTransition_ = colorTransition_;
          } else {
            result.colorTransition_ = colorTransitionBuilder_.build();
          }
          if (patternTransitionBuilder_ == null) {
            result.patternTransition_ = patternTransition_;
          } else {
            result.patternTransition_ = patternTransitionBuilder_.build();
          }
          if (opacityTransitionBuilder_ == null) {
            result.opacityTransition_ = opacityTransition_;
          } else {
            result.opacityTransition_ = opacityTransitionBuilder_.build();
          }
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.tophap.mapbox_gl.proto.Layers.Layer.Background) {
            return mergeFrom((com.tophap.mapbox_gl.proto.Layers.Layer.Background)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.tophap.mapbox_gl.proto.Layers.Layer.Background other) {
          if (other == com.tophap.mapbox_gl.proto.Layers.Layer.Background.getDefaultInstance()) return this;
          if (!other.getId().isEmpty()) {
            id_ = other.id_;
            onChanged();
          }
          if (other.getVisible() != false) {
            setVisible(other.getVisible());
          }
          if (other.getMinZoom() != 0F) {
            setMinZoom(other.getMinZoom());
          }
          if (other.getMaxZoom() != 0F) {
            setMaxZoom(other.getMaxZoom());
          }
          if (other.hasColor()) {
            mergeColor(other.getColor());
          }
          if (!other.getPattern().isEmpty()) {
            pattern_ = other.pattern_;
            onChanged();
          }
          if (other.hasColorTransition()) {
            mergeColorTransition(other.getColorTransition());
          }
          if (other.hasPatternTransition()) {
            mergePatternTransition(other.getPatternTransition());
          }
          if (other.hasOpacityTransition()) {
            mergeOpacityTransition(other.getOpacityTransition());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.tophap.mapbox_gl.proto.Layers.Layer.Background parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.tophap.mapbox_gl.proto.Layers.Layer.Background) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private java.lang.Object id_ = "";
        /**
         * <code>string id = 1;</code>
         */
        public java.lang.String getId() {
          java.lang.Object ref = id_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            id_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string id = 1;</code>
         */
        public com.google.protobuf.ByteString
            getIdBytes() {
          java.lang.Object ref = id_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            id_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string id = 1;</code>
         */
        public Builder setId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          id_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string id = 1;</code>
         */
        public Builder clearId() {
          
          id_ = getDefaultInstance().getId();
          onChanged();
          return this;
        }
        /**
         * <code>string id = 1;</code>
         */
        public Builder setIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          id_ = value;
          onChanged();
          return this;
        }

        private boolean visible_ ;
        /**
         * <code>bool visible = 2;</code>
         */
        public boolean getVisible() {
          return visible_;
        }
        /**
         * <code>bool visible = 2;</code>
         */
        public Builder setVisible(boolean value) {
          
          visible_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>bool visible = 2;</code>
         */
        public Builder clearVisible() {
          
          visible_ = false;
          onChanged();
          return this;
        }

        private float minZoom_ ;
        /**
         * <code>float min_zoom = 3;</code>
         */
        public float getMinZoom() {
          return minZoom_;
        }
        /**
         * <code>float min_zoom = 3;</code>
         */
        public Builder setMinZoom(float value) {
          
          minZoom_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float min_zoom = 3;</code>
         */
        public Builder clearMinZoom() {
          
          minZoom_ = 0F;
          onChanged();
          return this;
        }

        private float maxZoom_ ;
        /**
         * <code>float max_zoom = 4;</code>
         */
        public float getMaxZoom() {
          return maxZoom_;
        }
        /**
         * <code>float max_zoom = 4;</code>
         */
        public Builder setMaxZoom(float value) {
          
          maxZoom_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float max_zoom = 4;</code>
         */
        public Builder clearMaxZoom() {
          
          maxZoom_ = 0F;
          onChanged();
          return this;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.Color color_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder> colorBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 5;</code>
         */
        public boolean hasColor() {
          return colorBuilder_ != null || color_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 5;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.Color getColor() {
          if (colorBuilder_ == null) {
            return color_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : color_;
          } else {
            return colorBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 5;</code>
         */
        public Builder setColor(com.tophap.mapbox_gl.proto.MapboxUtil.Color value) {
          if (colorBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            color_ = value;
            onChanged();
          } else {
            colorBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 5;</code>
         */
        public Builder setColor(
            com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder builderForValue) {
          if (colorBuilder_ == null) {
            color_ = builderForValue.build();
            onChanged();
          } else {
            colorBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 5;</code>
         */
        public Builder mergeColor(com.tophap.mapbox_gl.proto.MapboxUtil.Color value) {
          if (colorBuilder_ == null) {
            if (color_ != null) {
              color_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.newBuilder(color_).mergeFrom(value).buildPartial();
            } else {
              color_ = value;
            }
            onChanged();
          } else {
            colorBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 5;</code>
         */
        public Builder clearColor() {
          if (colorBuilder_ == null) {
            color_ = null;
            onChanged();
          } else {
            color_ = null;
            colorBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 5;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder getColorBuilder() {
          
          onChanged();
          return getColorFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 5;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getColorOrBuilder() {
          if (colorBuilder_ != null) {
            return colorBuilder_.getMessageOrBuilder();
          } else {
            return color_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : color_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 5;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder> 
            getColorFieldBuilder() {
          if (colorBuilder_ == null) {
            colorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder>(
                    getColor(),
                    getParentForChildren(),
                    isClean());
            color_ = null;
          }
          return colorBuilder_;
        }

        private java.lang.Object pattern_ = "";
        /**
         * <code>string pattern = 6;</code>
         */
        public java.lang.String getPattern() {
          java.lang.Object ref = pattern_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            pattern_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string pattern = 6;</code>
         */
        public com.google.protobuf.ByteString
            getPatternBytes() {
          java.lang.Object ref = pattern_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            pattern_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string pattern = 6;</code>
         */
        public Builder setPattern(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          pattern_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string pattern = 6;</code>
         */
        public Builder clearPattern() {
          
          pattern_ = getDefaultInstance().getPattern();
          onChanged();
          return this;
        }
        /**
         * <code>string pattern = 6;</code>
         */
        public Builder setPatternBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          pattern_ = value;
          onChanged();
          return this;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions colorTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> colorTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 8;</code>
         */
        public boolean hasColorTransition() {
          return colorTransitionBuilder_ != null || colorTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 8;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getColorTransition() {
          if (colorTransitionBuilder_ == null) {
            return colorTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : colorTransition_;
          } else {
            return colorTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 8;</code>
         */
        public Builder setColorTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (colorTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            colorTransition_ = value;
            onChanged();
          } else {
            colorTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 8;</code>
         */
        public Builder setColorTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (colorTransitionBuilder_ == null) {
            colorTransition_ = builderForValue.build();
            onChanged();
          } else {
            colorTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 8;</code>
         */
        public Builder mergeColorTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (colorTransitionBuilder_ == null) {
            if (colorTransition_ != null) {
              colorTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(colorTransition_).mergeFrom(value).buildPartial();
            } else {
              colorTransition_ = value;
            }
            onChanged();
          } else {
            colorTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 8;</code>
         */
        public Builder clearColorTransition() {
          if (colorTransitionBuilder_ == null) {
            colorTransition_ = null;
            onChanged();
          } else {
            colorTransition_ = null;
            colorTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 8;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getColorTransitionBuilder() {
          
          onChanged();
          return getColorTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 8;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getColorTransitionOrBuilder() {
          if (colorTransitionBuilder_ != null) {
            return colorTransitionBuilder_.getMessageOrBuilder();
          } else {
            return colorTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : colorTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 8;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getColorTransitionFieldBuilder() {
          if (colorTransitionBuilder_ == null) {
            colorTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getColorTransition(),
                    getParentForChildren(),
                    isClean());
            colorTransition_ = null;
          }
          return colorTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions patternTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> patternTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 9;</code>
         */
        public boolean hasPatternTransition() {
          return patternTransitionBuilder_ != null || patternTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 9;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getPatternTransition() {
          if (patternTransitionBuilder_ == null) {
            return patternTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : patternTransition_;
          } else {
            return patternTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 9;</code>
         */
        public Builder setPatternTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (patternTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            patternTransition_ = value;
            onChanged();
          } else {
            patternTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 9;</code>
         */
        public Builder setPatternTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (patternTransitionBuilder_ == null) {
            patternTransition_ = builderForValue.build();
            onChanged();
          } else {
            patternTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 9;</code>
         */
        public Builder mergePatternTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (patternTransitionBuilder_ == null) {
            if (patternTransition_ != null) {
              patternTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(patternTransition_).mergeFrom(value).buildPartial();
            } else {
              patternTransition_ = value;
            }
            onChanged();
          } else {
            patternTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 9;</code>
         */
        public Builder clearPatternTransition() {
          if (patternTransitionBuilder_ == null) {
            patternTransition_ = null;
            onChanged();
          } else {
            patternTransition_ = null;
            patternTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 9;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getPatternTransitionBuilder() {
          
          onChanged();
          return getPatternTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 9;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getPatternTransitionOrBuilder() {
          if (patternTransitionBuilder_ != null) {
            return patternTransitionBuilder_.getMessageOrBuilder();
          } else {
            return patternTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : patternTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 9;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getPatternTransitionFieldBuilder() {
          if (patternTransitionBuilder_ == null) {
            patternTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getPatternTransition(),
                    getParentForChildren(),
                    isClean());
            patternTransition_ = null;
          }
          return patternTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions opacityTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> opacityTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 10;</code>
         */
        public boolean hasOpacityTransition() {
          return opacityTransitionBuilder_ != null || opacityTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 10;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getOpacityTransition() {
          if (opacityTransitionBuilder_ == null) {
            return opacityTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : opacityTransition_;
          } else {
            return opacityTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 10;</code>
         */
        public Builder setOpacityTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (opacityTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            opacityTransition_ = value;
            onChanged();
          } else {
            opacityTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 10;</code>
         */
        public Builder setOpacityTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (opacityTransitionBuilder_ == null) {
            opacityTransition_ = builderForValue.build();
            onChanged();
          } else {
            opacityTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 10;</code>
         */
        public Builder mergeOpacityTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (opacityTransitionBuilder_ == null) {
            if (opacityTransition_ != null) {
              opacityTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(opacityTransition_).mergeFrom(value).buildPartial();
            } else {
              opacityTransition_ = value;
            }
            onChanged();
          } else {
            opacityTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 10;</code>
         */
        public Builder clearOpacityTransition() {
          if (opacityTransitionBuilder_ == null) {
            opacityTransition_ = null;
            onChanged();
          } else {
            opacityTransition_ = null;
            opacityTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 10;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getOpacityTransitionBuilder() {
          
          onChanged();
          return getOpacityTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 10;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getOpacityTransitionOrBuilder() {
          if (opacityTransitionBuilder_ != null) {
            return opacityTransitionBuilder_.getMessageOrBuilder();
          } else {
            return opacityTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : opacityTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 10;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getOpacityTransitionFieldBuilder() {
          if (opacityTransitionBuilder_ == null) {
            opacityTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getOpacityTransition(),
                    getParentForChildren(),
                    isClean());
            opacityTransition_ = null;
          }
          return opacityTransitionBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:com.tophap.mapbox_gl.proto.Layer.Background)
      }

      // @@protoc_insertion_point(class_scope:com.tophap.mapbox_gl.proto.Layer.Background)
      private static final com.tophap.mapbox_gl.proto.Layers.Layer.Background DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.tophap.mapbox_gl.proto.Layers.Layer.Background();
      }

      public static com.tophap.mapbox_gl.proto.Layers.Layer.Background getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Background>
          PARSER = new com.google.protobuf.AbstractParser<Background>() {
        @java.lang.Override
        public Background parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Background(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Background> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Background> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.tophap.mapbox_gl.proto.Layers.Layer.Background getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface CircleOrBuilder extends
        // @@protoc_insertion_point(interface_extends:com.tophap.mapbox_gl.proto.Layer.Circle)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>string id = 1;</code>
       */
      java.lang.String getId();
      /**
       * <code>string id = 1;</code>
       */
      com.google.protobuf.ByteString
          getIdBytes();

      /**
       * <code>string source_id = 2;</code>
       */
      java.lang.String getSourceId();
      /**
       * <code>string source_id = 2;</code>
       */
      com.google.protobuf.ByteString
          getSourceIdBytes();

      /**
       * <code>bool visible = 3;</code>
       */
      boolean getVisible();

      /**
       * <code>float min_zoom = 4;</code>
       */
      float getMinZoom();

      /**
       * <code>float max_zoom = 5;</code>
       */
      float getMaxZoom();

      /**
       * <code>float radius = 6;</code>
       */
      float getRadius();

      /**
       * <code>.com.tophap.mapbox_gl.proto.Color color = 7;</code>
       */
      boolean hasColor();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color color = 7;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.Color getColor();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color color = 7;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getColorOrBuilder();

      /**
       * <code>float blur = 8;</code>
       */
      float getBlur();

      /**
       * <code>repeated float translate = 10;</code>
       */
      java.util.List<java.lang.Float> getTranslateList();
      /**
       * <code>repeated float translate = 10;</code>
       */
      int getTranslateCount();
      /**
       * <code>repeated float translate = 10;</code>
       */
      float getTranslate(int index);

      /**
       * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor translate_anchor = 11;</code>
       */
      int getTranslateAnchorValue();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor translate_anchor = 11;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor getTranslateAnchor();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor pitch_scale = 12;</code>
       */
      int getPitchScaleValue();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor pitch_scale = 12;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor getPitchScale();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor pitch_alignment = 13;</code>
       */
      int getPitchAlignmentValue();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor pitch_alignment = 13;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor getPitchAlignment();

      /**
       * <code>float stroke_width = 14;</code>
       */
      float getStrokeWidth();

      /**
       * <code>.com.tophap.mapbox_gl.proto.Color stroke_color = 15;</code>
       */
      boolean hasStrokeColor();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color stroke_color = 15;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.Color getStrokeColor();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color stroke_color = 15;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getStrokeColorOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions radius_transition = 17;</code>
       */
      boolean hasRadiusTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions radius_transition = 17;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getRadiusTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions radius_transition = 17;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getRadiusTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 18;</code>
       */
      boolean hasColorTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 18;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getColorTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 18;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getColorTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions blur_transition = 19;</code>
       */
      boolean hasBlurTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions blur_transition = 19;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getBlurTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions blur_transition = 19;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getBlurTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 20;</code>
       */
      boolean hasOpacityTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 20;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getOpacityTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 20;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getOpacityTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 21;</code>
       */
      boolean hasTranslateTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 21;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getTranslateTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 21;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getTranslateTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_width_transition = 22;</code>
       */
      boolean hasStrokeWidthTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_width_transition = 22;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getStrokeWidthTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_width_transition = 22;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getStrokeWidthTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_color_transition = 23;</code>
       */
      boolean hasStrokeColorTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_color_transition = 23;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getStrokeColorTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_color_transition = 23;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getStrokeColorTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_opacity_transition = 24;</code>
       */
      boolean hasStrokeOpacityTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_opacity_transition = 24;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getStrokeOpacityTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_opacity_transition = 24;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getStrokeOpacityTransitionOrBuilder();
    }
    /**
     * Protobuf type {@code com.tophap.mapbox_gl.proto.Layer.Circle}
     */
    public  static final class Circle extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:com.tophap.mapbox_gl.proto.Layer.Circle)
        CircleOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Circle.newBuilder() to construct.
      private Circle(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Circle() {
        id_ = "";
        sourceId_ = "";
        translate_ = emptyFloatList();
        translateAnchor_ = 0;
        pitchScale_ = 0;
        pitchAlignment_ = 0;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Circle(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();

                id_ = s;
                break;
              }
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();

                sourceId_ = s;
                break;
              }
              case 24: {

                visible_ = input.readBool();
                break;
              }
              case 37: {

                minZoom_ = input.readFloat();
                break;
              }
              case 45: {

                maxZoom_ = input.readFloat();
                break;
              }
              case 53: {

                radius_ = input.readFloat();
                break;
              }
              case 58: {
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder subBuilder = null;
                if (color_ != null) {
                  subBuilder = color_.toBuilder();
                }
                color_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.Color.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(color_);
                  color_ = subBuilder.buildPartial();
                }

                break;
              }
              case 69: {

                blur_ = input.readFloat();
                break;
              }
              case 85: {
                if (!((mutable_bitField0_ & 0x00000100) != 0)) {
                  translate_ = newFloatList();
                  mutable_bitField0_ |= 0x00000100;
                }
                translate_.addFloat(input.readFloat());
                break;
              }
              case 82: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000100) != 0) && input.getBytesUntilLimit() > 0) {
                  translate_ = newFloatList();
                  mutable_bitField0_ |= 0x00000100;
                }
                while (input.getBytesUntilLimit() > 0) {
                  translate_.addFloat(input.readFloat());
                }
                input.popLimit(limit);
                break;
              }
              case 88: {
                int rawValue = input.readEnum();

                translateAnchor_ = rawValue;
                break;
              }
              case 96: {
                int rawValue = input.readEnum();

                pitchScale_ = rawValue;
                break;
              }
              case 104: {
                int rawValue = input.readEnum();

                pitchAlignment_ = rawValue;
                break;
              }
              case 117: {

                strokeWidth_ = input.readFloat();
                break;
              }
              case 122: {
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder subBuilder = null;
                if (strokeColor_ != null) {
                  subBuilder = strokeColor_.toBuilder();
                }
                strokeColor_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.Color.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(strokeColor_);
                  strokeColor_ = subBuilder.buildPartial();
                }

                break;
              }
              case 138: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (radiusTransition_ != null) {
                  subBuilder = radiusTransition_.toBuilder();
                }
                radiusTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(radiusTransition_);
                  radiusTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 146: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (colorTransition_ != null) {
                  subBuilder = colorTransition_.toBuilder();
                }
                colorTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(colorTransition_);
                  colorTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 154: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (blurTransition_ != null) {
                  subBuilder = blurTransition_.toBuilder();
                }
                blurTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(blurTransition_);
                  blurTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 162: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (opacityTransition_ != null) {
                  subBuilder = opacityTransition_.toBuilder();
                }
                opacityTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(opacityTransition_);
                  opacityTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 170: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (translateTransition_ != null) {
                  subBuilder = translateTransition_.toBuilder();
                }
                translateTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(translateTransition_);
                  translateTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 178: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (strokeWidthTransition_ != null) {
                  subBuilder = strokeWidthTransition_.toBuilder();
                }
                strokeWidthTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(strokeWidthTransition_);
                  strokeWidthTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 186: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (strokeColorTransition_ != null) {
                  subBuilder = strokeColorTransition_.toBuilder();
                }
                strokeColorTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(strokeColorTransition_);
                  strokeColorTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 194: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (strokeOpacityTransition_ != null) {
                  subBuilder = strokeOpacityTransition_.toBuilder();
                }
                strokeOpacityTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(strokeOpacityTransition_);
                  strokeOpacityTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000100) != 0)) {
            translate_.makeImmutable(); // C
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_Circle_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_Circle_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.tophap.mapbox_gl.proto.Layers.Layer.Circle.class, com.tophap.mapbox_gl.proto.Layers.Layer.Circle.Builder.class);
      }

      private int bitField0_;
      public static final int ID_FIELD_NUMBER = 1;
      private volatile java.lang.Object id_;
      /**
       * <code>string id = 1;</code>
       */
      public java.lang.String getId() {
        java.lang.Object ref = id_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          id_ = s;
          return s;
        }
      }
      /**
       * <code>string id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = id_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          id_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int SOURCE_ID_FIELD_NUMBER = 2;
      private volatile java.lang.Object sourceId_;
      /**
       * <code>string source_id = 2;</code>
       */
      public java.lang.String getSourceId() {
        java.lang.Object ref = sourceId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          sourceId_ = s;
          return s;
        }
      }
      /**
       * <code>string source_id = 2;</code>
       */
      public com.google.protobuf.ByteString
          getSourceIdBytes() {
        java.lang.Object ref = sourceId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          sourceId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int VISIBLE_FIELD_NUMBER = 3;
      private boolean visible_;
      /**
       * <code>bool visible = 3;</code>
       */
      public boolean getVisible() {
        return visible_;
      }

      public static final int MIN_ZOOM_FIELD_NUMBER = 4;
      private float minZoom_;
      /**
       * <code>float min_zoom = 4;</code>
       */
      public float getMinZoom() {
        return minZoom_;
      }

      public static final int MAX_ZOOM_FIELD_NUMBER = 5;
      private float maxZoom_;
      /**
       * <code>float max_zoom = 5;</code>
       */
      public float getMaxZoom() {
        return maxZoom_;
      }

      public static final int RADIUS_FIELD_NUMBER = 6;
      private float radius_;
      /**
       * <code>float radius = 6;</code>
       */
      public float getRadius() {
        return radius_;
      }

      public static final int COLOR_FIELD_NUMBER = 7;
      private com.tophap.mapbox_gl.proto.MapboxUtil.Color color_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color color = 7;</code>
       */
      public boolean hasColor() {
        return color_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color color = 7;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.Color getColor() {
        return color_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : color_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color color = 7;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getColorOrBuilder() {
        return getColor();
      }

      public static final int BLUR_FIELD_NUMBER = 8;
      private float blur_;
      /**
       * <code>float blur = 8;</code>
       */
      public float getBlur() {
        return blur_;
      }

      public static final int TRANSLATE_FIELD_NUMBER = 10;
      private com.google.protobuf.Internal.FloatList translate_;
      /**
       * <code>repeated float translate = 10;</code>
       */
      public java.util.List<java.lang.Float>
          getTranslateList() {
        return translate_;
      }
      /**
       * <code>repeated float translate = 10;</code>
       */
      public int getTranslateCount() {
        return translate_.size();
      }
      /**
       * <code>repeated float translate = 10;</code>
       */
      public float getTranslate(int index) {
        return translate_.getFloat(index);
      }
      private int translateMemoizedSerializedSize = -1;

      public static final int TRANSLATE_ANCHOR_FIELD_NUMBER = 11;
      private int translateAnchor_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor translate_anchor = 11;</code>
       */
      public int getTranslateAnchorValue() {
        return translateAnchor_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor translate_anchor = 11;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor getTranslateAnchor() {
        @SuppressWarnings("deprecation")
        com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor result = com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.valueOf(translateAnchor_);
        return result == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.UNRECOGNIZED : result;
      }

      public static final int PITCH_SCALE_FIELD_NUMBER = 12;
      private int pitchScale_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor pitch_scale = 12;</code>
       */
      public int getPitchScaleValue() {
        return pitchScale_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor pitch_scale = 12;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor getPitchScale() {
        @SuppressWarnings("deprecation")
        com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor result = com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.valueOf(pitchScale_);
        return result == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.UNRECOGNIZED : result;
      }

      public static final int PITCH_ALIGNMENT_FIELD_NUMBER = 13;
      private int pitchAlignment_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor pitch_alignment = 13;</code>
       */
      public int getPitchAlignmentValue() {
        return pitchAlignment_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor pitch_alignment = 13;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor getPitchAlignment() {
        @SuppressWarnings("deprecation")
        com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor result = com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.valueOf(pitchAlignment_);
        return result == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.UNRECOGNIZED : result;
      }

      public static final int STROKE_WIDTH_FIELD_NUMBER = 14;
      private float strokeWidth_;
      /**
       * <code>float stroke_width = 14;</code>
       */
      public float getStrokeWidth() {
        return strokeWidth_;
      }

      public static final int STROKE_COLOR_FIELD_NUMBER = 15;
      private com.tophap.mapbox_gl.proto.MapboxUtil.Color strokeColor_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color stroke_color = 15;</code>
       */
      public boolean hasStrokeColor() {
        return strokeColor_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color stroke_color = 15;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.Color getStrokeColor() {
        return strokeColor_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : strokeColor_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color stroke_color = 15;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getStrokeColorOrBuilder() {
        return getStrokeColor();
      }

      public static final int RADIUS_TRANSITION_FIELD_NUMBER = 17;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions radiusTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions radius_transition = 17;</code>
       */
      public boolean hasRadiusTransition() {
        return radiusTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions radius_transition = 17;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getRadiusTransition() {
        return radiusTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : radiusTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions radius_transition = 17;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getRadiusTransitionOrBuilder() {
        return getRadiusTransition();
      }

      public static final int COLOR_TRANSITION_FIELD_NUMBER = 18;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions colorTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 18;</code>
       */
      public boolean hasColorTransition() {
        return colorTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 18;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getColorTransition() {
        return colorTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : colorTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 18;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getColorTransitionOrBuilder() {
        return getColorTransition();
      }

      public static final int BLUR_TRANSITION_FIELD_NUMBER = 19;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions blurTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions blur_transition = 19;</code>
       */
      public boolean hasBlurTransition() {
        return blurTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions blur_transition = 19;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getBlurTransition() {
        return blurTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : blurTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions blur_transition = 19;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getBlurTransitionOrBuilder() {
        return getBlurTransition();
      }

      public static final int OPACITY_TRANSITION_FIELD_NUMBER = 20;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions opacityTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 20;</code>
       */
      public boolean hasOpacityTransition() {
        return opacityTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 20;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getOpacityTransition() {
        return opacityTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : opacityTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 20;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getOpacityTransitionOrBuilder() {
        return getOpacityTransition();
      }

      public static final int TRANSLATE_TRANSITION_FIELD_NUMBER = 21;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions translateTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 21;</code>
       */
      public boolean hasTranslateTransition() {
        return translateTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 21;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getTranslateTransition() {
        return translateTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : translateTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 21;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getTranslateTransitionOrBuilder() {
        return getTranslateTransition();
      }

      public static final int STROKE_WIDTH_TRANSITION_FIELD_NUMBER = 22;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions strokeWidthTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_width_transition = 22;</code>
       */
      public boolean hasStrokeWidthTransition() {
        return strokeWidthTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_width_transition = 22;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getStrokeWidthTransition() {
        return strokeWidthTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : strokeWidthTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_width_transition = 22;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getStrokeWidthTransitionOrBuilder() {
        return getStrokeWidthTransition();
      }

      public static final int STROKE_COLOR_TRANSITION_FIELD_NUMBER = 23;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions strokeColorTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_color_transition = 23;</code>
       */
      public boolean hasStrokeColorTransition() {
        return strokeColorTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_color_transition = 23;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getStrokeColorTransition() {
        return strokeColorTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : strokeColorTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_color_transition = 23;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getStrokeColorTransitionOrBuilder() {
        return getStrokeColorTransition();
      }

      public static final int STROKE_OPACITY_TRANSITION_FIELD_NUMBER = 24;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions strokeOpacityTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_opacity_transition = 24;</code>
       */
      public boolean hasStrokeOpacityTransition() {
        return strokeOpacityTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_opacity_transition = 24;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getStrokeOpacityTransition() {
        return strokeOpacityTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : strokeOpacityTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_opacity_transition = 24;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getStrokeOpacityTransitionOrBuilder() {
        return getStrokeOpacityTransition();
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (!getIdBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, id_);
        }
        if (!getSourceIdBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, sourceId_);
        }
        if (visible_ != false) {
          output.writeBool(3, visible_);
        }
        if (minZoom_ != 0F) {
          output.writeFloat(4, minZoom_);
        }
        if (maxZoom_ != 0F) {
          output.writeFloat(5, maxZoom_);
        }
        if (radius_ != 0F) {
          output.writeFloat(6, radius_);
        }
        if (color_ != null) {
          output.writeMessage(7, getColor());
        }
        if (blur_ != 0F) {
          output.writeFloat(8, blur_);
        }
        if (getTranslateList().size() > 0) {
          output.writeUInt32NoTag(82);
          output.writeUInt32NoTag(translateMemoizedSerializedSize);
        }
        for (int i = 0; i < translate_.size(); i++) {
          output.writeFloatNoTag(translate_.getFloat(i));
        }
        if (translateAnchor_ != com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.MAP.getNumber()) {
          output.writeEnum(11, translateAnchor_);
        }
        if (pitchScale_ != com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.MAP.getNumber()) {
          output.writeEnum(12, pitchScale_);
        }
        if (pitchAlignment_ != com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.MAP.getNumber()) {
          output.writeEnum(13, pitchAlignment_);
        }
        if (strokeWidth_ != 0F) {
          output.writeFloat(14, strokeWidth_);
        }
        if (strokeColor_ != null) {
          output.writeMessage(15, getStrokeColor());
        }
        if (radiusTransition_ != null) {
          output.writeMessage(17, getRadiusTransition());
        }
        if (colorTransition_ != null) {
          output.writeMessage(18, getColorTransition());
        }
        if (blurTransition_ != null) {
          output.writeMessage(19, getBlurTransition());
        }
        if (opacityTransition_ != null) {
          output.writeMessage(20, getOpacityTransition());
        }
        if (translateTransition_ != null) {
          output.writeMessage(21, getTranslateTransition());
        }
        if (strokeWidthTransition_ != null) {
          output.writeMessage(22, getStrokeWidthTransition());
        }
        if (strokeColorTransition_ != null) {
          output.writeMessage(23, getStrokeColorTransition());
        }
        if (strokeOpacityTransition_ != null) {
          output.writeMessage(24, getStrokeOpacityTransition());
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!getIdBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, id_);
        }
        if (!getSourceIdBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, sourceId_);
        }
        if (visible_ != false) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(3, visible_);
        }
        if (minZoom_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(4, minZoom_);
        }
        if (maxZoom_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(5, maxZoom_);
        }
        if (radius_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(6, radius_);
        }
        if (color_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(7, getColor());
        }
        if (blur_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(8, blur_);
        }
        {
          int dataSize = 0;
          dataSize = 4 * getTranslateList().size();
          size += dataSize;
          if (!getTranslateList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          translateMemoizedSerializedSize = dataSize;
        }
        if (translateAnchor_ != com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.MAP.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(11, translateAnchor_);
        }
        if (pitchScale_ != com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.MAP.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(12, pitchScale_);
        }
        if (pitchAlignment_ != com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.MAP.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(13, pitchAlignment_);
        }
        if (strokeWidth_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(14, strokeWidth_);
        }
        if (strokeColor_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(15, getStrokeColor());
        }
        if (radiusTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(17, getRadiusTransition());
        }
        if (colorTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(18, getColorTransition());
        }
        if (blurTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(19, getBlurTransition());
        }
        if (opacityTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(20, getOpacityTransition());
        }
        if (translateTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(21, getTranslateTransition());
        }
        if (strokeWidthTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(22, getStrokeWidthTransition());
        }
        if (strokeColorTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(23, getStrokeColorTransition());
        }
        if (strokeOpacityTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(24, getStrokeOpacityTransition());
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.tophap.mapbox_gl.proto.Layers.Layer.Circle)) {
          return super.equals(obj);
        }
        com.tophap.mapbox_gl.proto.Layers.Layer.Circle other = (com.tophap.mapbox_gl.proto.Layers.Layer.Circle) obj;

        if (!getId()
            .equals(other.getId())) return false;
        if (!getSourceId()
            .equals(other.getSourceId())) return false;
        if (getVisible()
            != other.getVisible()) return false;
        if (java.lang.Float.floatToIntBits(getMinZoom())
            != java.lang.Float.floatToIntBits(
                other.getMinZoom())) return false;
        if (java.lang.Float.floatToIntBits(getMaxZoom())
            != java.lang.Float.floatToIntBits(
                other.getMaxZoom())) return false;
        if (java.lang.Float.floatToIntBits(getRadius())
            != java.lang.Float.floatToIntBits(
                other.getRadius())) return false;
        if (hasColor() != other.hasColor()) return false;
        if (hasColor()) {
          if (!getColor()
              .equals(other.getColor())) return false;
        }
        if (java.lang.Float.floatToIntBits(getBlur())
            != java.lang.Float.floatToIntBits(
                other.getBlur())) return false;
        if (!getTranslateList()
            .equals(other.getTranslateList())) return false;
        if (translateAnchor_ != other.translateAnchor_) return false;
        if (pitchScale_ != other.pitchScale_) return false;
        if (pitchAlignment_ != other.pitchAlignment_) return false;
        if (java.lang.Float.floatToIntBits(getStrokeWidth())
            != java.lang.Float.floatToIntBits(
                other.getStrokeWidth())) return false;
        if (hasStrokeColor() != other.hasStrokeColor()) return false;
        if (hasStrokeColor()) {
          if (!getStrokeColor()
              .equals(other.getStrokeColor())) return false;
        }
        if (hasRadiusTransition() != other.hasRadiusTransition()) return false;
        if (hasRadiusTransition()) {
          if (!getRadiusTransition()
              .equals(other.getRadiusTransition())) return false;
        }
        if (hasColorTransition() != other.hasColorTransition()) return false;
        if (hasColorTransition()) {
          if (!getColorTransition()
              .equals(other.getColorTransition())) return false;
        }
        if (hasBlurTransition() != other.hasBlurTransition()) return false;
        if (hasBlurTransition()) {
          if (!getBlurTransition()
              .equals(other.getBlurTransition())) return false;
        }
        if (hasOpacityTransition() != other.hasOpacityTransition()) return false;
        if (hasOpacityTransition()) {
          if (!getOpacityTransition()
              .equals(other.getOpacityTransition())) return false;
        }
        if (hasTranslateTransition() != other.hasTranslateTransition()) return false;
        if (hasTranslateTransition()) {
          if (!getTranslateTransition()
              .equals(other.getTranslateTransition())) return false;
        }
        if (hasStrokeWidthTransition() != other.hasStrokeWidthTransition()) return false;
        if (hasStrokeWidthTransition()) {
          if (!getStrokeWidthTransition()
              .equals(other.getStrokeWidthTransition())) return false;
        }
        if (hasStrokeColorTransition() != other.hasStrokeColorTransition()) return false;
        if (hasStrokeColorTransition()) {
          if (!getStrokeColorTransition()
              .equals(other.getStrokeColorTransition())) return false;
        }
        if (hasStrokeOpacityTransition() != other.hasStrokeOpacityTransition()) return false;
        if (hasStrokeOpacityTransition()) {
          if (!getStrokeOpacityTransition()
              .equals(other.getStrokeOpacityTransition())) return false;
        }
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + ID_FIELD_NUMBER;
        hash = (53 * hash) + getId().hashCode();
        hash = (37 * hash) + SOURCE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getSourceId().hashCode();
        hash = (37 * hash) + VISIBLE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getVisible());
        hash = (37 * hash) + MIN_ZOOM_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMinZoom());
        hash = (37 * hash) + MAX_ZOOM_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMaxZoom());
        hash = (37 * hash) + RADIUS_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getRadius());
        if (hasColor()) {
          hash = (37 * hash) + COLOR_FIELD_NUMBER;
          hash = (53 * hash) + getColor().hashCode();
        }
        hash = (37 * hash) + BLUR_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getBlur());
        if (getTranslateCount() > 0) {
          hash = (37 * hash) + TRANSLATE_FIELD_NUMBER;
          hash = (53 * hash) + getTranslateList().hashCode();
        }
        hash = (37 * hash) + TRANSLATE_ANCHOR_FIELD_NUMBER;
        hash = (53 * hash) + translateAnchor_;
        hash = (37 * hash) + PITCH_SCALE_FIELD_NUMBER;
        hash = (53 * hash) + pitchScale_;
        hash = (37 * hash) + PITCH_ALIGNMENT_FIELD_NUMBER;
        hash = (53 * hash) + pitchAlignment_;
        hash = (37 * hash) + STROKE_WIDTH_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getStrokeWidth());
        if (hasStrokeColor()) {
          hash = (37 * hash) + STROKE_COLOR_FIELD_NUMBER;
          hash = (53 * hash) + getStrokeColor().hashCode();
        }
        if (hasRadiusTransition()) {
          hash = (37 * hash) + RADIUS_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getRadiusTransition().hashCode();
        }
        if (hasColorTransition()) {
          hash = (37 * hash) + COLOR_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getColorTransition().hashCode();
        }
        if (hasBlurTransition()) {
          hash = (37 * hash) + BLUR_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getBlurTransition().hashCode();
        }
        if (hasOpacityTransition()) {
          hash = (37 * hash) + OPACITY_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getOpacityTransition().hashCode();
        }
        if (hasTranslateTransition()) {
          hash = (37 * hash) + TRANSLATE_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getTranslateTransition().hashCode();
        }
        if (hasStrokeWidthTransition()) {
          hash = (37 * hash) + STROKE_WIDTH_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getStrokeWidthTransition().hashCode();
        }
        if (hasStrokeColorTransition()) {
          hash = (37 * hash) + STROKE_COLOR_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getStrokeColorTransition().hashCode();
        }
        if (hasStrokeOpacityTransition()) {
          hash = (37 * hash) + STROKE_OPACITY_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getStrokeOpacityTransition().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.tophap.mapbox_gl.proto.Layers.Layer.Circle parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Circle parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Circle parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Circle parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Circle parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Circle parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Circle parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Circle parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Circle parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Circle parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Circle parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Circle parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.tophap.mapbox_gl.proto.Layers.Layer.Circle prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.tophap.mapbox_gl.proto.Layer.Circle}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:com.tophap.mapbox_gl.proto.Layer.Circle)
          com.tophap.mapbox_gl.proto.Layers.Layer.CircleOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_Circle_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_Circle_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.tophap.mapbox_gl.proto.Layers.Layer.Circle.class, com.tophap.mapbox_gl.proto.Layers.Layer.Circle.Builder.class);
        }

        // Construct using com.tophap.mapbox_gl.proto.Layers.Layer.Circle.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          id_ = "";

          sourceId_ = "";

          visible_ = false;

          minZoom_ = 0F;

          maxZoom_ = 0F;

          radius_ = 0F;

          if (colorBuilder_ == null) {
            color_ = null;
          } else {
            color_ = null;
            colorBuilder_ = null;
          }
          blur_ = 0F;

          translate_ = emptyFloatList();
          bitField0_ = (bitField0_ & ~0x00000100);
          translateAnchor_ = 0;

          pitchScale_ = 0;

          pitchAlignment_ = 0;

          strokeWidth_ = 0F;

          if (strokeColorBuilder_ == null) {
            strokeColor_ = null;
          } else {
            strokeColor_ = null;
            strokeColorBuilder_ = null;
          }
          if (radiusTransitionBuilder_ == null) {
            radiusTransition_ = null;
          } else {
            radiusTransition_ = null;
            radiusTransitionBuilder_ = null;
          }
          if (colorTransitionBuilder_ == null) {
            colorTransition_ = null;
          } else {
            colorTransition_ = null;
            colorTransitionBuilder_ = null;
          }
          if (blurTransitionBuilder_ == null) {
            blurTransition_ = null;
          } else {
            blurTransition_ = null;
            blurTransitionBuilder_ = null;
          }
          if (opacityTransitionBuilder_ == null) {
            opacityTransition_ = null;
          } else {
            opacityTransition_ = null;
            opacityTransitionBuilder_ = null;
          }
          if (translateTransitionBuilder_ == null) {
            translateTransition_ = null;
          } else {
            translateTransition_ = null;
            translateTransitionBuilder_ = null;
          }
          if (strokeWidthTransitionBuilder_ == null) {
            strokeWidthTransition_ = null;
          } else {
            strokeWidthTransition_ = null;
            strokeWidthTransitionBuilder_ = null;
          }
          if (strokeColorTransitionBuilder_ == null) {
            strokeColorTransition_ = null;
          } else {
            strokeColorTransition_ = null;
            strokeColorTransitionBuilder_ = null;
          }
          if (strokeOpacityTransitionBuilder_ == null) {
            strokeOpacityTransition_ = null;
          } else {
            strokeOpacityTransition_ = null;
            strokeOpacityTransitionBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_Circle_descriptor;
        }

        @java.lang.Override
        public com.tophap.mapbox_gl.proto.Layers.Layer.Circle getDefaultInstanceForType() {
          return com.tophap.mapbox_gl.proto.Layers.Layer.Circle.getDefaultInstance();
        }

        @java.lang.Override
        public com.tophap.mapbox_gl.proto.Layers.Layer.Circle build() {
          com.tophap.mapbox_gl.proto.Layers.Layer.Circle result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.tophap.mapbox_gl.proto.Layers.Layer.Circle buildPartial() {
          com.tophap.mapbox_gl.proto.Layers.Layer.Circle result = new com.tophap.mapbox_gl.proto.Layers.Layer.Circle(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          result.id_ = id_;
          result.sourceId_ = sourceId_;
          result.visible_ = visible_;
          result.minZoom_ = minZoom_;
          result.maxZoom_ = maxZoom_;
          result.radius_ = radius_;
          if (colorBuilder_ == null) {
            result.color_ = color_;
          } else {
            result.color_ = colorBuilder_.build();
          }
          result.blur_ = blur_;
          if (((bitField0_ & 0x00000100) != 0)) {
            translate_.makeImmutable();
            bitField0_ = (bitField0_ & ~0x00000100);
          }
          result.translate_ = translate_;
          result.translateAnchor_ = translateAnchor_;
          result.pitchScale_ = pitchScale_;
          result.pitchAlignment_ = pitchAlignment_;
          result.strokeWidth_ = strokeWidth_;
          if (strokeColorBuilder_ == null) {
            result.strokeColor_ = strokeColor_;
          } else {
            result.strokeColor_ = strokeColorBuilder_.build();
          }
          if (radiusTransitionBuilder_ == null) {
            result.radiusTransition_ = radiusTransition_;
          } else {
            result.radiusTransition_ = radiusTransitionBuilder_.build();
          }
          if (colorTransitionBuilder_ == null) {
            result.colorTransition_ = colorTransition_;
          } else {
            result.colorTransition_ = colorTransitionBuilder_.build();
          }
          if (blurTransitionBuilder_ == null) {
            result.blurTransition_ = blurTransition_;
          } else {
            result.blurTransition_ = blurTransitionBuilder_.build();
          }
          if (opacityTransitionBuilder_ == null) {
            result.opacityTransition_ = opacityTransition_;
          } else {
            result.opacityTransition_ = opacityTransitionBuilder_.build();
          }
          if (translateTransitionBuilder_ == null) {
            result.translateTransition_ = translateTransition_;
          } else {
            result.translateTransition_ = translateTransitionBuilder_.build();
          }
          if (strokeWidthTransitionBuilder_ == null) {
            result.strokeWidthTransition_ = strokeWidthTransition_;
          } else {
            result.strokeWidthTransition_ = strokeWidthTransitionBuilder_.build();
          }
          if (strokeColorTransitionBuilder_ == null) {
            result.strokeColorTransition_ = strokeColorTransition_;
          } else {
            result.strokeColorTransition_ = strokeColorTransitionBuilder_.build();
          }
          if (strokeOpacityTransitionBuilder_ == null) {
            result.strokeOpacityTransition_ = strokeOpacityTransition_;
          } else {
            result.strokeOpacityTransition_ = strokeOpacityTransitionBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.tophap.mapbox_gl.proto.Layers.Layer.Circle) {
            return mergeFrom((com.tophap.mapbox_gl.proto.Layers.Layer.Circle)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.tophap.mapbox_gl.proto.Layers.Layer.Circle other) {
          if (other == com.tophap.mapbox_gl.proto.Layers.Layer.Circle.getDefaultInstance()) return this;
          if (!other.getId().isEmpty()) {
            id_ = other.id_;
            onChanged();
          }
          if (!other.getSourceId().isEmpty()) {
            sourceId_ = other.sourceId_;
            onChanged();
          }
          if (other.getVisible() != false) {
            setVisible(other.getVisible());
          }
          if (other.getMinZoom() != 0F) {
            setMinZoom(other.getMinZoom());
          }
          if (other.getMaxZoom() != 0F) {
            setMaxZoom(other.getMaxZoom());
          }
          if (other.getRadius() != 0F) {
            setRadius(other.getRadius());
          }
          if (other.hasColor()) {
            mergeColor(other.getColor());
          }
          if (other.getBlur() != 0F) {
            setBlur(other.getBlur());
          }
          if (!other.translate_.isEmpty()) {
            if (translate_.isEmpty()) {
              translate_ = other.translate_;
              bitField0_ = (bitField0_ & ~0x00000100);
            } else {
              ensureTranslateIsMutable();
              translate_.addAll(other.translate_);
            }
            onChanged();
          }
          if (other.translateAnchor_ != 0) {
            setTranslateAnchorValue(other.getTranslateAnchorValue());
          }
          if (other.pitchScale_ != 0) {
            setPitchScaleValue(other.getPitchScaleValue());
          }
          if (other.pitchAlignment_ != 0) {
            setPitchAlignmentValue(other.getPitchAlignmentValue());
          }
          if (other.getStrokeWidth() != 0F) {
            setStrokeWidth(other.getStrokeWidth());
          }
          if (other.hasStrokeColor()) {
            mergeStrokeColor(other.getStrokeColor());
          }
          if (other.hasRadiusTransition()) {
            mergeRadiusTransition(other.getRadiusTransition());
          }
          if (other.hasColorTransition()) {
            mergeColorTransition(other.getColorTransition());
          }
          if (other.hasBlurTransition()) {
            mergeBlurTransition(other.getBlurTransition());
          }
          if (other.hasOpacityTransition()) {
            mergeOpacityTransition(other.getOpacityTransition());
          }
          if (other.hasTranslateTransition()) {
            mergeTranslateTransition(other.getTranslateTransition());
          }
          if (other.hasStrokeWidthTransition()) {
            mergeStrokeWidthTransition(other.getStrokeWidthTransition());
          }
          if (other.hasStrokeColorTransition()) {
            mergeStrokeColorTransition(other.getStrokeColorTransition());
          }
          if (other.hasStrokeOpacityTransition()) {
            mergeStrokeOpacityTransition(other.getStrokeOpacityTransition());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.tophap.mapbox_gl.proto.Layers.Layer.Circle parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.tophap.mapbox_gl.proto.Layers.Layer.Circle) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private java.lang.Object id_ = "";
        /**
         * <code>string id = 1;</code>
         */
        public java.lang.String getId() {
          java.lang.Object ref = id_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            id_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string id = 1;</code>
         */
        public com.google.protobuf.ByteString
            getIdBytes() {
          java.lang.Object ref = id_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            id_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string id = 1;</code>
         */
        public Builder setId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          id_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string id = 1;</code>
         */
        public Builder clearId() {
          
          id_ = getDefaultInstance().getId();
          onChanged();
          return this;
        }
        /**
         * <code>string id = 1;</code>
         */
        public Builder setIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          id_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object sourceId_ = "";
        /**
         * <code>string source_id = 2;</code>
         */
        public java.lang.String getSourceId() {
          java.lang.Object ref = sourceId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            sourceId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string source_id = 2;</code>
         */
        public com.google.protobuf.ByteString
            getSourceIdBytes() {
          java.lang.Object ref = sourceId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            sourceId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string source_id = 2;</code>
         */
        public Builder setSourceId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          sourceId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string source_id = 2;</code>
         */
        public Builder clearSourceId() {
          
          sourceId_ = getDefaultInstance().getSourceId();
          onChanged();
          return this;
        }
        /**
         * <code>string source_id = 2;</code>
         */
        public Builder setSourceIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          sourceId_ = value;
          onChanged();
          return this;
        }

        private boolean visible_ ;
        /**
         * <code>bool visible = 3;</code>
         */
        public boolean getVisible() {
          return visible_;
        }
        /**
         * <code>bool visible = 3;</code>
         */
        public Builder setVisible(boolean value) {
          
          visible_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>bool visible = 3;</code>
         */
        public Builder clearVisible() {
          
          visible_ = false;
          onChanged();
          return this;
        }

        private float minZoom_ ;
        /**
         * <code>float min_zoom = 4;</code>
         */
        public float getMinZoom() {
          return minZoom_;
        }
        /**
         * <code>float min_zoom = 4;</code>
         */
        public Builder setMinZoom(float value) {
          
          minZoom_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float min_zoom = 4;</code>
         */
        public Builder clearMinZoom() {
          
          minZoom_ = 0F;
          onChanged();
          return this;
        }

        private float maxZoom_ ;
        /**
         * <code>float max_zoom = 5;</code>
         */
        public float getMaxZoom() {
          return maxZoom_;
        }
        /**
         * <code>float max_zoom = 5;</code>
         */
        public Builder setMaxZoom(float value) {
          
          maxZoom_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float max_zoom = 5;</code>
         */
        public Builder clearMaxZoom() {
          
          maxZoom_ = 0F;
          onChanged();
          return this;
        }

        private float radius_ ;
        /**
         * <code>float radius = 6;</code>
         */
        public float getRadius() {
          return radius_;
        }
        /**
         * <code>float radius = 6;</code>
         */
        public Builder setRadius(float value) {
          
          radius_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float radius = 6;</code>
         */
        public Builder clearRadius() {
          
          radius_ = 0F;
          onChanged();
          return this;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.Color color_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder> colorBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 7;</code>
         */
        public boolean hasColor() {
          return colorBuilder_ != null || color_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 7;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.Color getColor() {
          if (colorBuilder_ == null) {
            return color_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : color_;
          } else {
            return colorBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 7;</code>
         */
        public Builder setColor(com.tophap.mapbox_gl.proto.MapboxUtil.Color value) {
          if (colorBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            color_ = value;
            onChanged();
          } else {
            colorBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 7;</code>
         */
        public Builder setColor(
            com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder builderForValue) {
          if (colorBuilder_ == null) {
            color_ = builderForValue.build();
            onChanged();
          } else {
            colorBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 7;</code>
         */
        public Builder mergeColor(com.tophap.mapbox_gl.proto.MapboxUtil.Color value) {
          if (colorBuilder_ == null) {
            if (color_ != null) {
              color_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.newBuilder(color_).mergeFrom(value).buildPartial();
            } else {
              color_ = value;
            }
            onChanged();
          } else {
            colorBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 7;</code>
         */
        public Builder clearColor() {
          if (colorBuilder_ == null) {
            color_ = null;
            onChanged();
          } else {
            color_ = null;
            colorBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 7;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder getColorBuilder() {
          
          onChanged();
          return getColorFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 7;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getColorOrBuilder() {
          if (colorBuilder_ != null) {
            return colorBuilder_.getMessageOrBuilder();
          } else {
            return color_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : color_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 7;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder> 
            getColorFieldBuilder() {
          if (colorBuilder_ == null) {
            colorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder>(
                    getColor(),
                    getParentForChildren(),
                    isClean());
            color_ = null;
          }
          return colorBuilder_;
        }

        private float blur_ ;
        /**
         * <code>float blur = 8;</code>
         */
        public float getBlur() {
          return blur_;
        }
        /**
         * <code>float blur = 8;</code>
         */
        public Builder setBlur(float value) {
          
          blur_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float blur = 8;</code>
         */
        public Builder clearBlur() {
          
          blur_ = 0F;
          onChanged();
          return this;
        }

        private com.google.protobuf.Internal.FloatList translate_ = emptyFloatList();
        private void ensureTranslateIsMutable() {
          if (!((bitField0_ & 0x00000100) != 0)) {
            translate_ = mutableCopy(translate_);
            bitField0_ |= 0x00000100;
           }
        }
        /**
         * <code>repeated float translate = 10;</code>
         */
        public java.util.List<java.lang.Float>
            getTranslateList() {
          return ((bitField0_ & 0x00000100) != 0) ?
                   java.util.Collections.unmodifiableList(translate_) : translate_;
        }
        /**
         * <code>repeated float translate = 10;</code>
         */
        public int getTranslateCount() {
          return translate_.size();
        }
        /**
         * <code>repeated float translate = 10;</code>
         */
        public float getTranslate(int index) {
          return translate_.getFloat(index);
        }
        /**
         * <code>repeated float translate = 10;</code>
         */
        public Builder setTranslate(
            int index, float value) {
          ensureTranslateIsMutable();
          translate_.setFloat(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float translate = 10;</code>
         */
        public Builder addTranslate(float value) {
          ensureTranslateIsMutable();
          translate_.addFloat(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float translate = 10;</code>
         */
        public Builder addAllTranslate(
            java.lang.Iterable<? extends java.lang.Float> values) {
          ensureTranslateIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, translate_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float translate = 10;</code>
         */
        public Builder clearTranslate() {
          translate_ = emptyFloatList();
          bitField0_ = (bitField0_ & ~0x00000100);
          onChanged();
          return this;
        }

        private int translateAnchor_ = 0;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor translate_anchor = 11;</code>
         */
        public int getTranslateAnchorValue() {
          return translateAnchor_;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor translate_anchor = 11;</code>
         */
        public Builder setTranslateAnchorValue(int value) {
          translateAnchor_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor translate_anchor = 11;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor getTranslateAnchor() {
          @SuppressWarnings("deprecation")
          com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor result = com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.valueOf(translateAnchor_);
          return result == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.UNRECOGNIZED : result;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor translate_anchor = 11;</code>
         */
        public Builder setTranslateAnchor(com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor value) {
          if (value == null) {
            throw new NullPointerException();
          }
          
          translateAnchor_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor translate_anchor = 11;</code>
         */
        public Builder clearTranslateAnchor() {
          
          translateAnchor_ = 0;
          onChanged();
          return this;
        }

        private int pitchScale_ = 0;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor pitch_scale = 12;</code>
         */
        public int getPitchScaleValue() {
          return pitchScale_;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor pitch_scale = 12;</code>
         */
        public Builder setPitchScaleValue(int value) {
          pitchScale_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor pitch_scale = 12;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor getPitchScale() {
          @SuppressWarnings("deprecation")
          com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor result = com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.valueOf(pitchScale_);
          return result == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.UNRECOGNIZED : result;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor pitch_scale = 12;</code>
         */
        public Builder setPitchScale(com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor value) {
          if (value == null) {
            throw new NullPointerException();
          }
          
          pitchScale_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor pitch_scale = 12;</code>
         */
        public Builder clearPitchScale() {
          
          pitchScale_ = 0;
          onChanged();
          return this;
        }

        private int pitchAlignment_ = 0;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor pitch_alignment = 13;</code>
         */
        public int getPitchAlignmentValue() {
          return pitchAlignment_;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor pitch_alignment = 13;</code>
         */
        public Builder setPitchAlignmentValue(int value) {
          pitchAlignment_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor pitch_alignment = 13;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor getPitchAlignment() {
          @SuppressWarnings("deprecation")
          com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor result = com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.valueOf(pitchAlignment_);
          return result == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.UNRECOGNIZED : result;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor pitch_alignment = 13;</code>
         */
        public Builder setPitchAlignment(com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor value) {
          if (value == null) {
            throw new NullPointerException();
          }
          
          pitchAlignment_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor pitch_alignment = 13;</code>
         */
        public Builder clearPitchAlignment() {
          
          pitchAlignment_ = 0;
          onChanged();
          return this;
        }

        private float strokeWidth_ ;
        /**
         * <code>float stroke_width = 14;</code>
         */
        public float getStrokeWidth() {
          return strokeWidth_;
        }
        /**
         * <code>float stroke_width = 14;</code>
         */
        public Builder setStrokeWidth(float value) {
          
          strokeWidth_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float stroke_width = 14;</code>
         */
        public Builder clearStrokeWidth() {
          
          strokeWidth_ = 0F;
          onChanged();
          return this;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.Color strokeColor_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder> strokeColorBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color stroke_color = 15;</code>
         */
        public boolean hasStrokeColor() {
          return strokeColorBuilder_ != null || strokeColor_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color stroke_color = 15;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.Color getStrokeColor() {
          if (strokeColorBuilder_ == null) {
            return strokeColor_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : strokeColor_;
          } else {
            return strokeColorBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color stroke_color = 15;</code>
         */
        public Builder setStrokeColor(com.tophap.mapbox_gl.proto.MapboxUtil.Color value) {
          if (strokeColorBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            strokeColor_ = value;
            onChanged();
          } else {
            strokeColorBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color stroke_color = 15;</code>
         */
        public Builder setStrokeColor(
            com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder builderForValue) {
          if (strokeColorBuilder_ == null) {
            strokeColor_ = builderForValue.build();
            onChanged();
          } else {
            strokeColorBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color stroke_color = 15;</code>
         */
        public Builder mergeStrokeColor(com.tophap.mapbox_gl.proto.MapboxUtil.Color value) {
          if (strokeColorBuilder_ == null) {
            if (strokeColor_ != null) {
              strokeColor_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.newBuilder(strokeColor_).mergeFrom(value).buildPartial();
            } else {
              strokeColor_ = value;
            }
            onChanged();
          } else {
            strokeColorBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color stroke_color = 15;</code>
         */
        public Builder clearStrokeColor() {
          if (strokeColorBuilder_ == null) {
            strokeColor_ = null;
            onChanged();
          } else {
            strokeColor_ = null;
            strokeColorBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color stroke_color = 15;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder getStrokeColorBuilder() {
          
          onChanged();
          return getStrokeColorFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color stroke_color = 15;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getStrokeColorOrBuilder() {
          if (strokeColorBuilder_ != null) {
            return strokeColorBuilder_.getMessageOrBuilder();
          } else {
            return strokeColor_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : strokeColor_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color stroke_color = 15;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder> 
            getStrokeColorFieldBuilder() {
          if (strokeColorBuilder_ == null) {
            strokeColorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder>(
                    getStrokeColor(),
                    getParentForChildren(),
                    isClean());
            strokeColor_ = null;
          }
          return strokeColorBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions radiusTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> radiusTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions radius_transition = 17;</code>
         */
        public boolean hasRadiusTransition() {
          return radiusTransitionBuilder_ != null || radiusTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions radius_transition = 17;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getRadiusTransition() {
          if (radiusTransitionBuilder_ == null) {
            return radiusTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : radiusTransition_;
          } else {
            return radiusTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions radius_transition = 17;</code>
         */
        public Builder setRadiusTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (radiusTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            radiusTransition_ = value;
            onChanged();
          } else {
            radiusTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions radius_transition = 17;</code>
         */
        public Builder setRadiusTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (radiusTransitionBuilder_ == null) {
            radiusTransition_ = builderForValue.build();
            onChanged();
          } else {
            radiusTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions radius_transition = 17;</code>
         */
        public Builder mergeRadiusTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (radiusTransitionBuilder_ == null) {
            if (radiusTransition_ != null) {
              radiusTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(radiusTransition_).mergeFrom(value).buildPartial();
            } else {
              radiusTransition_ = value;
            }
            onChanged();
          } else {
            radiusTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions radius_transition = 17;</code>
         */
        public Builder clearRadiusTransition() {
          if (radiusTransitionBuilder_ == null) {
            radiusTransition_ = null;
            onChanged();
          } else {
            radiusTransition_ = null;
            radiusTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions radius_transition = 17;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getRadiusTransitionBuilder() {
          
          onChanged();
          return getRadiusTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions radius_transition = 17;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getRadiusTransitionOrBuilder() {
          if (radiusTransitionBuilder_ != null) {
            return radiusTransitionBuilder_.getMessageOrBuilder();
          } else {
            return radiusTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : radiusTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions radius_transition = 17;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getRadiusTransitionFieldBuilder() {
          if (radiusTransitionBuilder_ == null) {
            radiusTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getRadiusTransition(),
                    getParentForChildren(),
                    isClean());
            radiusTransition_ = null;
          }
          return radiusTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions colorTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> colorTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 18;</code>
         */
        public boolean hasColorTransition() {
          return colorTransitionBuilder_ != null || colorTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 18;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getColorTransition() {
          if (colorTransitionBuilder_ == null) {
            return colorTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : colorTransition_;
          } else {
            return colorTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 18;</code>
         */
        public Builder setColorTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (colorTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            colorTransition_ = value;
            onChanged();
          } else {
            colorTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 18;</code>
         */
        public Builder setColorTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (colorTransitionBuilder_ == null) {
            colorTransition_ = builderForValue.build();
            onChanged();
          } else {
            colorTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 18;</code>
         */
        public Builder mergeColorTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (colorTransitionBuilder_ == null) {
            if (colorTransition_ != null) {
              colorTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(colorTransition_).mergeFrom(value).buildPartial();
            } else {
              colorTransition_ = value;
            }
            onChanged();
          } else {
            colorTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 18;</code>
         */
        public Builder clearColorTransition() {
          if (colorTransitionBuilder_ == null) {
            colorTransition_ = null;
            onChanged();
          } else {
            colorTransition_ = null;
            colorTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 18;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getColorTransitionBuilder() {
          
          onChanged();
          return getColorTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 18;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getColorTransitionOrBuilder() {
          if (colorTransitionBuilder_ != null) {
            return colorTransitionBuilder_.getMessageOrBuilder();
          } else {
            return colorTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : colorTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 18;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getColorTransitionFieldBuilder() {
          if (colorTransitionBuilder_ == null) {
            colorTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getColorTransition(),
                    getParentForChildren(),
                    isClean());
            colorTransition_ = null;
          }
          return colorTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions blurTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> blurTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions blur_transition = 19;</code>
         */
        public boolean hasBlurTransition() {
          return blurTransitionBuilder_ != null || blurTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions blur_transition = 19;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getBlurTransition() {
          if (blurTransitionBuilder_ == null) {
            return blurTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : blurTransition_;
          } else {
            return blurTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions blur_transition = 19;</code>
         */
        public Builder setBlurTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (blurTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            blurTransition_ = value;
            onChanged();
          } else {
            blurTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions blur_transition = 19;</code>
         */
        public Builder setBlurTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (blurTransitionBuilder_ == null) {
            blurTransition_ = builderForValue.build();
            onChanged();
          } else {
            blurTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions blur_transition = 19;</code>
         */
        public Builder mergeBlurTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (blurTransitionBuilder_ == null) {
            if (blurTransition_ != null) {
              blurTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(blurTransition_).mergeFrom(value).buildPartial();
            } else {
              blurTransition_ = value;
            }
            onChanged();
          } else {
            blurTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions blur_transition = 19;</code>
         */
        public Builder clearBlurTransition() {
          if (blurTransitionBuilder_ == null) {
            blurTransition_ = null;
            onChanged();
          } else {
            blurTransition_ = null;
            blurTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions blur_transition = 19;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getBlurTransitionBuilder() {
          
          onChanged();
          return getBlurTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions blur_transition = 19;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getBlurTransitionOrBuilder() {
          if (blurTransitionBuilder_ != null) {
            return blurTransitionBuilder_.getMessageOrBuilder();
          } else {
            return blurTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : blurTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions blur_transition = 19;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getBlurTransitionFieldBuilder() {
          if (blurTransitionBuilder_ == null) {
            blurTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getBlurTransition(),
                    getParentForChildren(),
                    isClean());
            blurTransition_ = null;
          }
          return blurTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions opacityTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> opacityTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 20;</code>
         */
        public boolean hasOpacityTransition() {
          return opacityTransitionBuilder_ != null || opacityTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 20;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getOpacityTransition() {
          if (opacityTransitionBuilder_ == null) {
            return opacityTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : opacityTransition_;
          } else {
            return opacityTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 20;</code>
         */
        public Builder setOpacityTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (opacityTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            opacityTransition_ = value;
            onChanged();
          } else {
            opacityTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 20;</code>
         */
        public Builder setOpacityTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (opacityTransitionBuilder_ == null) {
            opacityTransition_ = builderForValue.build();
            onChanged();
          } else {
            opacityTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 20;</code>
         */
        public Builder mergeOpacityTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (opacityTransitionBuilder_ == null) {
            if (opacityTransition_ != null) {
              opacityTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(opacityTransition_).mergeFrom(value).buildPartial();
            } else {
              opacityTransition_ = value;
            }
            onChanged();
          } else {
            opacityTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 20;</code>
         */
        public Builder clearOpacityTransition() {
          if (opacityTransitionBuilder_ == null) {
            opacityTransition_ = null;
            onChanged();
          } else {
            opacityTransition_ = null;
            opacityTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 20;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getOpacityTransitionBuilder() {
          
          onChanged();
          return getOpacityTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 20;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getOpacityTransitionOrBuilder() {
          if (opacityTransitionBuilder_ != null) {
            return opacityTransitionBuilder_.getMessageOrBuilder();
          } else {
            return opacityTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : opacityTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 20;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getOpacityTransitionFieldBuilder() {
          if (opacityTransitionBuilder_ == null) {
            opacityTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getOpacityTransition(),
                    getParentForChildren(),
                    isClean());
            opacityTransition_ = null;
          }
          return opacityTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions translateTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> translateTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 21;</code>
         */
        public boolean hasTranslateTransition() {
          return translateTransitionBuilder_ != null || translateTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 21;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getTranslateTransition() {
          if (translateTransitionBuilder_ == null) {
            return translateTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : translateTransition_;
          } else {
            return translateTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 21;</code>
         */
        public Builder setTranslateTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (translateTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            translateTransition_ = value;
            onChanged();
          } else {
            translateTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 21;</code>
         */
        public Builder setTranslateTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (translateTransitionBuilder_ == null) {
            translateTransition_ = builderForValue.build();
            onChanged();
          } else {
            translateTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 21;</code>
         */
        public Builder mergeTranslateTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (translateTransitionBuilder_ == null) {
            if (translateTransition_ != null) {
              translateTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(translateTransition_).mergeFrom(value).buildPartial();
            } else {
              translateTransition_ = value;
            }
            onChanged();
          } else {
            translateTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 21;</code>
         */
        public Builder clearTranslateTransition() {
          if (translateTransitionBuilder_ == null) {
            translateTransition_ = null;
            onChanged();
          } else {
            translateTransition_ = null;
            translateTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 21;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getTranslateTransitionBuilder() {
          
          onChanged();
          return getTranslateTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 21;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getTranslateTransitionOrBuilder() {
          if (translateTransitionBuilder_ != null) {
            return translateTransitionBuilder_.getMessageOrBuilder();
          } else {
            return translateTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : translateTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 21;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getTranslateTransitionFieldBuilder() {
          if (translateTransitionBuilder_ == null) {
            translateTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getTranslateTransition(),
                    getParentForChildren(),
                    isClean());
            translateTransition_ = null;
          }
          return translateTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions strokeWidthTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> strokeWidthTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_width_transition = 22;</code>
         */
        public boolean hasStrokeWidthTransition() {
          return strokeWidthTransitionBuilder_ != null || strokeWidthTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_width_transition = 22;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getStrokeWidthTransition() {
          if (strokeWidthTransitionBuilder_ == null) {
            return strokeWidthTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : strokeWidthTransition_;
          } else {
            return strokeWidthTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_width_transition = 22;</code>
         */
        public Builder setStrokeWidthTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (strokeWidthTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            strokeWidthTransition_ = value;
            onChanged();
          } else {
            strokeWidthTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_width_transition = 22;</code>
         */
        public Builder setStrokeWidthTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (strokeWidthTransitionBuilder_ == null) {
            strokeWidthTransition_ = builderForValue.build();
            onChanged();
          } else {
            strokeWidthTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_width_transition = 22;</code>
         */
        public Builder mergeStrokeWidthTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (strokeWidthTransitionBuilder_ == null) {
            if (strokeWidthTransition_ != null) {
              strokeWidthTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(strokeWidthTransition_).mergeFrom(value).buildPartial();
            } else {
              strokeWidthTransition_ = value;
            }
            onChanged();
          } else {
            strokeWidthTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_width_transition = 22;</code>
         */
        public Builder clearStrokeWidthTransition() {
          if (strokeWidthTransitionBuilder_ == null) {
            strokeWidthTransition_ = null;
            onChanged();
          } else {
            strokeWidthTransition_ = null;
            strokeWidthTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_width_transition = 22;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getStrokeWidthTransitionBuilder() {
          
          onChanged();
          return getStrokeWidthTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_width_transition = 22;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getStrokeWidthTransitionOrBuilder() {
          if (strokeWidthTransitionBuilder_ != null) {
            return strokeWidthTransitionBuilder_.getMessageOrBuilder();
          } else {
            return strokeWidthTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : strokeWidthTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_width_transition = 22;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getStrokeWidthTransitionFieldBuilder() {
          if (strokeWidthTransitionBuilder_ == null) {
            strokeWidthTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getStrokeWidthTransition(),
                    getParentForChildren(),
                    isClean());
            strokeWidthTransition_ = null;
          }
          return strokeWidthTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions strokeColorTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> strokeColorTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_color_transition = 23;</code>
         */
        public boolean hasStrokeColorTransition() {
          return strokeColorTransitionBuilder_ != null || strokeColorTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_color_transition = 23;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getStrokeColorTransition() {
          if (strokeColorTransitionBuilder_ == null) {
            return strokeColorTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : strokeColorTransition_;
          } else {
            return strokeColorTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_color_transition = 23;</code>
         */
        public Builder setStrokeColorTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (strokeColorTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            strokeColorTransition_ = value;
            onChanged();
          } else {
            strokeColorTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_color_transition = 23;</code>
         */
        public Builder setStrokeColorTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (strokeColorTransitionBuilder_ == null) {
            strokeColorTransition_ = builderForValue.build();
            onChanged();
          } else {
            strokeColorTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_color_transition = 23;</code>
         */
        public Builder mergeStrokeColorTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (strokeColorTransitionBuilder_ == null) {
            if (strokeColorTransition_ != null) {
              strokeColorTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(strokeColorTransition_).mergeFrom(value).buildPartial();
            } else {
              strokeColorTransition_ = value;
            }
            onChanged();
          } else {
            strokeColorTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_color_transition = 23;</code>
         */
        public Builder clearStrokeColorTransition() {
          if (strokeColorTransitionBuilder_ == null) {
            strokeColorTransition_ = null;
            onChanged();
          } else {
            strokeColorTransition_ = null;
            strokeColorTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_color_transition = 23;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getStrokeColorTransitionBuilder() {
          
          onChanged();
          return getStrokeColorTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_color_transition = 23;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getStrokeColorTransitionOrBuilder() {
          if (strokeColorTransitionBuilder_ != null) {
            return strokeColorTransitionBuilder_.getMessageOrBuilder();
          } else {
            return strokeColorTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : strokeColorTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_color_transition = 23;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getStrokeColorTransitionFieldBuilder() {
          if (strokeColorTransitionBuilder_ == null) {
            strokeColorTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getStrokeColorTransition(),
                    getParentForChildren(),
                    isClean());
            strokeColorTransition_ = null;
          }
          return strokeColorTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions strokeOpacityTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> strokeOpacityTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_opacity_transition = 24;</code>
         */
        public boolean hasStrokeOpacityTransition() {
          return strokeOpacityTransitionBuilder_ != null || strokeOpacityTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_opacity_transition = 24;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getStrokeOpacityTransition() {
          if (strokeOpacityTransitionBuilder_ == null) {
            return strokeOpacityTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : strokeOpacityTransition_;
          } else {
            return strokeOpacityTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_opacity_transition = 24;</code>
         */
        public Builder setStrokeOpacityTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (strokeOpacityTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            strokeOpacityTransition_ = value;
            onChanged();
          } else {
            strokeOpacityTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_opacity_transition = 24;</code>
         */
        public Builder setStrokeOpacityTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (strokeOpacityTransitionBuilder_ == null) {
            strokeOpacityTransition_ = builderForValue.build();
            onChanged();
          } else {
            strokeOpacityTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_opacity_transition = 24;</code>
         */
        public Builder mergeStrokeOpacityTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (strokeOpacityTransitionBuilder_ == null) {
            if (strokeOpacityTransition_ != null) {
              strokeOpacityTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(strokeOpacityTransition_).mergeFrom(value).buildPartial();
            } else {
              strokeOpacityTransition_ = value;
            }
            onChanged();
          } else {
            strokeOpacityTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_opacity_transition = 24;</code>
         */
        public Builder clearStrokeOpacityTransition() {
          if (strokeOpacityTransitionBuilder_ == null) {
            strokeOpacityTransition_ = null;
            onChanged();
          } else {
            strokeOpacityTransition_ = null;
            strokeOpacityTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_opacity_transition = 24;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getStrokeOpacityTransitionBuilder() {
          
          onChanged();
          return getStrokeOpacityTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_opacity_transition = 24;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getStrokeOpacityTransitionOrBuilder() {
          if (strokeOpacityTransitionBuilder_ != null) {
            return strokeOpacityTransitionBuilder_.getMessageOrBuilder();
          } else {
            return strokeOpacityTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : strokeOpacityTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions stroke_opacity_transition = 24;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getStrokeOpacityTransitionFieldBuilder() {
          if (strokeOpacityTransitionBuilder_ == null) {
            strokeOpacityTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getStrokeOpacityTransition(),
                    getParentForChildren(),
                    isClean());
            strokeOpacityTransition_ = null;
          }
          return strokeOpacityTransitionBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:com.tophap.mapbox_gl.proto.Layer.Circle)
      }

      // @@protoc_insertion_point(class_scope:com.tophap.mapbox_gl.proto.Layer.Circle)
      private static final com.tophap.mapbox_gl.proto.Layers.Layer.Circle DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.tophap.mapbox_gl.proto.Layers.Layer.Circle();
      }

      public static com.tophap.mapbox_gl.proto.Layers.Layer.Circle getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Circle>
          PARSER = new com.google.protobuf.AbstractParser<Circle>() {
        @java.lang.Override
        public Circle parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Circle(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Circle> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Circle> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.tophap.mapbox_gl.proto.Layers.Layer.Circle getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface FillExtrusionOrBuilder extends
        // @@protoc_insertion_point(interface_extends:com.tophap.mapbox_gl.proto.Layer.FillExtrusion)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>string id = 1;</code>
       */
      java.lang.String getId();
      /**
       * <code>string id = 1;</code>
       */
      com.google.protobuf.ByteString
          getIdBytes();

      /**
       * <code>string source_id = 2;</code>
       */
      java.lang.String getSourceId();
      /**
       * <code>string source_id = 2;</code>
       */
      com.google.protobuf.ByteString
          getSourceIdBytes();

      /**
       * <code>bool visible = 3;</code>
       */
      boolean getVisible();

      /**
       * <code>float min_zoom = 4;</code>
       */
      float getMinZoom();

      /**
       * <code>float max_zoom = 5;</code>
       */
      float getMaxZoom();

      /**
       * <code>.com.tophap.mapbox_gl.proto.Color color = 7;</code>
       */
      boolean hasColor();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color color = 7;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.Color getColor();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color color = 7;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getColorOrBuilder();

      /**
       * <code>repeated float translate = 8;</code>
       */
      java.util.List<java.lang.Float> getTranslateList();
      /**
       * <code>repeated float translate = 8;</code>
       */
      int getTranslateCount();
      /**
       * <code>repeated float translate = 8;</code>
       */
      float getTranslate(int index);

      /**
       * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor translate_anchor = 9;</code>
       */
      int getTranslateAnchorValue();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor translate_anchor = 9;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor getTranslateAnchor();

      /**
       * <code>string pattern = 10;</code>
       */
      java.lang.String getPattern();
      /**
       * <code>string pattern = 10;</code>
       */
      com.google.protobuf.ByteString
          getPatternBytes();

      /**
       * <code>float height = 11;</code>
       */
      float getHeight();

      /**
       * <code>float base = 12;</code>
       */
      float getBase();

      /**
       * <code>bool vertical_gradient = 13;</code>
       */
      boolean getVerticalGradient();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 14;</code>
       */
      boolean hasOpacityTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 14;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getOpacityTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 14;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getOpacityTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 15;</code>
       */
      boolean hasColorTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 15;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getColorTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 15;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getColorTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 16;</code>
       */
      boolean hasTranslateTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 16;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getTranslateTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 16;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getTranslateTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 17;</code>
       */
      boolean hasPatternTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 17;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getPatternTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 17;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getPatternTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions height_transition = 18;</code>
       */
      boolean hasHeightTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions height_transition = 18;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getHeightTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions height_transition = 18;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getHeightTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions base_transition = 19;</code>
       */
      boolean hasBaseTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions base_transition = 19;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getBaseTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions base_transition = 19;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getBaseTransitionOrBuilder();
    }
    /**
     * Protobuf type {@code com.tophap.mapbox_gl.proto.Layer.FillExtrusion}
     */
    public  static final class FillExtrusion extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:com.tophap.mapbox_gl.proto.Layer.FillExtrusion)
        FillExtrusionOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use FillExtrusion.newBuilder() to construct.
      private FillExtrusion(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private FillExtrusion() {
        id_ = "";
        sourceId_ = "";
        translate_ = emptyFloatList();
        translateAnchor_ = 0;
        pattern_ = "";
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private FillExtrusion(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();

                id_ = s;
                break;
              }
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();

                sourceId_ = s;
                break;
              }
              case 24: {

                visible_ = input.readBool();
                break;
              }
              case 37: {

                minZoom_ = input.readFloat();
                break;
              }
              case 45: {

                maxZoom_ = input.readFloat();
                break;
              }
              case 58: {
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder subBuilder = null;
                if (color_ != null) {
                  subBuilder = color_.toBuilder();
                }
                color_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.Color.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(color_);
                  color_ = subBuilder.buildPartial();
                }

                break;
              }
              case 69: {
                if (!((mutable_bitField0_ & 0x00000040) != 0)) {
                  translate_ = newFloatList();
                  mutable_bitField0_ |= 0x00000040;
                }
                translate_.addFloat(input.readFloat());
                break;
              }
              case 66: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000040) != 0) && input.getBytesUntilLimit() > 0) {
                  translate_ = newFloatList();
                  mutable_bitField0_ |= 0x00000040;
                }
                while (input.getBytesUntilLimit() > 0) {
                  translate_.addFloat(input.readFloat());
                }
                input.popLimit(limit);
                break;
              }
              case 72: {
                int rawValue = input.readEnum();

                translateAnchor_ = rawValue;
                break;
              }
              case 82: {
                java.lang.String s = input.readStringRequireUtf8();

                pattern_ = s;
                break;
              }
              case 93: {

                height_ = input.readFloat();
                break;
              }
              case 101: {

                base_ = input.readFloat();
                break;
              }
              case 104: {

                verticalGradient_ = input.readBool();
                break;
              }
              case 114: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (opacityTransition_ != null) {
                  subBuilder = opacityTransition_.toBuilder();
                }
                opacityTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(opacityTransition_);
                  opacityTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 122: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (colorTransition_ != null) {
                  subBuilder = colorTransition_.toBuilder();
                }
                colorTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(colorTransition_);
                  colorTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 130: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (translateTransition_ != null) {
                  subBuilder = translateTransition_.toBuilder();
                }
                translateTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(translateTransition_);
                  translateTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 138: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (patternTransition_ != null) {
                  subBuilder = patternTransition_.toBuilder();
                }
                patternTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(patternTransition_);
                  patternTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 146: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (heightTransition_ != null) {
                  subBuilder = heightTransition_.toBuilder();
                }
                heightTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(heightTransition_);
                  heightTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 154: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (baseTransition_ != null) {
                  subBuilder = baseTransition_.toBuilder();
                }
                baseTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(baseTransition_);
                  baseTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000040) != 0)) {
            translate_.makeImmutable(); // C
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_FillExtrusion_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_FillExtrusion_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion.class, com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion.Builder.class);
      }

      private int bitField0_;
      public static final int ID_FIELD_NUMBER = 1;
      private volatile java.lang.Object id_;
      /**
       * <code>string id = 1;</code>
       */
      public java.lang.String getId() {
        java.lang.Object ref = id_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          id_ = s;
          return s;
        }
      }
      /**
       * <code>string id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = id_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          id_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int SOURCE_ID_FIELD_NUMBER = 2;
      private volatile java.lang.Object sourceId_;
      /**
       * <code>string source_id = 2;</code>
       */
      public java.lang.String getSourceId() {
        java.lang.Object ref = sourceId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          sourceId_ = s;
          return s;
        }
      }
      /**
       * <code>string source_id = 2;</code>
       */
      public com.google.protobuf.ByteString
          getSourceIdBytes() {
        java.lang.Object ref = sourceId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          sourceId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int VISIBLE_FIELD_NUMBER = 3;
      private boolean visible_;
      /**
       * <code>bool visible = 3;</code>
       */
      public boolean getVisible() {
        return visible_;
      }

      public static final int MIN_ZOOM_FIELD_NUMBER = 4;
      private float minZoom_;
      /**
       * <code>float min_zoom = 4;</code>
       */
      public float getMinZoom() {
        return minZoom_;
      }

      public static final int MAX_ZOOM_FIELD_NUMBER = 5;
      private float maxZoom_;
      /**
       * <code>float max_zoom = 5;</code>
       */
      public float getMaxZoom() {
        return maxZoom_;
      }

      public static final int COLOR_FIELD_NUMBER = 7;
      private com.tophap.mapbox_gl.proto.MapboxUtil.Color color_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color color = 7;</code>
       */
      public boolean hasColor() {
        return color_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color color = 7;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.Color getColor() {
        return color_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : color_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color color = 7;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getColorOrBuilder() {
        return getColor();
      }

      public static final int TRANSLATE_FIELD_NUMBER = 8;
      private com.google.protobuf.Internal.FloatList translate_;
      /**
       * <code>repeated float translate = 8;</code>
       */
      public java.util.List<java.lang.Float>
          getTranslateList() {
        return translate_;
      }
      /**
       * <code>repeated float translate = 8;</code>
       */
      public int getTranslateCount() {
        return translate_.size();
      }
      /**
       * <code>repeated float translate = 8;</code>
       */
      public float getTranslate(int index) {
        return translate_.getFloat(index);
      }
      private int translateMemoizedSerializedSize = -1;

      public static final int TRANSLATE_ANCHOR_FIELD_NUMBER = 9;
      private int translateAnchor_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor translate_anchor = 9;</code>
       */
      public int getTranslateAnchorValue() {
        return translateAnchor_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor translate_anchor = 9;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor getTranslateAnchor() {
        @SuppressWarnings("deprecation")
        com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor result = com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.valueOf(translateAnchor_);
        return result == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.UNRECOGNIZED : result;
      }

      public static final int PATTERN_FIELD_NUMBER = 10;
      private volatile java.lang.Object pattern_;
      /**
       * <code>string pattern = 10;</code>
       */
      public java.lang.String getPattern() {
        java.lang.Object ref = pattern_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          pattern_ = s;
          return s;
        }
      }
      /**
       * <code>string pattern = 10;</code>
       */
      public com.google.protobuf.ByteString
          getPatternBytes() {
        java.lang.Object ref = pattern_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          pattern_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int HEIGHT_FIELD_NUMBER = 11;
      private float height_;
      /**
       * <code>float height = 11;</code>
       */
      public float getHeight() {
        return height_;
      }

      public static final int BASE_FIELD_NUMBER = 12;
      private float base_;
      /**
       * <code>float base = 12;</code>
       */
      public float getBase() {
        return base_;
      }

      public static final int VERTICAL_GRADIENT_FIELD_NUMBER = 13;
      private boolean verticalGradient_;
      /**
       * <code>bool vertical_gradient = 13;</code>
       */
      public boolean getVerticalGradient() {
        return verticalGradient_;
      }

      public static final int OPACITY_TRANSITION_FIELD_NUMBER = 14;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions opacityTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 14;</code>
       */
      public boolean hasOpacityTransition() {
        return opacityTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 14;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getOpacityTransition() {
        return opacityTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : opacityTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 14;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getOpacityTransitionOrBuilder() {
        return getOpacityTransition();
      }

      public static final int COLOR_TRANSITION_FIELD_NUMBER = 15;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions colorTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 15;</code>
       */
      public boolean hasColorTransition() {
        return colorTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 15;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getColorTransition() {
        return colorTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : colorTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 15;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getColorTransitionOrBuilder() {
        return getColorTransition();
      }

      public static final int TRANSLATE_TRANSITION_FIELD_NUMBER = 16;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions translateTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 16;</code>
       */
      public boolean hasTranslateTransition() {
        return translateTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 16;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getTranslateTransition() {
        return translateTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : translateTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 16;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getTranslateTransitionOrBuilder() {
        return getTranslateTransition();
      }

      public static final int PATTERN_TRANSITION_FIELD_NUMBER = 17;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions patternTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 17;</code>
       */
      public boolean hasPatternTransition() {
        return patternTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 17;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getPatternTransition() {
        return patternTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : patternTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 17;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getPatternTransitionOrBuilder() {
        return getPatternTransition();
      }

      public static final int HEIGHT_TRANSITION_FIELD_NUMBER = 18;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions heightTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions height_transition = 18;</code>
       */
      public boolean hasHeightTransition() {
        return heightTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions height_transition = 18;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getHeightTransition() {
        return heightTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : heightTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions height_transition = 18;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getHeightTransitionOrBuilder() {
        return getHeightTransition();
      }

      public static final int BASE_TRANSITION_FIELD_NUMBER = 19;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions baseTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions base_transition = 19;</code>
       */
      public boolean hasBaseTransition() {
        return baseTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions base_transition = 19;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getBaseTransition() {
        return baseTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : baseTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions base_transition = 19;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getBaseTransitionOrBuilder() {
        return getBaseTransition();
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (!getIdBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, id_);
        }
        if (!getSourceIdBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, sourceId_);
        }
        if (visible_ != false) {
          output.writeBool(3, visible_);
        }
        if (minZoom_ != 0F) {
          output.writeFloat(4, minZoom_);
        }
        if (maxZoom_ != 0F) {
          output.writeFloat(5, maxZoom_);
        }
        if (color_ != null) {
          output.writeMessage(7, getColor());
        }
        if (getTranslateList().size() > 0) {
          output.writeUInt32NoTag(66);
          output.writeUInt32NoTag(translateMemoizedSerializedSize);
        }
        for (int i = 0; i < translate_.size(); i++) {
          output.writeFloatNoTag(translate_.getFloat(i));
        }
        if (translateAnchor_ != com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.MAP.getNumber()) {
          output.writeEnum(9, translateAnchor_);
        }
        if (!getPatternBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 10, pattern_);
        }
        if (height_ != 0F) {
          output.writeFloat(11, height_);
        }
        if (base_ != 0F) {
          output.writeFloat(12, base_);
        }
        if (verticalGradient_ != false) {
          output.writeBool(13, verticalGradient_);
        }
        if (opacityTransition_ != null) {
          output.writeMessage(14, getOpacityTransition());
        }
        if (colorTransition_ != null) {
          output.writeMessage(15, getColorTransition());
        }
        if (translateTransition_ != null) {
          output.writeMessage(16, getTranslateTransition());
        }
        if (patternTransition_ != null) {
          output.writeMessage(17, getPatternTransition());
        }
        if (heightTransition_ != null) {
          output.writeMessage(18, getHeightTransition());
        }
        if (baseTransition_ != null) {
          output.writeMessage(19, getBaseTransition());
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!getIdBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, id_);
        }
        if (!getSourceIdBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, sourceId_);
        }
        if (visible_ != false) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(3, visible_);
        }
        if (minZoom_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(4, minZoom_);
        }
        if (maxZoom_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(5, maxZoom_);
        }
        if (color_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(7, getColor());
        }
        {
          int dataSize = 0;
          dataSize = 4 * getTranslateList().size();
          size += dataSize;
          if (!getTranslateList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          translateMemoizedSerializedSize = dataSize;
        }
        if (translateAnchor_ != com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.MAP.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(9, translateAnchor_);
        }
        if (!getPatternBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(10, pattern_);
        }
        if (height_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(11, height_);
        }
        if (base_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(12, base_);
        }
        if (verticalGradient_ != false) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(13, verticalGradient_);
        }
        if (opacityTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(14, getOpacityTransition());
        }
        if (colorTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(15, getColorTransition());
        }
        if (translateTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(16, getTranslateTransition());
        }
        if (patternTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(17, getPatternTransition());
        }
        if (heightTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(18, getHeightTransition());
        }
        if (baseTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(19, getBaseTransition());
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion)) {
          return super.equals(obj);
        }
        com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion other = (com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion) obj;

        if (!getId()
            .equals(other.getId())) return false;
        if (!getSourceId()
            .equals(other.getSourceId())) return false;
        if (getVisible()
            != other.getVisible()) return false;
        if (java.lang.Float.floatToIntBits(getMinZoom())
            != java.lang.Float.floatToIntBits(
                other.getMinZoom())) return false;
        if (java.lang.Float.floatToIntBits(getMaxZoom())
            != java.lang.Float.floatToIntBits(
                other.getMaxZoom())) return false;
        if (hasColor() != other.hasColor()) return false;
        if (hasColor()) {
          if (!getColor()
              .equals(other.getColor())) return false;
        }
        if (!getTranslateList()
            .equals(other.getTranslateList())) return false;
        if (translateAnchor_ != other.translateAnchor_) return false;
        if (!getPattern()
            .equals(other.getPattern())) return false;
        if (java.lang.Float.floatToIntBits(getHeight())
            != java.lang.Float.floatToIntBits(
                other.getHeight())) return false;
        if (java.lang.Float.floatToIntBits(getBase())
            != java.lang.Float.floatToIntBits(
                other.getBase())) return false;
        if (getVerticalGradient()
            != other.getVerticalGradient()) return false;
        if (hasOpacityTransition() != other.hasOpacityTransition()) return false;
        if (hasOpacityTransition()) {
          if (!getOpacityTransition()
              .equals(other.getOpacityTransition())) return false;
        }
        if (hasColorTransition() != other.hasColorTransition()) return false;
        if (hasColorTransition()) {
          if (!getColorTransition()
              .equals(other.getColorTransition())) return false;
        }
        if (hasTranslateTransition() != other.hasTranslateTransition()) return false;
        if (hasTranslateTransition()) {
          if (!getTranslateTransition()
              .equals(other.getTranslateTransition())) return false;
        }
        if (hasPatternTransition() != other.hasPatternTransition()) return false;
        if (hasPatternTransition()) {
          if (!getPatternTransition()
              .equals(other.getPatternTransition())) return false;
        }
        if (hasHeightTransition() != other.hasHeightTransition()) return false;
        if (hasHeightTransition()) {
          if (!getHeightTransition()
              .equals(other.getHeightTransition())) return false;
        }
        if (hasBaseTransition() != other.hasBaseTransition()) return false;
        if (hasBaseTransition()) {
          if (!getBaseTransition()
              .equals(other.getBaseTransition())) return false;
        }
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + ID_FIELD_NUMBER;
        hash = (53 * hash) + getId().hashCode();
        hash = (37 * hash) + SOURCE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getSourceId().hashCode();
        hash = (37 * hash) + VISIBLE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getVisible());
        hash = (37 * hash) + MIN_ZOOM_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMinZoom());
        hash = (37 * hash) + MAX_ZOOM_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMaxZoom());
        if (hasColor()) {
          hash = (37 * hash) + COLOR_FIELD_NUMBER;
          hash = (53 * hash) + getColor().hashCode();
        }
        if (getTranslateCount() > 0) {
          hash = (37 * hash) + TRANSLATE_FIELD_NUMBER;
          hash = (53 * hash) + getTranslateList().hashCode();
        }
        hash = (37 * hash) + TRANSLATE_ANCHOR_FIELD_NUMBER;
        hash = (53 * hash) + translateAnchor_;
        hash = (37 * hash) + PATTERN_FIELD_NUMBER;
        hash = (53 * hash) + getPattern().hashCode();
        hash = (37 * hash) + HEIGHT_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getHeight());
        hash = (37 * hash) + BASE_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getBase());
        hash = (37 * hash) + VERTICAL_GRADIENT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getVerticalGradient());
        if (hasOpacityTransition()) {
          hash = (37 * hash) + OPACITY_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getOpacityTransition().hashCode();
        }
        if (hasColorTransition()) {
          hash = (37 * hash) + COLOR_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getColorTransition().hashCode();
        }
        if (hasTranslateTransition()) {
          hash = (37 * hash) + TRANSLATE_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getTranslateTransition().hashCode();
        }
        if (hasPatternTransition()) {
          hash = (37 * hash) + PATTERN_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getPatternTransition().hashCode();
        }
        if (hasHeightTransition()) {
          hash = (37 * hash) + HEIGHT_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getHeightTransition().hashCode();
        }
        if (hasBaseTransition()) {
          hash = (37 * hash) + BASE_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getBaseTransition().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.tophap.mapbox_gl.proto.Layer.FillExtrusion}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:com.tophap.mapbox_gl.proto.Layer.FillExtrusion)
          com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusionOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_FillExtrusion_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_FillExtrusion_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion.class, com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion.Builder.class);
        }

        // Construct using com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          id_ = "";

          sourceId_ = "";

          visible_ = false;

          minZoom_ = 0F;

          maxZoom_ = 0F;

          if (colorBuilder_ == null) {
            color_ = null;
          } else {
            color_ = null;
            colorBuilder_ = null;
          }
          translate_ = emptyFloatList();
          bitField0_ = (bitField0_ & ~0x00000040);
          translateAnchor_ = 0;

          pattern_ = "";

          height_ = 0F;

          base_ = 0F;

          verticalGradient_ = false;

          if (opacityTransitionBuilder_ == null) {
            opacityTransition_ = null;
          } else {
            opacityTransition_ = null;
            opacityTransitionBuilder_ = null;
          }
          if (colorTransitionBuilder_ == null) {
            colorTransition_ = null;
          } else {
            colorTransition_ = null;
            colorTransitionBuilder_ = null;
          }
          if (translateTransitionBuilder_ == null) {
            translateTransition_ = null;
          } else {
            translateTransition_ = null;
            translateTransitionBuilder_ = null;
          }
          if (patternTransitionBuilder_ == null) {
            patternTransition_ = null;
          } else {
            patternTransition_ = null;
            patternTransitionBuilder_ = null;
          }
          if (heightTransitionBuilder_ == null) {
            heightTransition_ = null;
          } else {
            heightTransition_ = null;
            heightTransitionBuilder_ = null;
          }
          if (baseTransitionBuilder_ == null) {
            baseTransition_ = null;
          } else {
            baseTransition_ = null;
            baseTransitionBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_FillExtrusion_descriptor;
        }

        @java.lang.Override
        public com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion getDefaultInstanceForType() {
          return com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion.getDefaultInstance();
        }

        @java.lang.Override
        public com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion build() {
          com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion buildPartial() {
          com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion result = new com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          result.id_ = id_;
          result.sourceId_ = sourceId_;
          result.visible_ = visible_;
          result.minZoom_ = minZoom_;
          result.maxZoom_ = maxZoom_;
          if (colorBuilder_ == null) {
            result.color_ = color_;
          } else {
            result.color_ = colorBuilder_.build();
          }
          if (((bitField0_ & 0x00000040) != 0)) {
            translate_.makeImmutable();
            bitField0_ = (bitField0_ & ~0x00000040);
          }
          result.translate_ = translate_;
          result.translateAnchor_ = translateAnchor_;
          result.pattern_ = pattern_;
          result.height_ = height_;
          result.base_ = base_;
          result.verticalGradient_ = verticalGradient_;
          if (opacityTransitionBuilder_ == null) {
            result.opacityTransition_ = opacityTransition_;
          } else {
            result.opacityTransition_ = opacityTransitionBuilder_.build();
          }
          if (colorTransitionBuilder_ == null) {
            result.colorTransition_ = colorTransition_;
          } else {
            result.colorTransition_ = colorTransitionBuilder_.build();
          }
          if (translateTransitionBuilder_ == null) {
            result.translateTransition_ = translateTransition_;
          } else {
            result.translateTransition_ = translateTransitionBuilder_.build();
          }
          if (patternTransitionBuilder_ == null) {
            result.patternTransition_ = patternTransition_;
          } else {
            result.patternTransition_ = patternTransitionBuilder_.build();
          }
          if (heightTransitionBuilder_ == null) {
            result.heightTransition_ = heightTransition_;
          } else {
            result.heightTransition_ = heightTransitionBuilder_.build();
          }
          if (baseTransitionBuilder_ == null) {
            result.baseTransition_ = baseTransition_;
          } else {
            result.baseTransition_ = baseTransitionBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion) {
            return mergeFrom((com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion other) {
          if (other == com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion.getDefaultInstance()) return this;
          if (!other.getId().isEmpty()) {
            id_ = other.id_;
            onChanged();
          }
          if (!other.getSourceId().isEmpty()) {
            sourceId_ = other.sourceId_;
            onChanged();
          }
          if (other.getVisible() != false) {
            setVisible(other.getVisible());
          }
          if (other.getMinZoom() != 0F) {
            setMinZoom(other.getMinZoom());
          }
          if (other.getMaxZoom() != 0F) {
            setMaxZoom(other.getMaxZoom());
          }
          if (other.hasColor()) {
            mergeColor(other.getColor());
          }
          if (!other.translate_.isEmpty()) {
            if (translate_.isEmpty()) {
              translate_ = other.translate_;
              bitField0_ = (bitField0_ & ~0x00000040);
            } else {
              ensureTranslateIsMutable();
              translate_.addAll(other.translate_);
            }
            onChanged();
          }
          if (other.translateAnchor_ != 0) {
            setTranslateAnchorValue(other.getTranslateAnchorValue());
          }
          if (!other.getPattern().isEmpty()) {
            pattern_ = other.pattern_;
            onChanged();
          }
          if (other.getHeight() != 0F) {
            setHeight(other.getHeight());
          }
          if (other.getBase() != 0F) {
            setBase(other.getBase());
          }
          if (other.getVerticalGradient() != false) {
            setVerticalGradient(other.getVerticalGradient());
          }
          if (other.hasOpacityTransition()) {
            mergeOpacityTransition(other.getOpacityTransition());
          }
          if (other.hasColorTransition()) {
            mergeColorTransition(other.getColorTransition());
          }
          if (other.hasTranslateTransition()) {
            mergeTranslateTransition(other.getTranslateTransition());
          }
          if (other.hasPatternTransition()) {
            mergePatternTransition(other.getPatternTransition());
          }
          if (other.hasHeightTransition()) {
            mergeHeightTransition(other.getHeightTransition());
          }
          if (other.hasBaseTransition()) {
            mergeBaseTransition(other.getBaseTransition());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private java.lang.Object id_ = "";
        /**
         * <code>string id = 1;</code>
         */
        public java.lang.String getId() {
          java.lang.Object ref = id_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            id_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string id = 1;</code>
         */
        public com.google.protobuf.ByteString
            getIdBytes() {
          java.lang.Object ref = id_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            id_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string id = 1;</code>
         */
        public Builder setId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          id_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string id = 1;</code>
         */
        public Builder clearId() {
          
          id_ = getDefaultInstance().getId();
          onChanged();
          return this;
        }
        /**
         * <code>string id = 1;</code>
         */
        public Builder setIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          id_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object sourceId_ = "";
        /**
         * <code>string source_id = 2;</code>
         */
        public java.lang.String getSourceId() {
          java.lang.Object ref = sourceId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            sourceId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string source_id = 2;</code>
         */
        public com.google.protobuf.ByteString
            getSourceIdBytes() {
          java.lang.Object ref = sourceId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            sourceId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string source_id = 2;</code>
         */
        public Builder setSourceId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          sourceId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string source_id = 2;</code>
         */
        public Builder clearSourceId() {
          
          sourceId_ = getDefaultInstance().getSourceId();
          onChanged();
          return this;
        }
        /**
         * <code>string source_id = 2;</code>
         */
        public Builder setSourceIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          sourceId_ = value;
          onChanged();
          return this;
        }

        private boolean visible_ ;
        /**
         * <code>bool visible = 3;</code>
         */
        public boolean getVisible() {
          return visible_;
        }
        /**
         * <code>bool visible = 3;</code>
         */
        public Builder setVisible(boolean value) {
          
          visible_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>bool visible = 3;</code>
         */
        public Builder clearVisible() {
          
          visible_ = false;
          onChanged();
          return this;
        }

        private float minZoom_ ;
        /**
         * <code>float min_zoom = 4;</code>
         */
        public float getMinZoom() {
          return minZoom_;
        }
        /**
         * <code>float min_zoom = 4;</code>
         */
        public Builder setMinZoom(float value) {
          
          minZoom_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float min_zoom = 4;</code>
         */
        public Builder clearMinZoom() {
          
          minZoom_ = 0F;
          onChanged();
          return this;
        }

        private float maxZoom_ ;
        /**
         * <code>float max_zoom = 5;</code>
         */
        public float getMaxZoom() {
          return maxZoom_;
        }
        /**
         * <code>float max_zoom = 5;</code>
         */
        public Builder setMaxZoom(float value) {
          
          maxZoom_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float max_zoom = 5;</code>
         */
        public Builder clearMaxZoom() {
          
          maxZoom_ = 0F;
          onChanged();
          return this;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.Color color_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder> colorBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 7;</code>
         */
        public boolean hasColor() {
          return colorBuilder_ != null || color_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 7;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.Color getColor() {
          if (colorBuilder_ == null) {
            return color_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : color_;
          } else {
            return colorBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 7;</code>
         */
        public Builder setColor(com.tophap.mapbox_gl.proto.MapboxUtil.Color value) {
          if (colorBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            color_ = value;
            onChanged();
          } else {
            colorBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 7;</code>
         */
        public Builder setColor(
            com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder builderForValue) {
          if (colorBuilder_ == null) {
            color_ = builderForValue.build();
            onChanged();
          } else {
            colorBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 7;</code>
         */
        public Builder mergeColor(com.tophap.mapbox_gl.proto.MapboxUtil.Color value) {
          if (colorBuilder_ == null) {
            if (color_ != null) {
              color_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.newBuilder(color_).mergeFrom(value).buildPartial();
            } else {
              color_ = value;
            }
            onChanged();
          } else {
            colorBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 7;</code>
         */
        public Builder clearColor() {
          if (colorBuilder_ == null) {
            color_ = null;
            onChanged();
          } else {
            color_ = null;
            colorBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 7;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder getColorBuilder() {
          
          onChanged();
          return getColorFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 7;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getColorOrBuilder() {
          if (colorBuilder_ != null) {
            return colorBuilder_.getMessageOrBuilder();
          } else {
            return color_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : color_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 7;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder> 
            getColorFieldBuilder() {
          if (colorBuilder_ == null) {
            colorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder>(
                    getColor(),
                    getParentForChildren(),
                    isClean());
            color_ = null;
          }
          return colorBuilder_;
        }

        private com.google.protobuf.Internal.FloatList translate_ = emptyFloatList();
        private void ensureTranslateIsMutable() {
          if (!((bitField0_ & 0x00000040) != 0)) {
            translate_ = mutableCopy(translate_);
            bitField0_ |= 0x00000040;
           }
        }
        /**
         * <code>repeated float translate = 8;</code>
         */
        public java.util.List<java.lang.Float>
            getTranslateList() {
          return ((bitField0_ & 0x00000040) != 0) ?
                   java.util.Collections.unmodifiableList(translate_) : translate_;
        }
        /**
         * <code>repeated float translate = 8;</code>
         */
        public int getTranslateCount() {
          return translate_.size();
        }
        /**
         * <code>repeated float translate = 8;</code>
         */
        public float getTranslate(int index) {
          return translate_.getFloat(index);
        }
        /**
         * <code>repeated float translate = 8;</code>
         */
        public Builder setTranslate(
            int index, float value) {
          ensureTranslateIsMutable();
          translate_.setFloat(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float translate = 8;</code>
         */
        public Builder addTranslate(float value) {
          ensureTranslateIsMutable();
          translate_.addFloat(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float translate = 8;</code>
         */
        public Builder addAllTranslate(
            java.lang.Iterable<? extends java.lang.Float> values) {
          ensureTranslateIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, translate_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float translate = 8;</code>
         */
        public Builder clearTranslate() {
          translate_ = emptyFloatList();
          bitField0_ = (bitField0_ & ~0x00000040);
          onChanged();
          return this;
        }

        private int translateAnchor_ = 0;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor translate_anchor = 9;</code>
         */
        public int getTranslateAnchorValue() {
          return translateAnchor_;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor translate_anchor = 9;</code>
         */
        public Builder setTranslateAnchorValue(int value) {
          translateAnchor_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor translate_anchor = 9;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor getTranslateAnchor() {
          @SuppressWarnings("deprecation")
          com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor result = com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.valueOf(translateAnchor_);
          return result == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.UNRECOGNIZED : result;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor translate_anchor = 9;</code>
         */
        public Builder setTranslateAnchor(com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor value) {
          if (value == null) {
            throw new NullPointerException();
          }
          
          translateAnchor_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor translate_anchor = 9;</code>
         */
        public Builder clearTranslateAnchor() {
          
          translateAnchor_ = 0;
          onChanged();
          return this;
        }

        private java.lang.Object pattern_ = "";
        /**
         * <code>string pattern = 10;</code>
         */
        public java.lang.String getPattern() {
          java.lang.Object ref = pattern_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            pattern_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string pattern = 10;</code>
         */
        public com.google.protobuf.ByteString
            getPatternBytes() {
          java.lang.Object ref = pattern_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            pattern_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string pattern = 10;</code>
         */
        public Builder setPattern(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          pattern_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string pattern = 10;</code>
         */
        public Builder clearPattern() {
          
          pattern_ = getDefaultInstance().getPattern();
          onChanged();
          return this;
        }
        /**
         * <code>string pattern = 10;</code>
         */
        public Builder setPatternBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          pattern_ = value;
          onChanged();
          return this;
        }

        private float height_ ;
        /**
         * <code>float height = 11;</code>
         */
        public float getHeight() {
          return height_;
        }
        /**
         * <code>float height = 11;</code>
         */
        public Builder setHeight(float value) {
          
          height_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float height = 11;</code>
         */
        public Builder clearHeight() {
          
          height_ = 0F;
          onChanged();
          return this;
        }

        private float base_ ;
        /**
         * <code>float base = 12;</code>
         */
        public float getBase() {
          return base_;
        }
        /**
         * <code>float base = 12;</code>
         */
        public Builder setBase(float value) {
          
          base_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float base = 12;</code>
         */
        public Builder clearBase() {
          
          base_ = 0F;
          onChanged();
          return this;
        }

        private boolean verticalGradient_ ;
        /**
         * <code>bool vertical_gradient = 13;</code>
         */
        public boolean getVerticalGradient() {
          return verticalGradient_;
        }
        /**
         * <code>bool vertical_gradient = 13;</code>
         */
        public Builder setVerticalGradient(boolean value) {
          
          verticalGradient_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>bool vertical_gradient = 13;</code>
         */
        public Builder clearVerticalGradient() {
          
          verticalGradient_ = false;
          onChanged();
          return this;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions opacityTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> opacityTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 14;</code>
         */
        public boolean hasOpacityTransition() {
          return opacityTransitionBuilder_ != null || opacityTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 14;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getOpacityTransition() {
          if (opacityTransitionBuilder_ == null) {
            return opacityTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : opacityTransition_;
          } else {
            return opacityTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 14;</code>
         */
        public Builder setOpacityTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (opacityTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            opacityTransition_ = value;
            onChanged();
          } else {
            opacityTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 14;</code>
         */
        public Builder setOpacityTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (opacityTransitionBuilder_ == null) {
            opacityTransition_ = builderForValue.build();
            onChanged();
          } else {
            opacityTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 14;</code>
         */
        public Builder mergeOpacityTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (opacityTransitionBuilder_ == null) {
            if (opacityTransition_ != null) {
              opacityTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(opacityTransition_).mergeFrom(value).buildPartial();
            } else {
              opacityTransition_ = value;
            }
            onChanged();
          } else {
            opacityTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 14;</code>
         */
        public Builder clearOpacityTransition() {
          if (opacityTransitionBuilder_ == null) {
            opacityTransition_ = null;
            onChanged();
          } else {
            opacityTransition_ = null;
            opacityTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 14;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getOpacityTransitionBuilder() {
          
          onChanged();
          return getOpacityTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 14;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getOpacityTransitionOrBuilder() {
          if (opacityTransitionBuilder_ != null) {
            return opacityTransitionBuilder_.getMessageOrBuilder();
          } else {
            return opacityTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : opacityTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 14;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getOpacityTransitionFieldBuilder() {
          if (opacityTransitionBuilder_ == null) {
            opacityTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getOpacityTransition(),
                    getParentForChildren(),
                    isClean());
            opacityTransition_ = null;
          }
          return opacityTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions colorTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> colorTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 15;</code>
         */
        public boolean hasColorTransition() {
          return colorTransitionBuilder_ != null || colorTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 15;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getColorTransition() {
          if (colorTransitionBuilder_ == null) {
            return colorTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : colorTransition_;
          } else {
            return colorTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 15;</code>
         */
        public Builder setColorTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (colorTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            colorTransition_ = value;
            onChanged();
          } else {
            colorTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 15;</code>
         */
        public Builder setColorTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (colorTransitionBuilder_ == null) {
            colorTransition_ = builderForValue.build();
            onChanged();
          } else {
            colorTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 15;</code>
         */
        public Builder mergeColorTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (colorTransitionBuilder_ == null) {
            if (colorTransition_ != null) {
              colorTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(colorTransition_).mergeFrom(value).buildPartial();
            } else {
              colorTransition_ = value;
            }
            onChanged();
          } else {
            colorTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 15;</code>
         */
        public Builder clearColorTransition() {
          if (colorTransitionBuilder_ == null) {
            colorTransition_ = null;
            onChanged();
          } else {
            colorTransition_ = null;
            colorTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 15;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getColorTransitionBuilder() {
          
          onChanged();
          return getColorTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 15;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getColorTransitionOrBuilder() {
          if (colorTransitionBuilder_ != null) {
            return colorTransitionBuilder_.getMessageOrBuilder();
          } else {
            return colorTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : colorTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 15;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getColorTransitionFieldBuilder() {
          if (colorTransitionBuilder_ == null) {
            colorTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getColorTransition(),
                    getParentForChildren(),
                    isClean());
            colorTransition_ = null;
          }
          return colorTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions translateTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> translateTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 16;</code>
         */
        public boolean hasTranslateTransition() {
          return translateTransitionBuilder_ != null || translateTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 16;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getTranslateTransition() {
          if (translateTransitionBuilder_ == null) {
            return translateTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : translateTransition_;
          } else {
            return translateTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 16;</code>
         */
        public Builder setTranslateTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (translateTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            translateTransition_ = value;
            onChanged();
          } else {
            translateTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 16;</code>
         */
        public Builder setTranslateTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (translateTransitionBuilder_ == null) {
            translateTransition_ = builderForValue.build();
            onChanged();
          } else {
            translateTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 16;</code>
         */
        public Builder mergeTranslateTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (translateTransitionBuilder_ == null) {
            if (translateTransition_ != null) {
              translateTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(translateTransition_).mergeFrom(value).buildPartial();
            } else {
              translateTransition_ = value;
            }
            onChanged();
          } else {
            translateTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 16;</code>
         */
        public Builder clearTranslateTransition() {
          if (translateTransitionBuilder_ == null) {
            translateTransition_ = null;
            onChanged();
          } else {
            translateTransition_ = null;
            translateTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 16;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getTranslateTransitionBuilder() {
          
          onChanged();
          return getTranslateTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 16;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getTranslateTransitionOrBuilder() {
          if (translateTransitionBuilder_ != null) {
            return translateTransitionBuilder_.getMessageOrBuilder();
          } else {
            return translateTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : translateTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 16;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getTranslateTransitionFieldBuilder() {
          if (translateTransitionBuilder_ == null) {
            translateTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getTranslateTransition(),
                    getParentForChildren(),
                    isClean());
            translateTransition_ = null;
          }
          return translateTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions patternTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> patternTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 17;</code>
         */
        public boolean hasPatternTransition() {
          return patternTransitionBuilder_ != null || patternTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 17;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getPatternTransition() {
          if (patternTransitionBuilder_ == null) {
            return patternTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : patternTransition_;
          } else {
            return patternTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 17;</code>
         */
        public Builder setPatternTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (patternTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            patternTransition_ = value;
            onChanged();
          } else {
            patternTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 17;</code>
         */
        public Builder setPatternTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (patternTransitionBuilder_ == null) {
            patternTransition_ = builderForValue.build();
            onChanged();
          } else {
            patternTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 17;</code>
         */
        public Builder mergePatternTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (patternTransitionBuilder_ == null) {
            if (patternTransition_ != null) {
              patternTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(patternTransition_).mergeFrom(value).buildPartial();
            } else {
              patternTransition_ = value;
            }
            onChanged();
          } else {
            patternTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 17;</code>
         */
        public Builder clearPatternTransition() {
          if (patternTransitionBuilder_ == null) {
            patternTransition_ = null;
            onChanged();
          } else {
            patternTransition_ = null;
            patternTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 17;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getPatternTransitionBuilder() {
          
          onChanged();
          return getPatternTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 17;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getPatternTransitionOrBuilder() {
          if (patternTransitionBuilder_ != null) {
            return patternTransitionBuilder_.getMessageOrBuilder();
          } else {
            return patternTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : patternTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 17;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getPatternTransitionFieldBuilder() {
          if (patternTransitionBuilder_ == null) {
            patternTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getPatternTransition(),
                    getParentForChildren(),
                    isClean());
            patternTransition_ = null;
          }
          return patternTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions heightTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> heightTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions height_transition = 18;</code>
         */
        public boolean hasHeightTransition() {
          return heightTransitionBuilder_ != null || heightTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions height_transition = 18;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getHeightTransition() {
          if (heightTransitionBuilder_ == null) {
            return heightTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : heightTransition_;
          } else {
            return heightTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions height_transition = 18;</code>
         */
        public Builder setHeightTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (heightTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            heightTransition_ = value;
            onChanged();
          } else {
            heightTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions height_transition = 18;</code>
         */
        public Builder setHeightTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (heightTransitionBuilder_ == null) {
            heightTransition_ = builderForValue.build();
            onChanged();
          } else {
            heightTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions height_transition = 18;</code>
         */
        public Builder mergeHeightTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (heightTransitionBuilder_ == null) {
            if (heightTransition_ != null) {
              heightTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(heightTransition_).mergeFrom(value).buildPartial();
            } else {
              heightTransition_ = value;
            }
            onChanged();
          } else {
            heightTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions height_transition = 18;</code>
         */
        public Builder clearHeightTransition() {
          if (heightTransitionBuilder_ == null) {
            heightTransition_ = null;
            onChanged();
          } else {
            heightTransition_ = null;
            heightTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions height_transition = 18;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getHeightTransitionBuilder() {
          
          onChanged();
          return getHeightTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions height_transition = 18;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getHeightTransitionOrBuilder() {
          if (heightTransitionBuilder_ != null) {
            return heightTransitionBuilder_.getMessageOrBuilder();
          } else {
            return heightTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : heightTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions height_transition = 18;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getHeightTransitionFieldBuilder() {
          if (heightTransitionBuilder_ == null) {
            heightTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getHeightTransition(),
                    getParentForChildren(),
                    isClean());
            heightTransition_ = null;
          }
          return heightTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions baseTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> baseTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions base_transition = 19;</code>
         */
        public boolean hasBaseTransition() {
          return baseTransitionBuilder_ != null || baseTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions base_transition = 19;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getBaseTransition() {
          if (baseTransitionBuilder_ == null) {
            return baseTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : baseTransition_;
          } else {
            return baseTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions base_transition = 19;</code>
         */
        public Builder setBaseTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (baseTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            baseTransition_ = value;
            onChanged();
          } else {
            baseTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions base_transition = 19;</code>
         */
        public Builder setBaseTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (baseTransitionBuilder_ == null) {
            baseTransition_ = builderForValue.build();
            onChanged();
          } else {
            baseTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions base_transition = 19;</code>
         */
        public Builder mergeBaseTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (baseTransitionBuilder_ == null) {
            if (baseTransition_ != null) {
              baseTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(baseTransition_).mergeFrom(value).buildPartial();
            } else {
              baseTransition_ = value;
            }
            onChanged();
          } else {
            baseTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions base_transition = 19;</code>
         */
        public Builder clearBaseTransition() {
          if (baseTransitionBuilder_ == null) {
            baseTransition_ = null;
            onChanged();
          } else {
            baseTransition_ = null;
            baseTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions base_transition = 19;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getBaseTransitionBuilder() {
          
          onChanged();
          return getBaseTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions base_transition = 19;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getBaseTransitionOrBuilder() {
          if (baseTransitionBuilder_ != null) {
            return baseTransitionBuilder_.getMessageOrBuilder();
          } else {
            return baseTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : baseTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions base_transition = 19;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getBaseTransitionFieldBuilder() {
          if (baseTransitionBuilder_ == null) {
            baseTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getBaseTransition(),
                    getParentForChildren(),
                    isClean());
            baseTransition_ = null;
          }
          return baseTransitionBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:com.tophap.mapbox_gl.proto.Layer.FillExtrusion)
      }

      // @@protoc_insertion_point(class_scope:com.tophap.mapbox_gl.proto.Layer.FillExtrusion)
      private static final com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion();
      }

      public static com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<FillExtrusion>
          PARSER = new com.google.protobuf.AbstractParser<FillExtrusion>() {
        @java.lang.Override
        public FillExtrusion parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new FillExtrusion(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<FillExtrusion> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<FillExtrusion> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface FillOrBuilder extends
        // @@protoc_insertion_point(interface_extends:com.tophap.mapbox_gl.proto.Layer.Fill)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>string id = 1;</code>
       */
      java.lang.String getId();
      /**
       * <code>string id = 1;</code>
       */
      com.google.protobuf.ByteString
          getIdBytes();

      /**
       * <code>string source_id = 2;</code>
       */
      java.lang.String getSourceId();
      /**
       * <code>string source_id = 2;</code>
       */
      com.google.protobuf.ByteString
          getSourceIdBytes();

      /**
       * <code>bool visible = 3;</code>
       */
      boolean getVisible();

      /**
       * <code>float min_zoom = 4;</code>
       */
      float getMinZoom();

      /**
       * <code>float max_zoom = 5;</code>
       */
      float getMaxZoom();

      /**
       * <code>bool antialias = 6;</code>
       */
      boolean getAntialias();

      /**
       * <code>.com.tophap.mapbox_gl.proto.Color color = 8;</code>
       */
      boolean hasColor();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color color = 8;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.Color getColor();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color color = 8;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getColorOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.Color outline_color = 9;</code>
       */
      boolean hasOutlineColor();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color outline_color = 9;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.Color getOutlineColor();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color outline_color = 9;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getOutlineColorOrBuilder();

      /**
       * <code>repeated float translate = 10;</code>
       */
      java.util.List<java.lang.Float> getTranslateList();
      /**
       * <code>repeated float translate = 10;</code>
       */
      int getTranslateCount();
      /**
       * <code>repeated float translate = 10;</code>
       */
      float getTranslate(int index);

      /**
       * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor translate_anchor = 11;</code>
       */
      int getTranslateAnchorValue();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor translate_anchor = 11;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor getTranslateAnchor();

      /**
       * <code>string pattern = 12;</code>
       */
      java.lang.String getPattern();
      /**
       * <code>string pattern = 12;</code>
       */
      com.google.protobuf.ByteString
          getPatternBytes();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 13;</code>
       */
      boolean hasOpacityTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 13;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getOpacityTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 13;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getOpacityTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 14;</code>
       */
      boolean hasColorTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 14;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getColorTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 14;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getColorTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions outline_color_transition = 15;</code>
       */
      boolean hasOutlineColorTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions outline_color_transition = 15;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getOutlineColorTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions outline_color_transition = 15;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getOutlineColorTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 16;</code>
       */
      boolean hasTranslateTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 16;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getTranslateTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 16;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getTranslateTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 17;</code>
       */
      boolean hasPatternTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 17;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getPatternTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 17;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getPatternTransitionOrBuilder();
    }
    /**
     * Protobuf type {@code com.tophap.mapbox_gl.proto.Layer.Fill}
     */
    public  static final class Fill extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:com.tophap.mapbox_gl.proto.Layer.Fill)
        FillOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Fill.newBuilder() to construct.
      private Fill(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Fill() {
        id_ = "";
        sourceId_ = "";
        translate_ = emptyFloatList();
        translateAnchor_ = 0;
        pattern_ = "";
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Fill(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();

                id_ = s;
                break;
              }
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();

                sourceId_ = s;
                break;
              }
              case 24: {

                visible_ = input.readBool();
                break;
              }
              case 37: {

                minZoom_ = input.readFloat();
                break;
              }
              case 45: {

                maxZoom_ = input.readFloat();
                break;
              }
              case 48: {

                antialias_ = input.readBool();
                break;
              }
              case 66: {
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder subBuilder = null;
                if (color_ != null) {
                  subBuilder = color_.toBuilder();
                }
                color_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.Color.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(color_);
                  color_ = subBuilder.buildPartial();
                }

                break;
              }
              case 74: {
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder subBuilder = null;
                if (outlineColor_ != null) {
                  subBuilder = outlineColor_.toBuilder();
                }
                outlineColor_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.Color.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(outlineColor_);
                  outlineColor_ = subBuilder.buildPartial();
                }

                break;
              }
              case 85: {
                if (!((mutable_bitField0_ & 0x00000100) != 0)) {
                  translate_ = newFloatList();
                  mutable_bitField0_ |= 0x00000100;
                }
                translate_.addFloat(input.readFloat());
                break;
              }
              case 82: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000100) != 0) && input.getBytesUntilLimit() > 0) {
                  translate_ = newFloatList();
                  mutable_bitField0_ |= 0x00000100;
                }
                while (input.getBytesUntilLimit() > 0) {
                  translate_.addFloat(input.readFloat());
                }
                input.popLimit(limit);
                break;
              }
              case 88: {
                int rawValue = input.readEnum();

                translateAnchor_ = rawValue;
                break;
              }
              case 98: {
                java.lang.String s = input.readStringRequireUtf8();

                pattern_ = s;
                break;
              }
              case 106: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (opacityTransition_ != null) {
                  subBuilder = opacityTransition_.toBuilder();
                }
                opacityTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(opacityTransition_);
                  opacityTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 114: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (colorTransition_ != null) {
                  subBuilder = colorTransition_.toBuilder();
                }
                colorTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(colorTransition_);
                  colorTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 122: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (outlineColorTransition_ != null) {
                  subBuilder = outlineColorTransition_.toBuilder();
                }
                outlineColorTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(outlineColorTransition_);
                  outlineColorTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 130: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (translateTransition_ != null) {
                  subBuilder = translateTransition_.toBuilder();
                }
                translateTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(translateTransition_);
                  translateTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 138: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (patternTransition_ != null) {
                  subBuilder = patternTransition_.toBuilder();
                }
                patternTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(patternTransition_);
                  patternTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000100) != 0)) {
            translate_.makeImmutable(); // C
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_Fill_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_Fill_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.tophap.mapbox_gl.proto.Layers.Layer.Fill.class, com.tophap.mapbox_gl.proto.Layers.Layer.Fill.Builder.class);
      }

      private int bitField0_;
      public static final int ID_FIELD_NUMBER = 1;
      private volatile java.lang.Object id_;
      /**
       * <code>string id = 1;</code>
       */
      public java.lang.String getId() {
        java.lang.Object ref = id_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          id_ = s;
          return s;
        }
      }
      /**
       * <code>string id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = id_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          id_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int SOURCE_ID_FIELD_NUMBER = 2;
      private volatile java.lang.Object sourceId_;
      /**
       * <code>string source_id = 2;</code>
       */
      public java.lang.String getSourceId() {
        java.lang.Object ref = sourceId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          sourceId_ = s;
          return s;
        }
      }
      /**
       * <code>string source_id = 2;</code>
       */
      public com.google.protobuf.ByteString
          getSourceIdBytes() {
        java.lang.Object ref = sourceId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          sourceId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int VISIBLE_FIELD_NUMBER = 3;
      private boolean visible_;
      /**
       * <code>bool visible = 3;</code>
       */
      public boolean getVisible() {
        return visible_;
      }

      public static final int MIN_ZOOM_FIELD_NUMBER = 4;
      private float minZoom_;
      /**
       * <code>float min_zoom = 4;</code>
       */
      public float getMinZoom() {
        return minZoom_;
      }

      public static final int MAX_ZOOM_FIELD_NUMBER = 5;
      private float maxZoom_;
      /**
       * <code>float max_zoom = 5;</code>
       */
      public float getMaxZoom() {
        return maxZoom_;
      }

      public static final int ANTIALIAS_FIELD_NUMBER = 6;
      private boolean antialias_;
      /**
       * <code>bool antialias = 6;</code>
       */
      public boolean getAntialias() {
        return antialias_;
      }

      public static final int COLOR_FIELD_NUMBER = 8;
      private com.tophap.mapbox_gl.proto.MapboxUtil.Color color_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color color = 8;</code>
       */
      public boolean hasColor() {
        return color_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color color = 8;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.Color getColor() {
        return color_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : color_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color color = 8;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getColorOrBuilder() {
        return getColor();
      }

      public static final int OUTLINE_COLOR_FIELD_NUMBER = 9;
      private com.tophap.mapbox_gl.proto.MapboxUtil.Color outlineColor_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color outline_color = 9;</code>
       */
      public boolean hasOutlineColor() {
        return outlineColor_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color outline_color = 9;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.Color getOutlineColor() {
        return outlineColor_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : outlineColor_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color outline_color = 9;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getOutlineColorOrBuilder() {
        return getOutlineColor();
      }

      public static final int TRANSLATE_FIELD_NUMBER = 10;
      private com.google.protobuf.Internal.FloatList translate_;
      /**
       * <code>repeated float translate = 10;</code>
       */
      public java.util.List<java.lang.Float>
          getTranslateList() {
        return translate_;
      }
      /**
       * <code>repeated float translate = 10;</code>
       */
      public int getTranslateCount() {
        return translate_.size();
      }
      /**
       * <code>repeated float translate = 10;</code>
       */
      public float getTranslate(int index) {
        return translate_.getFloat(index);
      }
      private int translateMemoizedSerializedSize = -1;

      public static final int TRANSLATE_ANCHOR_FIELD_NUMBER = 11;
      private int translateAnchor_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor translate_anchor = 11;</code>
       */
      public int getTranslateAnchorValue() {
        return translateAnchor_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor translate_anchor = 11;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor getTranslateAnchor() {
        @SuppressWarnings("deprecation")
        com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor result = com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.valueOf(translateAnchor_);
        return result == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.UNRECOGNIZED : result;
      }

      public static final int PATTERN_FIELD_NUMBER = 12;
      private volatile java.lang.Object pattern_;
      /**
       * <code>string pattern = 12;</code>
       */
      public java.lang.String getPattern() {
        java.lang.Object ref = pattern_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          pattern_ = s;
          return s;
        }
      }
      /**
       * <code>string pattern = 12;</code>
       */
      public com.google.protobuf.ByteString
          getPatternBytes() {
        java.lang.Object ref = pattern_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          pattern_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int OPACITY_TRANSITION_FIELD_NUMBER = 13;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions opacityTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 13;</code>
       */
      public boolean hasOpacityTransition() {
        return opacityTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 13;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getOpacityTransition() {
        return opacityTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : opacityTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 13;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getOpacityTransitionOrBuilder() {
        return getOpacityTransition();
      }

      public static final int COLOR_TRANSITION_FIELD_NUMBER = 14;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions colorTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 14;</code>
       */
      public boolean hasColorTransition() {
        return colorTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 14;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getColorTransition() {
        return colorTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : colorTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 14;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getColorTransitionOrBuilder() {
        return getColorTransition();
      }

      public static final int OUTLINE_COLOR_TRANSITION_FIELD_NUMBER = 15;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions outlineColorTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions outline_color_transition = 15;</code>
       */
      public boolean hasOutlineColorTransition() {
        return outlineColorTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions outline_color_transition = 15;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getOutlineColorTransition() {
        return outlineColorTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : outlineColorTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions outline_color_transition = 15;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getOutlineColorTransitionOrBuilder() {
        return getOutlineColorTransition();
      }

      public static final int TRANSLATE_TRANSITION_FIELD_NUMBER = 16;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions translateTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 16;</code>
       */
      public boolean hasTranslateTransition() {
        return translateTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 16;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getTranslateTransition() {
        return translateTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : translateTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 16;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getTranslateTransitionOrBuilder() {
        return getTranslateTransition();
      }

      public static final int PATTERN_TRANSITION_FIELD_NUMBER = 17;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions patternTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 17;</code>
       */
      public boolean hasPatternTransition() {
        return patternTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 17;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getPatternTransition() {
        return patternTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : patternTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 17;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getPatternTransitionOrBuilder() {
        return getPatternTransition();
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (!getIdBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, id_);
        }
        if (!getSourceIdBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, sourceId_);
        }
        if (visible_ != false) {
          output.writeBool(3, visible_);
        }
        if (minZoom_ != 0F) {
          output.writeFloat(4, minZoom_);
        }
        if (maxZoom_ != 0F) {
          output.writeFloat(5, maxZoom_);
        }
        if (antialias_ != false) {
          output.writeBool(6, antialias_);
        }
        if (color_ != null) {
          output.writeMessage(8, getColor());
        }
        if (outlineColor_ != null) {
          output.writeMessage(9, getOutlineColor());
        }
        if (getTranslateList().size() > 0) {
          output.writeUInt32NoTag(82);
          output.writeUInt32NoTag(translateMemoizedSerializedSize);
        }
        for (int i = 0; i < translate_.size(); i++) {
          output.writeFloatNoTag(translate_.getFloat(i));
        }
        if (translateAnchor_ != com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.MAP.getNumber()) {
          output.writeEnum(11, translateAnchor_);
        }
        if (!getPatternBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 12, pattern_);
        }
        if (opacityTransition_ != null) {
          output.writeMessage(13, getOpacityTransition());
        }
        if (colorTransition_ != null) {
          output.writeMessage(14, getColorTransition());
        }
        if (outlineColorTransition_ != null) {
          output.writeMessage(15, getOutlineColorTransition());
        }
        if (translateTransition_ != null) {
          output.writeMessage(16, getTranslateTransition());
        }
        if (patternTransition_ != null) {
          output.writeMessage(17, getPatternTransition());
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!getIdBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, id_);
        }
        if (!getSourceIdBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, sourceId_);
        }
        if (visible_ != false) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(3, visible_);
        }
        if (minZoom_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(4, minZoom_);
        }
        if (maxZoom_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(5, maxZoom_);
        }
        if (antialias_ != false) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(6, antialias_);
        }
        if (color_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(8, getColor());
        }
        if (outlineColor_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(9, getOutlineColor());
        }
        {
          int dataSize = 0;
          dataSize = 4 * getTranslateList().size();
          size += dataSize;
          if (!getTranslateList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          translateMemoizedSerializedSize = dataSize;
        }
        if (translateAnchor_ != com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.MAP.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(11, translateAnchor_);
        }
        if (!getPatternBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(12, pattern_);
        }
        if (opacityTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(13, getOpacityTransition());
        }
        if (colorTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(14, getColorTransition());
        }
        if (outlineColorTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(15, getOutlineColorTransition());
        }
        if (translateTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(16, getTranslateTransition());
        }
        if (patternTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(17, getPatternTransition());
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.tophap.mapbox_gl.proto.Layers.Layer.Fill)) {
          return super.equals(obj);
        }
        com.tophap.mapbox_gl.proto.Layers.Layer.Fill other = (com.tophap.mapbox_gl.proto.Layers.Layer.Fill) obj;

        if (!getId()
            .equals(other.getId())) return false;
        if (!getSourceId()
            .equals(other.getSourceId())) return false;
        if (getVisible()
            != other.getVisible()) return false;
        if (java.lang.Float.floatToIntBits(getMinZoom())
            != java.lang.Float.floatToIntBits(
                other.getMinZoom())) return false;
        if (java.lang.Float.floatToIntBits(getMaxZoom())
            != java.lang.Float.floatToIntBits(
                other.getMaxZoom())) return false;
        if (getAntialias()
            != other.getAntialias()) return false;
        if (hasColor() != other.hasColor()) return false;
        if (hasColor()) {
          if (!getColor()
              .equals(other.getColor())) return false;
        }
        if (hasOutlineColor() != other.hasOutlineColor()) return false;
        if (hasOutlineColor()) {
          if (!getOutlineColor()
              .equals(other.getOutlineColor())) return false;
        }
        if (!getTranslateList()
            .equals(other.getTranslateList())) return false;
        if (translateAnchor_ != other.translateAnchor_) return false;
        if (!getPattern()
            .equals(other.getPattern())) return false;
        if (hasOpacityTransition() != other.hasOpacityTransition()) return false;
        if (hasOpacityTransition()) {
          if (!getOpacityTransition()
              .equals(other.getOpacityTransition())) return false;
        }
        if (hasColorTransition() != other.hasColorTransition()) return false;
        if (hasColorTransition()) {
          if (!getColorTransition()
              .equals(other.getColorTransition())) return false;
        }
        if (hasOutlineColorTransition() != other.hasOutlineColorTransition()) return false;
        if (hasOutlineColorTransition()) {
          if (!getOutlineColorTransition()
              .equals(other.getOutlineColorTransition())) return false;
        }
        if (hasTranslateTransition() != other.hasTranslateTransition()) return false;
        if (hasTranslateTransition()) {
          if (!getTranslateTransition()
              .equals(other.getTranslateTransition())) return false;
        }
        if (hasPatternTransition() != other.hasPatternTransition()) return false;
        if (hasPatternTransition()) {
          if (!getPatternTransition()
              .equals(other.getPatternTransition())) return false;
        }
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + ID_FIELD_NUMBER;
        hash = (53 * hash) + getId().hashCode();
        hash = (37 * hash) + SOURCE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getSourceId().hashCode();
        hash = (37 * hash) + VISIBLE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getVisible());
        hash = (37 * hash) + MIN_ZOOM_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMinZoom());
        hash = (37 * hash) + MAX_ZOOM_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMaxZoom());
        hash = (37 * hash) + ANTIALIAS_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getAntialias());
        if (hasColor()) {
          hash = (37 * hash) + COLOR_FIELD_NUMBER;
          hash = (53 * hash) + getColor().hashCode();
        }
        if (hasOutlineColor()) {
          hash = (37 * hash) + OUTLINE_COLOR_FIELD_NUMBER;
          hash = (53 * hash) + getOutlineColor().hashCode();
        }
        if (getTranslateCount() > 0) {
          hash = (37 * hash) + TRANSLATE_FIELD_NUMBER;
          hash = (53 * hash) + getTranslateList().hashCode();
        }
        hash = (37 * hash) + TRANSLATE_ANCHOR_FIELD_NUMBER;
        hash = (53 * hash) + translateAnchor_;
        hash = (37 * hash) + PATTERN_FIELD_NUMBER;
        hash = (53 * hash) + getPattern().hashCode();
        if (hasOpacityTransition()) {
          hash = (37 * hash) + OPACITY_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getOpacityTransition().hashCode();
        }
        if (hasColorTransition()) {
          hash = (37 * hash) + COLOR_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getColorTransition().hashCode();
        }
        if (hasOutlineColorTransition()) {
          hash = (37 * hash) + OUTLINE_COLOR_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getOutlineColorTransition().hashCode();
        }
        if (hasTranslateTransition()) {
          hash = (37 * hash) + TRANSLATE_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getTranslateTransition().hashCode();
        }
        if (hasPatternTransition()) {
          hash = (37 * hash) + PATTERN_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getPatternTransition().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.tophap.mapbox_gl.proto.Layers.Layer.Fill parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Fill parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Fill parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Fill parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Fill parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Fill parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Fill parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Fill parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Fill parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Fill parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Fill parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Fill parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.tophap.mapbox_gl.proto.Layers.Layer.Fill prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.tophap.mapbox_gl.proto.Layer.Fill}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:com.tophap.mapbox_gl.proto.Layer.Fill)
          com.tophap.mapbox_gl.proto.Layers.Layer.FillOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_Fill_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_Fill_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.tophap.mapbox_gl.proto.Layers.Layer.Fill.class, com.tophap.mapbox_gl.proto.Layers.Layer.Fill.Builder.class);
        }

        // Construct using com.tophap.mapbox_gl.proto.Layers.Layer.Fill.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          id_ = "";

          sourceId_ = "";

          visible_ = false;

          minZoom_ = 0F;

          maxZoom_ = 0F;

          antialias_ = false;

          if (colorBuilder_ == null) {
            color_ = null;
          } else {
            color_ = null;
            colorBuilder_ = null;
          }
          if (outlineColorBuilder_ == null) {
            outlineColor_ = null;
          } else {
            outlineColor_ = null;
            outlineColorBuilder_ = null;
          }
          translate_ = emptyFloatList();
          bitField0_ = (bitField0_ & ~0x00000100);
          translateAnchor_ = 0;

          pattern_ = "";

          if (opacityTransitionBuilder_ == null) {
            opacityTransition_ = null;
          } else {
            opacityTransition_ = null;
            opacityTransitionBuilder_ = null;
          }
          if (colorTransitionBuilder_ == null) {
            colorTransition_ = null;
          } else {
            colorTransition_ = null;
            colorTransitionBuilder_ = null;
          }
          if (outlineColorTransitionBuilder_ == null) {
            outlineColorTransition_ = null;
          } else {
            outlineColorTransition_ = null;
            outlineColorTransitionBuilder_ = null;
          }
          if (translateTransitionBuilder_ == null) {
            translateTransition_ = null;
          } else {
            translateTransition_ = null;
            translateTransitionBuilder_ = null;
          }
          if (patternTransitionBuilder_ == null) {
            patternTransition_ = null;
          } else {
            patternTransition_ = null;
            patternTransitionBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_Fill_descriptor;
        }

        @java.lang.Override
        public com.tophap.mapbox_gl.proto.Layers.Layer.Fill getDefaultInstanceForType() {
          return com.tophap.mapbox_gl.proto.Layers.Layer.Fill.getDefaultInstance();
        }

        @java.lang.Override
        public com.tophap.mapbox_gl.proto.Layers.Layer.Fill build() {
          com.tophap.mapbox_gl.proto.Layers.Layer.Fill result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.tophap.mapbox_gl.proto.Layers.Layer.Fill buildPartial() {
          com.tophap.mapbox_gl.proto.Layers.Layer.Fill result = new com.tophap.mapbox_gl.proto.Layers.Layer.Fill(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          result.id_ = id_;
          result.sourceId_ = sourceId_;
          result.visible_ = visible_;
          result.minZoom_ = minZoom_;
          result.maxZoom_ = maxZoom_;
          result.antialias_ = antialias_;
          if (colorBuilder_ == null) {
            result.color_ = color_;
          } else {
            result.color_ = colorBuilder_.build();
          }
          if (outlineColorBuilder_ == null) {
            result.outlineColor_ = outlineColor_;
          } else {
            result.outlineColor_ = outlineColorBuilder_.build();
          }
          if (((bitField0_ & 0x00000100) != 0)) {
            translate_.makeImmutable();
            bitField0_ = (bitField0_ & ~0x00000100);
          }
          result.translate_ = translate_;
          result.translateAnchor_ = translateAnchor_;
          result.pattern_ = pattern_;
          if (opacityTransitionBuilder_ == null) {
            result.opacityTransition_ = opacityTransition_;
          } else {
            result.opacityTransition_ = opacityTransitionBuilder_.build();
          }
          if (colorTransitionBuilder_ == null) {
            result.colorTransition_ = colorTransition_;
          } else {
            result.colorTransition_ = colorTransitionBuilder_.build();
          }
          if (outlineColorTransitionBuilder_ == null) {
            result.outlineColorTransition_ = outlineColorTransition_;
          } else {
            result.outlineColorTransition_ = outlineColorTransitionBuilder_.build();
          }
          if (translateTransitionBuilder_ == null) {
            result.translateTransition_ = translateTransition_;
          } else {
            result.translateTransition_ = translateTransitionBuilder_.build();
          }
          if (patternTransitionBuilder_ == null) {
            result.patternTransition_ = patternTransition_;
          } else {
            result.patternTransition_ = patternTransitionBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.tophap.mapbox_gl.proto.Layers.Layer.Fill) {
            return mergeFrom((com.tophap.mapbox_gl.proto.Layers.Layer.Fill)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.tophap.mapbox_gl.proto.Layers.Layer.Fill other) {
          if (other == com.tophap.mapbox_gl.proto.Layers.Layer.Fill.getDefaultInstance()) return this;
          if (!other.getId().isEmpty()) {
            id_ = other.id_;
            onChanged();
          }
          if (!other.getSourceId().isEmpty()) {
            sourceId_ = other.sourceId_;
            onChanged();
          }
          if (other.getVisible() != false) {
            setVisible(other.getVisible());
          }
          if (other.getMinZoom() != 0F) {
            setMinZoom(other.getMinZoom());
          }
          if (other.getMaxZoom() != 0F) {
            setMaxZoom(other.getMaxZoom());
          }
          if (other.getAntialias() != false) {
            setAntialias(other.getAntialias());
          }
          if (other.hasColor()) {
            mergeColor(other.getColor());
          }
          if (other.hasOutlineColor()) {
            mergeOutlineColor(other.getOutlineColor());
          }
          if (!other.translate_.isEmpty()) {
            if (translate_.isEmpty()) {
              translate_ = other.translate_;
              bitField0_ = (bitField0_ & ~0x00000100);
            } else {
              ensureTranslateIsMutable();
              translate_.addAll(other.translate_);
            }
            onChanged();
          }
          if (other.translateAnchor_ != 0) {
            setTranslateAnchorValue(other.getTranslateAnchorValue());
          }
          if (!other.getPattern().isEmpty()) {
            pattern_ = other.pattern_;
            onChanged();
          }
          if (other.hasOpacityTransition()) {
            mergeOpacityTransition(other.getOpacityTransition());
          }
          if (other.hasColorTransition()) {
            mergeColorTransition(other.getColorTransition());
          }
          if (other.hasOutlineColorTransition()) {
            mergeOutlineColorTransition(other.getOutlineColorTransition());
          }
          if (other.hasTranslateTransition()) {
            mergeTranslateTransition(other.getTranslateTransition());
          }
          if (other.hasPatternTransition()) {
            mergePatternTransition(other.getPatternTransition());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.tophap.mapbox_gl.proto.Layers.Layer.Fill parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.tophap.mapbox_gl.proto.Layers.Layer.Fill) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private java.lang.Object id_ = "";
        /**
         * <code>string id = 1;</code>
         */
        public java.lang.String getId() {
          java.lang.Object ref = id_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            id_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string id = 1;</code>
         */
        public com.google.protobuf.ByteString
            getIdBytes() {
          java.lang.Object ref = id_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            id_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string id = 1;</code>
         */
        public Builder setId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          id_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string id = 1;</code>
         */
        public Builder clearId() {
          
          id_ = getDefaultInstance().getId();
          onChanged();
          return this;
        }
        /**
         * <code>string id = 1;</code>
         */
        public Builder setIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          id_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object sourceId_ = "";
        /**
         * <code>string source_id = 2;</code>
         */
        public java.lang.String getSourceId() {
          java.lang.Object ref = sourceId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            sourceId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string source_id = 2;</code>
         */
        public com.google.protobuf.ByteString
            getSourceIdBytes() {
          java.lang.Object ref = sourceId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            sourceId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string source_id = 2;</code>
         */
        public Builder setSourceId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          sourceId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string source_id = 2;</code>
         */
        public Builder clearSourceId() {
          
          sourceId_ = getDefaultInstance().getSourceId();
          onChanged();
          return this;
        }
        /**
         * <code>string source_id = 2;</code>
         */
        public Builder setSourceIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          sourceId_ = value;
          onChanged();
          return this;
        }

        private boolean visible_ ;
        /**
         * <code>bool visible = 3;</code>
         */
        public boolean getVisible() {
          return visible_;
        }
        /**
         * <code>bool visible = 3;</code>
         */
        public Builder setVisible(boolean value) {
          
          visible_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>bool visible = 3;</code>
         */
        public Builder clearVisible() {
          
          visible_ = false;
          onChanged();
          return this;
        }

        private float minZoom_ ;
        /**
         * <code>float min_zoom = 4;</code>
         */
        public float getMinZoom() {
          return minZoom_;
        }
        /**
         * <code>float min_zoom = 4;</code>
         */
        public Builder setMinZoom(float value) {
          
          minZoom_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float min_zoom = 4;</code>
         */
        public Builder clearMinZoom() {
          
          minZoom_ = 0F;
          onChanged();
          return this;
        }

        private float maxZoom_ ;
        /**
         * <code>float max_zoom = 5;</code>
         */
        public float getMaxZoom() {
          return maxZoom_;
        }
        /**
         * <code>float max_zoom = 5;</code>
         */
        public Builder setMaxZoom(float value) {
          
          maxZoom_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float max_zoom = 5;</code>
         */
        public Builder clearMaxZoom() {
          
          maxZoom_ = 0F;
          onChanged();
          return this;
        }

        private boolean antialias_ ;
        /**
         * <code>bool antialias = 6;</code>
         */
        public boolean getAntialias() {
          return antialias_;
        }
        /**
         * <code>bool antialias = 6;</code>
         */
        public Builder setAntialias(boolean value) {
          
          antialias_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>bool antialias = 6;</code>
         */
        public Builder clearAntialias() {
          
          antialias_ = false;
          onChanged();
          return this;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.Color color_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder> colorBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 8;</code>
         */
        public boolean hasColor() {
          return colorBuilder_ != null || color_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 8;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.Color getColor() {
          if (colorBuilder_ == null) {
            return color_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : color_;
          } else {
            return colorBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 8;</code>
         */
        public Builder setColor(com.tophap.mapbox_gl.proto.MapboxUtil.Color value) {
          if (colorBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            color_ = value;
            onChanged();
          } else {
            colorBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 8;</code>
         */
        public Builder setColor(
            com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder builderForValue) {
          if (colorBuilder_ == null) {
            color_ = builderForValue.build();
            onChanged();
          } else {
            colorBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 8;</code>
         */
        public Builder mergeColor(com.tophap.mapbox_gl.proto.MapboxUtil.Color value) {
          if (colorBuilder_ == null) {
            if (color_ != null) {
              color_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.newBuilder(color_).mergeFrom(value).buildPartial();
            } else {
              color_ = value;
            }
            onChanged();
          } else {
            colorBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 8;</code>
         */
        public Builder clearColor() {
          if (colorBuilder_ == null) {
            color_ = null;
            onChanged();
          } else {
            color_ = null;
            colorBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 8;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder getColorBuilder() {
          
          onChanged();
          return getColorFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 8;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getColorOrBuilder() {
          if (colorBuilder_ != null) {
            return colorBuilder_.getMessageOrBuilder();
          } else {
            return color_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : color_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 8;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder> 
            getColorFieldBuilder() {
          if (colorBuilder_ == null) {
            colorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder>(
                    getColor(),
                    getParentForChildren(),
                    isClean());
            color_ = null;
          }
          return colorBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.Color outlineColor_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder> outlineColorBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color outline_color = 9;</code>
         */
        public boolean hasOutlineColor() {
          return outlineColorBuilder_ != null || outlineColor_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color outline_color = 9;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.Color getOutlineColor() {
          if (outlineColorBuilder_ == null) {
            return outlineColor_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : outlineColor_;
          } else {
            return outlineColorBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color outline_color = 9;</code>
         */
        public Builder setOutlineColor(com.tophap.mapbox_gl.proto.MapboxUtil.Color value) {
          if (outlineColorBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            outlineColor_ = value;
            onChanged();
          } else {
            outlineColorBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color outline_color = 9;</code>
         */
        public Builder setOutlineColor(
            com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder builderForValue) {
          if (outlineColorBuilder_ == null) {
            outlineColor_ = builderForValue.build();
            onChanged();
          } else {
            outlineColorBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color outline_color = 9;</code>
         */
        public Builder mergeOutlineColor(com.tophap.mapbox_gl.proto.MapboxUtil.Color value) {
          if (outlineColorBuilder_ == null) {
            if (outlineColor_ != null) {
              outlineColor_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.newBuilder(outlineColor_).mergeFrom(value).buildPartial();
            } else {
              outlineColor_ = value;
            }
            onChanged();
          } else {
            outlineColorBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color outline_color = 9;</code>
         */
        public Builder clearOutlineColor() {
          if (outlineColorBuilder_ == null) {
            outlineColor_ = null;
            onChanged();
          } else {
            outlineColor_ = null;
            outlineColorBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color outline_color = 9;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder getOutlineColorBuilder() {
          
          onChanged();
          return getOutlineColorFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color outline_color = 9;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getOutlineColorOrBuilder() {
          if (outlineColorBuilder_ != null) {
            return outlineColorBuilder_.getMessageOrBuilder();
          } else {
            return outlineColor_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : outlineColor_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color outline_color = 9;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder> 
            getOutlineColorFieldBuilder() {
          if (outlineColorBuilder_ == null) {
            outlineColorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder>(
                    getOutlineColor(),
                    getParentForChildren(),
                    isClean());
            outlineColor_ = null;
          }
          return outlineColorBuilder_;
        }

        private com.google.protobuf.Internal.FloatList translate_ = emptyFloatList();
        private void ensureTranslateIsMutable() {
          if (!((bitField0_ & 0x00000100) != 0)) {
            translate_ = mutableCopy(translate_);
            bitField0_ |= 0x00000100;
           }
        }
        /**
         * <code>repeated float translate = 10;</code>
         */
        public java.util.List<java.lang.Float>
            getTranslateList() {
          return ((bitField0_ & 0x00000100) != 0) ?
                   java.util.Collections.unmodifiableList(translate_) : translate_;
        }
        /**
         * <code>repeated float translate = 10;</code>
         */
        public int getTranslateCount() {
          return translate_.size();
        }
        /**
         * <code>repeated float translate = 10;</code>
         */
        public float getTranslate(int index) {
          return translate_.getFloat(index);
        }
        /**
         * <code>repeated float translate = 10;</code>
         */
        public Builder setTranslate(
            int index, float value) {
          ensureTranslateIsMutable();
          translate_.setFloat(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float translate = 10;</code>
         */
        public Builder addTranslate(float value) {
          ensureTranslateIsMutable();
          translate_.addFloat(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float translate = 10;</code>
         */
        public Builder addAllTranslate(
            java.lang.Iterable<? extends java.lang.Float> values) {
          ensureTranslateIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, translate_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float translate = 10;</code>
         */
        public Builder clearTranslate() {
          translate_ = emptyFloatList();
          bitField0_ = (bitField0_ & ~0x00000100);
          onChanged();
          return this;
        }

        private int translateAnchor_ = 0;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor translate_anchor = 11;</code>
         */
        public int getTranslateAnchorValue() {
          return translateAnchor_;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor translate_anchor = 11;</code>
         */
        public Builder setTranslateAnchorValue(int value) {
          translateAnchor_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor translate_anchor = 11;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor getTranslateAnchor() {
          @SuppressWarnings("deprecation")
          com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor result = com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.valueOf(translateAnchor_);
          return result == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.UNRECOGNIZED : result;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor translate_anchor = 11;</code>
         */
        public Builder setTranslateAnchor(com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor value) {
          if (value == null) {
            throw new NullPointerException();
          }
          
          translateAnchor_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor translate_anchor = 11;</code>
         */
        public Builder clearTranslateAnchor() {
          
          translateAnchor_ = 0;
          onChanged();
          return this;
        }

        private java.lang.Object pattern_ = "";
        /**
         * <code>string pattern = 12;</code>
         */
        public java.lang.String getPattern() {
          java.lang.Object ref = pattern_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            pattern_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string pattern = 12;</code>
         */
        public com.google.protobuf.ByteString
            getPatternBytes() {
          java.lang.Object ref = pattern_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            pattern_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string pattern = 12;</code>
         */
        public Builder setPattern(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          pattern_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string pattern = 12;</code>
         */
        public Builder clearPattern() {
          
          pattern_ = getDefaultInstance().getPattern();
          onChanged();
          return this;
        }
        /**
         * <code>string pattern = 12;</code>
         */
        public Builder setPatternBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          pattern_ = value;
          onChanged();
          return this;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions opacityTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> opacityTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 13;</code>
         */
        public boolean hasOpacityTransition() {
          return opacityTransitionBuilder_ != null || opacityTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 13;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getOpacityTransition() {
          if (opacityTransitionBuilder_ == null) {
            return opacityTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : opacityTransition_;
          } else {
            return opacityTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 13;</code>
         */
        public Builder setOpacityTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (opacityTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            opacityTransition_ = value;
            onChanged();
          } else {
            opacityTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 13;</code>
         */
        public Builder setOpacityTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (opacityTransitionBuilder_ == null) {
            opacityTransition_ = builderForValue.build();
            onChanged();
          } else {
            opacityTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 13;</code>
         */
        public Builder mergeOpacityTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (opacityTransitionBuilder_ == null) {
            if (opacityTransition_ != null) {
              opacityTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(opacityTransition_).mergeFrom(value).buildPartial();
            } else {
              opacityTransition_ = value;
            }
            onChanged();
          } else {
            opacityTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 13;</code>
         */
        public Builder clearOpacityTransition() {
          if (opacityTransitionBuilder_ == null) {
            opacityTransition_ = null;
            onChanged();
          } else {
            opacityTransition_ = null;
            opacityTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 13;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getOpacityTransitionBuilder() {
          
          onChanged();
          return getOpacityTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 13;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getOpacityTransitionOrBuilder() {
          if (opacityTransitionBuilder_ != null) {
            return opacityTransitionBuilder_.getMessageOrBuilder();
          } else {
            return opacityTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : opacityTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 13;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getOpacityTransitionFieldBuilder() {
          if (opacityTransitionBuilder_ == null) {
            opacityTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getOpacityTransition(),
                    getParentForChildren(),
                    isClean());
            opacityTransition_ = null;
          }
          return opacityTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions colorTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> colorTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 14;</code>
         */
        public boolean hasColorTransition() {
          return colorTransitionBuilder_ != null || colorTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 14;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getColorTransition() {
          if (colorTransitionBuilder_ == null) {
            return colorTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : colorTransition_;
          } else {
            return colorTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 14;</code>
         */
        public Builder setColorTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (colorTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            colorTransition_ = value;
            onChanged();
          } else {
            colorTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 14;</code>
         */
        public Builder setColorTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (colorTransitionBuilder_ == null) {
            colorTransition_ = builderForValue.build();
            onChanged();
          } else {
            colorTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 14;</code>
         */
        public Builder mergeColorTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (colorTransitionBuilder_ == null) {
            if (colorTransition_ != null) {
              colorTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(colorTransition_).mergeFrom(value).buildPartial();
            } else {
              colorTransition_ = value;
            }
            onChanged();
          } else {
            colorTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 14;</code>
         */
        public Builder clearColorTransition() {
          if (colorTransitionBuilder_ == null) {
            colorTransition_ = null;
            onChanged();
          } else {
            colorTransition_ = null;
            colorTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 14;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getColorTransitionBuilder() {
          
          onChanged();
          return getColorTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 14;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getColorTransitionOrBuilder() {
          if (colorTransitionBuilder_ != null) {
            return colorTransitionBuilder_.getMessageOrBuilder();
          } else {
            return colorTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : colorTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 14;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getColorTransitionFieldBuilder() {
          if (colorTransitionBuilder_ == null) {
            colorTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getColorTransition(),
                    getParentForChildren(),
                    isClean());
            colorTransition_ = null;
          }
          return colorTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions outlineColorTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> outlineColorTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions outline_color_transition = 15;</code>
         */
        public boolean hasOutlineColorTransition() {
          return outlineColorTransitionBuilder_ != null || outlineColorTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions outline_color_transition = 15;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getOutlineColorTransition() {
          if (outlineColorTransitionBuilder_ == null) {
            return outlineColorTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : outlineColorTransition_;
          } else {
            return outlineColorTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions outline_color_transition = 15;</code>
         */
        public Builder setOutlineColorTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (outlineColorTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            outlineColorTransition_ = value;
            onChanged();
          } else {
            outlineColorTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions outline_color_transition = 15;</code>
         */
        public Builder setOutlineColorTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (outlineColorTransitionBuilder_ == null) {
            outlineColorTransition_ = builderForValue.build();
            onChanged();
          } else {
            outlineColorTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions outline_color_transition = 15;</code>
         */
        public Builder mergeOutlineColorTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (outlineColorTransitionBuilder_ == null) {
            if (outlineColorTransition_ != null) {
              outlineColorTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(outlineColorTransition_).mergeFrom(value).buildPartial();
            } else {
              outlineColorTransition_ = value;
            }
            onChanged();
          } else {
            outlineColorTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions outline_color_transition = 15;</code>
         */
        public Builder clearOutlineColorTransition() {
          if (outlineColorTransitionBuilder_ == null) {
            outlineColorTransition_ = null;
            onChanged();
          } else {
            outlineColorTransition_ = null;
            outlineColorTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions outline_color_transition = 15;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getOutlineColorTransitionBuilder() {
          
          onChanged();
          return getOutlineColorTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions outline_color_transition = 15;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getOutlineColorTransitionOrBuilder() {
          if (outlineColorTransitionBuilder_ != null) {
            return outlineColorTransitionBuilder_.getMessageOrBuilder();
          } else {
            return outlineColorTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : outlineColorTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions outline_color_transition = 15;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getOutlineColorTransitionFieldBuilder() {
          if (outlineColorTransitionBuilder_ == null) {
            outlineColorTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getOutlineColorTransition(),
                    getParentForChildren(),
                    isClean());
            outlineColorTransition_ = null;
          }
          return outlineColorTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions translateTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> translateTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 16;</code>
         */
        public boolean hasTranslateTransition() {
          return translateTransitionBuilder_ != null || translateTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 16;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getTranslateTransition() {
          if (translateTransitionBuilder_ == null) {
            return translateTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : translateTransition_;
          } else {
            return translateTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 16;</code>
         */
        public Builder setTranslateTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (translateTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            translateTransition_ = value;
            onChanged();
          } else {
            translateTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 16;</code>
         */
        public Builder setTranslateTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (translateTransitionBuilder_ == null) {
            translateTransition_ = builderForValue.build();
            onChanged();
          } else {
            translateTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 16;</code>
         */
        public Builder mergeTranslateTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (translateTransitionBuilder_ == null) {
            if (translateTransition_ != null) {
              translateTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(translateTransition_).mergeFrom(value).buildPartial();
            } else {
              translateTransition_ = value;
            }
            onChanged();
          } else {
            translateTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 16;</code>
         */
        public Builder clearTranslateTransition() {
          if (translateTransitionBuilder_ == null) {
            translateTransition_ = null;
            onChanged();
          } else {
            translateTransition_ = null;
            translateTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 16;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getTranslateTransitionBuilder() {
          
          onChanged();
          return getTranslateTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 16;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getTranslateTransitionOrBuilder() {
          if (translateTransitionBuilder_ != null) {
            return translateTransitionBuilder_.getMessageOrBuilder();
          } else {
            return translateTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : translateTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 16;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getTranslateTransitionFieldBuilder() {
          if (translateTransitionBuilder_ == null) {
            translateTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getTranslateTransition(),
                    getParentForChildren(),
                    isClean());
            translateTransition_ = null;
          }
          return translateTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions patternTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> patternTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 17;</code>
         */
        public boolean hasPatternTransition() {
          return patternTransitionBuilder_ != null || patternTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 17;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getPatternTransition() {
          if (patternTransitionBuilder_ == null) {
            return patternTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : patternTransition_;
          } else {
            return patternTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 17;</code>
         */
        public Builder setPatternTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (patternTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            patternTransition_ = value;
            onChanged();
          } else {
            patternTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 17;</code>
         */
        public Builder setPatternTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (patternTransitionBuilder_ == null) {
            patternTransition_ = builderForValue.build();
            onChanged();
          } else {
            patternTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 17;</code>
         */
        public Builder mergePatternTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (patternTransitionBuilder_ == null) {
            if (patternTransition_ != null) {
              patternTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(patternTransition_).mergeFrom(value).buildPartial();
            } else {
              patternTransition_ = value;
            }
            onChanged();
          } else {
            patternTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 17;</code>
         */
        public Builder clearPatternTransition() {
          if (patternTransitionBuilder_ == null) {
            patternTransition_ = null;
            onChanged();
          } else {
            patternTransition_ = null;
            patternTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 17;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getPatternTransitionBuilder() {
          
          onChanged();
          return getPatternTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 17;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getPatternTransitionOrBuilder() {
          if (patternTransitionBuilder_ != null) {
            return patternTransitionBuilder_.getMessageOrBuilder();
          } else {
            return patternTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : patternTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 17;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getPatternTransitionFieldBuilder() {
          if (patternTransitionBuilder_ == null) {
            patternTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getPatternTransition(),
                    getParentForChildren(),
                    isClean());
            patternTransition_ = null;
          }
          return patternTransitionBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:com.tophap.mapbox_gl.proto.Layer.Fill)
      }

      // @@protoc_insertion_point(class_scope:com.tophap.mapbox_gl.proto.Layer.Fill)
      private static final com.tophap.mapbox_gl.proto.Layers.Layer.Fill DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.tophap.mapbox_gl.proto.Layers.Layer.Fill();
      }

      public static com.tophap.mapbox_gl.proto.Layers.Layer.Fill getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Fill>
          PARSER = new com.google.protobuf.AbstractParser<Fill>() {
        @java.lang.Override
        public Fill parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Fill(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Fill> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Fill> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.tophap.mapbox_gl.proto.Layers.Layer.Fill getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface HeatmapOrBuilder extends
        // @@protoc_insertion_point(interface_extends:com.tophap.mapbox_gl.proto.Layer.Heatmap)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>string id = 1;</code>
       */
      java.lang.String getId();
      /**
       * <code>string id = 1;</code>
       */
      com.google.protobuf.ByteString
          getIdBytes();

      /**
       * <code>string source_id = 2;</code>
       */
      java.lang.String getSourceId();
      /**
       * <code>string source_id = 2;</code>
       */
      com.google.protobuf.ByteString
          getSourceIdBytes();

      /**
       * <code>bool visible = 3;</code>
       */
      boolean getVisible();

      /**
       * <code>float min_zoom = 4;</code>
       */
      float getMinZoom();

      /**
       * <code>float max_zoom = 5;</code>
       */
      float getMaxZoom();

      /**
       * <code>float radius = 6;</code>
       */
      float getRadius();

      /**
       * <code>float weight = 7;</code>
       */
      float getWeight();

      /**
       * <code>float intensity = 8;</code>
       */
      float getIntensity();

      /**
       * <code>.com.tophap.mapbox_gl.proto.Color color = 9;</code>
       */
      boolean hasColor();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color color = 9;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.Color getColor();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color color = 9;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getColorOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions radius_transition = 11;</code>
       */
      boolean hasRadiusTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions radius_transition = 11;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getRadiusTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions radius_transition = 11;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getRadiusTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions intensity_transition = 12;</code>
       */
      boolean hasIntensityTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions intensity_transition = 12;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getIntensityTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions intensity_transition = 12;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getIntensityTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 13;</code>
       */
      boolean hasOpacityTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 13;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getOpacityTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 13;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getOpacityTransitionOrBuilder();
    }
    /**
     * Protobuf type {@code com.tophap.mapbox_gl.proto.Layer.Heatmap}
     */
    public  static final class Heatmap extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:com.tophap.mapbox_gl.proto.Layer.Heatmap)
        HeatmapOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Heatmap.newBuilder() to construct.
      private Heatmap(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Heatmap() {
        id_ = "";
        sourceId_ = "";
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Heatmap(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();

                id_ = s;
                break;
              }
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();

                sourceId_ = s;
                break;
              }
              case 24: {

                visible_ = input.readBool();
                break;
              }
              case 37: {

                minZoom_ = input.readFloat();
                break;
              }
              case 45: {

                maxZoom_ = input.readFloat();
                break;
              }
              case 53: {

                radius_ = input.readFloat();
                break;
              }
              case 61: {

                weight_ = input.readFloat();
                break;
              }
              case 69: {

                intensity_ = input.readFloat();
                break;
              }
              case 74: {
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder subBuilder = null;
                if (color_ != null) {
                  subBuilder = color_.toBuilder();
                }
                color_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.Color.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(color_);
                  color_ = subBuilder.buildPartial();
                }

                break;
              }
              case 90: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (radiusTransition_ != null) {
                  subBuilder = radiusTransition_.toBuilder();
                }
                radiusTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(radiusTransition_);
                  radiusTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 98: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (intensityTransition_ != null) {
                  subBuilder = intensityTransition_.toBuilder();
                }
                intensityTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(intensityTransition_);
                  intensityTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 106: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (opacityTransition_ != null) {
                  subBuilder = opacityTransition_.toBuilder();
                }
                opacityTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(opacityTransition_);
                  opacityTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_Heatmap_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_Heatmap_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap.class, com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap.Builder.class);
      }

      public static final int ID_FIELD_NUMBER = 1;
      private volatile java.lang.Object id_;
      /**
       * <code>string id = 1;</code>
       */
      public java.lang.String getId() {
        java.lang.Object ref = id_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          id_ = s;
          return s;
        }
      }
      /**
       * <code>string id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = id_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          id_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int SOURCE_ID_FIELD_NUMBER = 2;
      private volatile java.lang.Object sourceId_;
      /**
       * <code>string source_id = 2;</code>
       */
      public java.lang.String getSourceId() {
        java.lang.Object ref = sourceId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          sourceId_ = s;
          return s;
        }
      }
      /**
       * <code>string source_id = 2;</code>
       */
      public com.google.protobuf.ByteString
          getSourceIdBytes() {
        java.lang.Object ref = sourceId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          sourceId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int VISIBLE_FIELD_NUMBER = 3;
      private boolean visible_;
      /**
       * <code>bool visible = 3;</code>
       */
      public boolean getVisible() {
        return visible_;
      }

      public static final int MIN_ZOOM_FIELD_NUMBER = 4;
      private float minZoom_;
      /**
       * <code>float min_zoom = 4;</code>
       */
      public float getMinZoom() {
        return minZoom_;
      }

      public static final int MAX_ZOOM_FIELD_NUMBER = 5;
      private float maxZoom_;
      /**
       * <code>float max_zoom = 5;</code>
       */
      public float getMaxZoom() {
        return maxZoom_;
      }

      public static final int RADIUS_FIELD_NUMBER = 6;
      private float radius_;
      /**
       * <code>float radius = 6;</code>
       */
      public float getRadius() {
        return radius_;
      }

      public static final int WEIGHT_FIELD_NUMBER = 7;
      private float weight_;
      /**
       * <code>float weight = 7;</code>
       */
      public float getWeight() {
        return weight_;
      }

      public static final int INTENSITY_FIELD_NUMBER = 8;
      private float intensity_;
      /**
       * <code>float intensity = 8;</code>
       */
      public float getIntensity() {
        return intensity_;
      }

      public static final int COLOR_FIELD_NUMBER = 9;
      private com.tophap.mapbox_gl.proto.MapboxUtil.Color color_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color color = 9;</code>
       */
      public boolean hasColor() {
        return color_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color color = 9;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.Color getColor() {
        return color_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : color_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color color = 9;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getColorOrBuilder() {
        return getColor();
      }

      public static final int RADIUS_TRANSITION_FIELD_NUMBER = 11;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions radiusTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions radius_transition = 11;</code>
       */
      public boolean hasRadiusTransition() {
        return radiusTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions radius_transition = 11;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getRadiusTransition() {
        return radiusTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : radiusTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions radius_transition = 11;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getRadiusTransitionOrBuilder() {
        return getRadiusTransition();
      }

      public static final int INTENSITY_TRANSITION_FIELD_NUMBER = 12;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions intensityTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions intensity_transition = 12;</code>
       */
      public boolean hasIntensityTransition() {
        return intensityTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions intensity_transition = 12;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getIntensityTransition() {
        return intensityTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : intensityTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions intensity_transition = 12;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getIntensityTransitionOrBuilder() {
        return getIntensityTransition();
      }

      public static final int OPACITY_TRANSITION_FIELD_NUMBER = 13;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions opacityTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 13;</code>
       */
      public boolean hasOpacityTransition() {
        return opacityTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 13;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getOpacityTransition() {
        return opacityTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : opacityTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 13;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getOpacityTransitionOrBuilder() {
        return getOpacityTransition();
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!getIdBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, id_);
        }
        if (!getSourceIdBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, sourceId_);
        }
        if (visible_ != false) {
          output.writeBool(3, visible_);
        }
        if (minZoom_ != 0F) {
          output.writeFloat(4, minZoom_);
        }
        if (maxZoom_ != 0F) {
          output.writeFloat(5, maxZoom_);
        }
        if (radius_ != 0F) {
          output.writeFloat(6, radius_);
        }
        if (weight_ != 0F) {
          output.writeFloat(7, weight_);
        }
        if (intensity_ != 0F) {
          output.writeFloat(8, intensity_);
        }
        if (color_ != null) {
          output.writeMessage(9, getColor());
        }
        if (radiusTransition_ != null) {
          output.writeMessage(11, getRadiusTransition());
        }
        if (intensityTransition_ != null) {
          output.writeMessage(12, getIntensityTransition());
        }
        if (opacityTransition_ != null) {
          output.writeMessage(13, getOpacityTransition());
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!getIdBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, id_);
        }
        if (!getSourceIdBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, sourceId_);
        }
        if (visible_ != false) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(3, visible_);
        }
        if (minZoom_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(4, minZoom_);
        }
        if (maxZoom_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(5, maxZoom_);
        }
        if (radius_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(6, radius_);
        }
        if (weight_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(7, weight_);
        }
        if (intensity_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(8, intensity_);
        }
        if (color_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(9, getColor());
        }
        if (radiusTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(11, getRadiusTransition());
        }
        if (intensityTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(12, getIntensityTransition());
        }
        if (opacityTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(13, getOpacityTransition());
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap)) {
          return super.equals(obj);
        }
        com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap other = (com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap) obj;

        if (!getId()
            .equals(other.getId())) return false;
        if (!getSourceId()
            .equals(other.getSourceId())) return false;
        if (getVisible()
            != other.getVisible()) return false;
        if (java.lang.Float.floatToIntBits(getMinZoom())
            != java.lang.Float.floatToIntBits(
                other.getMinZoom())) return false;
        if (java.lang.Float.floatToIntBits(getMaxZoom())
            != java.lang.Float.floatToIntBits(
                other.getMaxZoom())) return false;
        if (java.lang.Float.floatToIntBits(getRadius())
            != java.lang.Float.floatToIntBits(
                other.getRadius())) return false;
        if (java.lang.Float.floatToIntBits(getWeight())
            != java.lang.Float.floatToIntBits(
                other.getWeight())) return false;
        if (java.lang.Float.floatToIntBits(getIntensity())
            != java.lang.Float.floatToIntBits(
                other.getIntensity())) return false;
        if (hasColor() != other.hasColor()) return false;
        if (hasColor()) {
          if (!getColor()
              .equals(other.getColor())) return false;
        }
        if (hasRadiusTransition() != other.hasRadiusTransition()) return false;
        if (hasRadiusTransition()) {
          if (!getRadiusTransition()
              .equals(other.getRadiusTransition())) return false;
        }
        if (hasIntensityTransition() != other.hasIntensityTransition()) return false;
        if (hasIntensityTransition()) {
          if (!getIntensityTransition()
              .equals(other.getIntensityTransition())) return false;
        }
        if (hasOpacityTransition() != other.hasOpacityTransition()) return false;
        if (hasOpacityTransition()) {
          if (!getOpacityTransition()
              .equals(other.getOpacityTransition())) return false;
        }
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + ID_FIELD_NUMBER;
        hash = (53 * hash) + getId().hashCode();
        hash = (37 * hash) + SOURCE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getSourceId().hashCode();
        hash = (37 * hash) + VISIBLE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getVisible());
        hash = (37 * hash) + MIN_ZOOM_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMinZoom());
        hash = (37 * hash) + MAX_ZOOM_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMaxZoom());
        hash = (37 * hash) + RADIUS_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getRadius());
        hash = (37 * hash) + WEIGHT_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getWeight());
        hash = (37 * hash) + INTENSITY_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getIntensity());
        if (hasColor()) {
          hash = (37 * hash) + COLOR_FIELD_NUMBER;
          hash = (53 * hash) + getColor().hashCode();
        }
        if (hasRadiusTransition()) {
          hash = (37 * hash) + RADIUS_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getRadiusTransition().hashCode();
        }
        if (hasIntensityTransition()) {
          hash = (37 * hash) + INTENSITY_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getIntensityTransition().hashCode();
        }
        if (hasOpacityTransition()) {
          hash = (37 * hash) + OPACITY_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getOpacityTransition().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.tophap.mapbox_gl.proto.Layer.Heatmap}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:com.tophap.mapbox_gl.proto.Layer.Heatmap)
          com.tophap.mapbox_gl.proto.Layers.Layer.HeatmapOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_Heatmap_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_Heatmap_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap.class, com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap.Builder.class);
        }

        // Construct using com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          id_ = "";

          sourceId_ = "";

          visible_ = false;

          minZoom_ = 0F;

          maxZoom_ = 0F;

          radius_ = 0F;

          weight_ = 0F;

          intensity_ = 0F;

          if (colorBuilder_ == null) {
            color_ = null;
          } else {
            color_ = null;
            colorBuilder_ = null;
          }
          if (radiusTransitionBuilder_ == null) {
            radiusTransition_ = null;
          } else {
            radiusTransition_ = null;
            radiusTransitionBuilder_ = null;
          }
          if (intensityTransitionBuilder_ == null) {
            intensityTransition_ = null;
          } else {
            intensityTransition_ = null;
            intensityTransitionBuilder_ = null;
          }
          if (opacityTransitionBuilder_ == null) {
            opacityTransition_ = null;
          } else {
            opacityTransition_ = null;
            opacityTransitionBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_Heatmap_descriptor;
        }

        @java.lang.Override
        public com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap getDefaultInstanceForType() {
          return com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap.getDefaultInstance();
        }

        @java.lang.Override
        public com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap build() {
          com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap buildPartial() {
          com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap result = new com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap(this);
          result.id_ = id_;
          result.sourceId_ = sourceId_;
          result.visible_ = visible_;
          result.minZoom_ = minZoom_;
          result.maxZoom_ = maxZoom_;
          result.radius_ = radius_;
          result.weight_ = weight_;
          result.intensity_ = intensity_;
          if (colorBuilder_ == null) {
            result.color_ = color_;
          } else {
            result.color_ = colorBuilder_.build();
          }
          if (radiusTransitionBuilder_ == null) {
            result.radiusTransition_ = radiusTransition_;
          } else {
            result.radiusTransition_ = radiusTransitionBuilder_.build();
          }
          if (intensityTransitionBuilder_ == null) {
            result.intensityTransition_ = intensityTransition_;
          } else {
            result.intensityTransition_ = intensityTransitionBuilder_.build();
          }
          if (opacityTransitionBuilder_ == null) {
            result.opacityTransition_ = opacityTransition_;
          } else {
            result.opacityTransition_ = opacityTransitionBuilder_.build();
          }
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap) {
            return mergeFrom((com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap other) {
          if (other == com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap.getDefaultInstance()) return this;
          if (!other.getId().isEmpty()) {
            id_ = other.id_;
            onChanged();
          }
          if (!other.getSourceId().isEmpty()) {
            sourceId_ = other.sourceId_;
            onChanged();
          }
          if (other.getVisible() != false) {
            setVisible(other.getVisible());
          }
          if (other.getMinZoom() != 0F) {
            setMinZoom(other.getMinZoom());
          }
          if (other.getMaxZoom() != 0F) {
            setMaxZoom(other.getMaxZoom());
          }
          if (other.getRadius() != 0F) {
            setRadius(other.getRadius());
          }
          if (other.getWeight() != 0F) {
            setWeight(other.getWeight());
          }
          if (other.getIntensity() != 0F) {
            setIntensity(other.getIntensity());
          }
          if (other.hasColor()) {
            mergeColor(other.getColor());
          }
          if (other.hasRadiusTransition()) {
            mergeRadiusTransition(other.getRadiusTransition());
          }
          if (other.hasIntensityTransition()) {
            mergeIntensityTransition(other.getIntensityTransition());
          }
          if (other.hasOpacityTransition()) {
            mergeOpacityTransition(other.getOpacityTransition());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private java.lang.Object id_ = "";
        /**
         * <code>string id = 1;</code>
         */
        public java.lang.String getId() {
          java.lang.Object ref = id_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            id_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string id = 1;</code>
         */
        public com.google.protobuf.ByteString
            getIdBytes() {
          java.lang.Object ref = id_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            id_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string id = 1;</code>
         */
        public Builder setId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          id_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string id = 1;</code>
         */
        public Builder clearId() {
          
          id_ = getDefaultInstance().getId();
          onChanged();
          return this;
        }
        /**
         * <code>string id = 1;</code>
         */
        public Builder setIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          id_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object sourceId_ = "";
        /**
         * <code>string source_id = 2;</code>
         */
        public java.lang.String getSourceId() {
          java.lang.Object ref = sourceId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            sourceId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string source_id = 2;</code>
         */
        public com.google.protobuf.ByteString
            getSourceIdBytes() {
          java.lang.Object ref = sourceId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            sourceId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string source_id = 2;</code>
         */
        public Builder setSourceId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          sourceId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string source_id = 2;</code>
         */
        public Builder clearSourceId() {
          
          sourceId_ = getDefaultInstance().getSourceId();
          onChanged();
          return this;
        }
        /**
         * <code>string source_id = 2;</code>
         */
        public Builder setSourceIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          sourceId_ = value;
          onChanged();
          return this;
        }

        private boolean visible_ ;
        /**
         * <code>bool visible = 3;</code>
         */
        public boolean getVisible() {
          return visible_;
        }
        /**
         * <code>bool visible = 3;</code>
         */
        public Builder setVisible(boolean value) {
          
          visible_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>bool visible = 3;</code>
         */
        public Builder clearVisible() {
          
          visible_ = false;
          onChanged();
          return this;
        }

        private float minZoom_ ;
        /**
         * <code>float min_zoom = 4;</code>
         */
        public float getMinZoom() {
          return minZoom_;
        }
        /**
         * <code>float min_zoom = 4;</code>
         */
        public Builder setMinZoom(float value) {
          
          minZoom_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float min_zoom = 4;</code>
         */
        public Builder clearMinZoom() {
          
          minZoom_ = 0F;
          onChanged();
          return this;
        }

        private float maxZoom_ ;
        /**
         * <code>float max_zoom = 5;</code>
         */
        public float getMaxZoom() {
          return maxZoom_;
        }
        /**
         * <code>float max_zoom = 5;</code>
         */
        public Builder setMaxZoom(float value) {
          
          maxZoom_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float max_zoom = 5;</code>
         */
        public Builder clearMaxZoom() {
          
          maxZoom_ = 0F;
          onChanged();
          return this;
        }

        private float radius_ ;
        /**
         * <code>float radius = 6;</code>
         */
        public float getRadius() {
          return radius_;
        }
        /**
         * <code>float radius = 6;</code>
         */
        public Builder setRadius(float value) {
          
          radius_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float radius = 6;</code>
         */
        public Builder clearRadius() {
          
          radius_ = 0F;
          onChanged();
          return this;
        }

        private float weight_ ;
        /**
         * <code>float weight = 7;</code>
         */
        public float getWeight() {
          return weight_;
        }
        /**
         * <code>float weight = 7;</code>
         */
        public Builder setWeight(float value) {
          
          weight_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float weight = 7;</code>
         */
        public Builder clearWeight() {
          
          weight_ = 0F;
          onChanged();
          return this;
        }

        private float intensity_ ;
        /**
         * <code>float intensity = 8;</code>
         */
        public float getIntensity() {
          return intensity_;
        }
        /**
         * <code>float intensity = 8;</code>
         */
        public Builder setIntensity(float value) {
          
          intensity_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float intensity = 8;</code>
         */
        public Builder clearIntensity() {
          
          intensity_ = 0F;
          onChanged();
          return this;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.Color color_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder> colorBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 9;</code>
         */
        public boolean hasColor() {
          return colorBuilder_ != null || color_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 9;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.Color getColor() {
          if (colorBuilder_ == null) {
            return color_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : color_;
          } else {
            return colorBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 9;</code>
         */
        public Builder setColor(com.tophap.mapbox_gl.proto.MapboxUtil.Color value) {
          if (colorBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            color_ = value;
            onChanged();
          } else {
            colorBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 9;</code>
         */
        public Builder setColor(
            com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder builderForValue) {
          if (colorBuilder_ == null) {
            color_ = builderForValue.build();
            onChanged();
          } else {
            colorBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 9;</code>
         */
        public Builder mergeColor(com.tophap.mapbox_gl.proto.MapboxUtil.Color value) {
          if (colorBuilder_ == null) {
            if (color_ != null) {
              color_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.newBuilder(color_).mergeFrom(value).buildPartial();
            } else {
              color_ = value;
            }
            onChanged();
          } else {
            colorBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 9;</code>
         */
        public Builder clearColor() {
          if (colorBuilder_ == null) {
            color_ = null;
            onChanged();
          } else {
            color_ = null;
            colorBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 9;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder getColorBuilder() {
          
          onChanged();
          return getColorFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 9;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getColorOrBuilder() {
          if (colorBuilder_ != null) {
            return colorBuilder_.getMessageOrBuilder();
          } else {
            return color_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : color_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 9;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder> 
            getColorFieldBuilder() {
          if (colorBuilder_ == null) {
            colorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder>(
                    getColor(),
                    getParentForChildren(),
                    isClean());
            color_ = null;
          }
          return colorBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions radiusTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> radiusTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions radius_transition = 11;</code>
         */
        public boolean hasRadiusTransition() {
          return radiusTransitionBuilder_ != null || radiusTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions radius_transition = 11;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getRadiusTransition() {
          if (radiusTransitionBuilder_ == null) {
            return radiusTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : radiusTransition_;
          } else {
            return radiusTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions radius_transition = 11;</code>
         */
        public Builder setRadiusTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (radiusTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            radiusTransition_ = value;
            onChanged();
          } else {
            radiusTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions radius_transition = 11;</code>
         */
        public Builder setRadiusTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (radiusTransitionBuilder_ == null) {
            radiusTransition_ = builderForValue.build();
            onChanged();
          } else {
            radiusTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions radius_transition = 11;</code>
         */
        public Builder mergeRadiusTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (radiusTransitionBuilder_ == null) {
            if (radiusTransition_ != null) {
              radiusTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(radiusTransition_).mergeFrom(value).buildPartial();
            } else {
              radiusTransition_ = value;
            }
            onChanged();
          } else {
            radiusTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions radius_transition = 11;</code>
         */
        public Builder clearRadiusTransition() {
          if (radiusTransitionBuilder_ == null) {
            radiusTransition_ = null;
            onChanged();
          } else {
            radiusTransition_ = null;
            radiusTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions radius_transition = 11;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getRadiusTransitionBuilder() {
          
          onChanged();
          return getRadiusTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions radius_transition = 11;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getRadiusTransitionOrBuilder() {
          if (radiusTransitionBuilder_ != null) {
            return radiusTransitionBuilder_.getMessageOrBuilder();
          } else {
            return radiusTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : radiusTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions radius_transition = 11;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getRadiusTransitionFieldBuilder() {
          if (radiusTransitionBuilder_ == null) {
            radiusTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getRadiusTransition(),
                    getParentForChildren(),
                    isClean());
            radiusTransition_ = null;
          }
          return radiusTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions intensityTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> intensityTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions intensity_transition = 12;</code>
         */
        public boolean hasIntensityTransition() {
          return intensityTransitionBuilder_ != null || intensityTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions intensity_transition = 12;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getIntensityTransition() {
          if (intensityTransitionBuilder_ == null) {
            return intensityTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : intensityTransition_;
          } else {
            return intensityTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions intensity_transition = 12;</code>
         */
        public Builder setIntensityTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (intensityTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            intensityTransition_ = value;
            onChanged();
          } else {
            intensityTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions intensity_transition = 12;</code>
         */
        public Builder setIntensityTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (intensityTransitionBuilder_ == null) {
            intensityTransition_ = builderForValue.build();
            onChanged();
          } else {
            intensityTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions intensity_transition = 12;</code>
         */
        public Builder mergeIntensityTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (intensityTransitionBuilder_ == null) {
            if (intensityTransition_ != null) {
              intensityTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(intensityTransition_).mergeFrom(value).buildPartial();
            } else {
              intensityTransition_ = value;
            }
            onChanged();
          } else {
            intensityTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions intensity_transition = 12;</code>
         */
        public Builder clearIntensityTransition() {
          if (intensityTransitionBuilder_ == null) {
            intensityTransition_ = null;
            onChanged();
          } else {
            intensityTransition_ = null;
            intensityTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions intensity_transition = 12;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getIntensityTransitionBuilder() {
          
          onChanged();
          return getIntensityTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions intensity_transition = 12;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getIntensityTransitionOrBuilder() {
          if (intensityTransitionBuilder_ != null) {
            return intensityTransitionBuilder_.getMessageOrBuilder();
          } else {
            return intensityTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : intensityTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions intensity_transition = 12;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getIntensityTransitionFieldBuilder() {
          if (intensityTransitionBuilder_ == null) {
            intensityTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getIntensityTransition(),
                    getParentForChildren(),
                    isClean());
            intensityTransition_ = null;
          }
          return intensityTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions opacityTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> opacityTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 13;</code>
         */
        public boolean hasOpacityTransition() {
          return opacityTransitionBuilder_ != null || opacityTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 13;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getOpacityTransition() {
          if (opacityTransitionBuilder_ == null) {
            return opacityTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : opacityTransition_;
          } else {
            return opacityTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 13;</code>
         */
        public Builder setOpacityTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (opacityTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            opacityTransition_ = value;
            onChanged();
          } else {
            opacityTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 13;</code>
         */
        public Builder setOpacityTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (opacityTransitionBuilder_ == null) {
            opacityTransition_ = builderForValue.build();
            onChanged();
          } else {
            opacityTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 13;</code>
         */
        public Builder mergeOpacityTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (opacityTransitionBuilder_ == null) {
            if (opacityTransition_ != null) {
              opacityTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(opacityTransition_).mergeFrom(value).buildPartial();
            } else {
              opacityTransition_ = value;
            }
            onChanged();
          } else {
            opacityTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 13;</code>
         */
        public Builder clearOpacityTransition() {
          if (opacityTransitionBuilder_ == null) {
            opacityTransition_ = null;
            onChanged();
          } else {
            opacityTransition_ = null;
            opacityTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 13;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getOpacityTransitionBuilder() {
          
          onChanged();
          return getOpacityTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 13;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getOpacityTransitionOrBuilder() {
          if (opacityTransitionBuilder_ != null) {
            return opacityTransitionBuilder_.getMessageOrBuilder();
          } else {
            return opacityTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : opacityTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 13;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getOpacityTransitionFieldBuilder() {
          if (opacityTransitionBuilder_ == null) {
            opacityTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getOpacityTransition(),
                    getParentForChildren(),
                    isClean());
            opacityTransition_ = null;
          }
          return opacityTransitionBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:com.tophap.mapbox_gl.proto.Layer.Heatmap)
      }

      // @@protoc_insertion_point(class_scope:com.tophap.mapbox_gl.proto.Layer.Heatmap)
      private static final com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap();
      }

      public static com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Heatmap>
          PARSER = new com.google.protobuf.AbstractParser<Heatmap>() {
        @java.lang.Override
        public Heatmap parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Heatmap(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Heatmap> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Heatmap> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface HillshadeOrBuilder extends
        // @@protoc_insertion_point(interface_extends:com.tophap.mapbox_gl.proto.Layer.Hillshade)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>string id = 1;</code>
       */
      java.lang.String getId();
      /**
       * <code>string id = 1;</code>
       */
      com.google.protobuf.ByteString
          getIdBytes();

      /**
       * <code>string source_id = 2;</code>
       */
      java.lang.String getSourceId();
      /**
       * <code>string source_id = 2;</code>
       */
      com.google.protobuf.ByteString
          getSourceIdBytes();

      /**
       * <code>bool visible = 3;</code>
       */
      boolean getVisible();

      /**
       * <code>float min_zoom = 4;</code>
       */
      float getMinZoom();

      /**
       * <code>float max_zoom = 5;</code>
       */
      float getMaxZoom();

      /**
       * <code>float illumination_direction = 6;</code>
       */
      float getIlluminationDirection();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor illumination_anchor = 7;</code>
       */
      int getIlluminationAnchorValue();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor illumination_anchor = 7;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor getIlluminationAnchor();

      /**
       * <code>float exaggeration = 8;</code>
       */
      float getExaggeration();

      /**
       * <code>.com.tophap.mapbox_gl.proto.Color shadow_color = 9;</code>
       */
      boolean hasShadowColor();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color shadow_color = 9;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.Color getShadowColor();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color shadow_color = 9;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getShadowColorOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.Color highlight_color = 10;</code>
       */
      boolean hasHighlightColor();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color highlight_color = 10;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.Color getHighlightColor();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color highlight_color = 10;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getHighlightColorOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.Color accent_color = 11;</code>
       */
      boolean hasAccentColor();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color accent_color = 11;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.Color getAccentColor();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color accent_color = 11;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getAccentColorOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions exaggeration_transition = 12;</code>
       */
      boolean hasExaggerationTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions exaggeration_transition = 12;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getExaggerationTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions exaggeration_transition = 12;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getExaggerationTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions shadow_color_transition = 13;</code>
       */
      boolean hasShadowColorTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions shadow_color_transition = 13;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getShadowColorTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions shadow_color_transition = 13;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getShadowColorTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions highlight_color_transition = 14;</code>
       */
      boolean hasHighlightColorTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions highlight_color_transition = 14;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getHighlightColorTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions highlight_color_transition = 14;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getHighlightColorTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions accent_color_transition = 15;</code>
       */
      boolean hasAccentColorTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions accent_color_transition = 15;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getAccentColorTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions accent_color_transition = 15;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getAccentColorTransitionOrBuilder();
    }
    /**
     * Protobuf type {@code com.tophap.mapbox_gl.proto.Layer.Hillshade}
     */
    public  static final class Hillshade extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:com.tophap.mapbox_gl.proto.Layer.Hillshade)
        HillshadeOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Hillshade.newBuilder() to construct.
      private Hillshade(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Hillshade() {
        id_ = "";
        sourceId_ = "";
        illuminationAnchor_ = 0;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Hillshade(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();

                id_ = s;
                break;
              }
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();

                sourceId_ = s;
                break;
              }
              case 24: {

                visible_ = input.readBool();
                break;
              }
              case 37: {

                minZoom_ = input.readFloat();
                break;
              }
              case 45: {

                maxZoom_ = input.readFloat();
                break;
              }
              case 53: {

                illuminationDirection_ = input.readFloat();
                break;
              }
              case 56: {
                int rawValue = input.readEnum();

                illuminationAnchor_ = rawValue;
                break;
              }
              case 69: {

                exaggeration_ = input.readFloat();
                break;
              }
              case 74: {
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder subBuilder = null;
                if (shadowColor_ != null) {
                  subBuilder = shadowColor_.toBuilder();
                }
                shadowColor_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.Color.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(shadowColor_);
                  shadowColor_ = subBuilder.buildPartial();
                }

                break;
              }
              case 82: {
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder subBuilder = null;
                if (highlightColor_ != null) {
                  subBuilder = highlightColor_.toBuilder();
                }
                highlightColor_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.Color.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(highlightColor_);
                  highlightColor_ = subBuilder.buildPartial();
                }

                break;
              }
              case 90: {
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder subBuilder = null;
                if (accentColor_ != null) {
                  subBuilder = accentColor_.toBuilder();
                }
                accentColor_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.Color.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(accentColor_);
                  accentColor_ = subBuilder.buildPartial();
                }

                break;
              }
              case 98: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (exaggerationTransition_ != null) {
                  subBuilder = exaggerationTransition_.toBuilder();
                }
                exaggerationTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(exaggerationTransition_);
                  exaggerationTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 106: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (shadowColorTransition_ != null) {
                  subBuilder = shadowColorTransition_.toBuilder();
                }
                shadowColorTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(shadowColorTransition_);
                  shadowColorTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 114: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (highlightColorTransition_ != null) {
                  subBuilder = highlightColorTransition_.toBuilder();
                }
                highlightColorTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(highlightColorTransition_);
                  highlightColorTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 122: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (accentColorTransition_ != null) {
                  subBuilder = accentColorTransition_.toBuilder();
                }
                accentColorTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(accentColorTransition_);
                  accentColorTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_Hillshade_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_Hillshade_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade.class, com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade.Builder.class);
      }

      public static final int ID_FIELD_NUMBER = 1;
      private volatile java.lang.Object id_;
      /**
       * <code>string id = 1;</code>
       */
      public java.lang.String getId() {
        java.lang.Object ref = id_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          id_ = s;
          return s;
        }
      }
      /**
       * <code>string id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = id_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          id_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int SOURCE_ID_FIELD_NUMBER = 2;
      private volatile java.lang.Object sourceId_;
      /**
       * <code>string source_id = 2;</code>
       */
      public java.lang.String getSourceId() {
        java.lang.Object ref = sourceId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          sourceId_ = s;
          return s;
        }
      }
      /**
       * <code>string source_id = 2;</code>
       */
      public com.google.protobuf.ByteString
          getSourceIdBytes() {
        java.lang.Object ref = sourceId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          sourceId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int VISIBLE_FIELD_NUMBER = 3;
      private boolean visible_;
      /**
       * <code>bool visible = 3;</code>
       */
      public boolean getVisible() {
        return visible_;
      }

      public static final int MIN_ZOOM_FIELD_NUMBER = 4;
      private float minZoom_;
      /**
       * <code>float min_zoom = 4;</code>
       */
      public float getMinZoom() {
        return minZoom_;
      }

      public static final int MAX_ZOOM_FIELD_NUMBER = 5;
      private float maxZoom_;
      /**
       * <code>float max_zoom = 5;</code>
       */
      public float getMaxZoom() {
        return maxZoom_;
      }

      public static final int ILLUMINATION_DIRECTION_FIELD_NUMBER = 6;
      private float illuminationDirection_;
      /**
       * <code>float illumination_direction = 6;</code>
       */
      public float getIlluminationDirection() {
        return illuminationDirection_;
      }

      public static final int ILLUMINATION_ANCHOR_FIELD_NUMBER = 7;
      private int illuminationAnchor_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor illumination_anchor = 7;</code>
       */
      public int getIlluminationAnchorValue() {
        return illuminationAnchor_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor illumination_anchor = 7;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor getIlluminationAnchor() {
        @SuppressWarnings("deprecation")
        com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor result = com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.valueOf(illuminationAnchor_);
        return result == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.UNRECOGNIZED : result;
      }

      public static final int EXAGGERATION_FIELD_NUMBER = 8;
      private float exaggeration_;
      /**
       * <code>float exaggeration = 8;</code>
       */
      public float getExaggeration() {
        return exaggeration_;
      }

      public static final int SHADOW_COLOR_FIELD_NUMBER = 9;
      private com.tophap.mapbox_gl.proto.MapboxUtil.Color shadowColor_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color shadow_color = 9;</code>
       */
      public boolean hasShadowColor() {
        return shadowColor_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color shadow_color = 9;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.Color getShadowColor() {
        return shadowColor_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : shadowColor_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color shadow_color = 9;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getShadowColorOrBuilder() {
        return getShadowColor();
      }

      public static final int HIGHLIGHT_COLOR_FIELD_NUMBER = 10;
      private com.tophap.mapbox_gl.proto.MapboxUtil.Color highlightColor_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color highlight_color = 10;</code>
       */
      public boolean hasHighlightColor() {
        return highlightColor_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color highlight_color = 10;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.Color getHighlightColor() {
        return highlightColor_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : highlightColor_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color highlight_color = 10;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getHighlightColorOrBuilder() {
        return getHighlightColor();
      }

      public static final int ACCENT_COLOR_FIELD_NUMBER = 11;
      private com.tophap.mapbox_gl.proto.MapboxUtil.Color accentColor_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color accent_color = 11;</code>
       */
      public boolean hasAccentColor() {
        return accentColor_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color accent_color = 11;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.Color getAccentColor() {
        return accentColor_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : accentColor_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color accent_color = 11;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getAccentColorOrBuilder() {
        return getAccentColor();
      }

      public static final int EXAGGERATION_TRANSITION_FIELD_NUMBER = 12;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions exaggerationTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions exaggeration_transition = 12;</code>
       */
      public boolean hasExaggerationTransition() {
        return exaggerationTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions exaggeration_transition = 12;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getExaggerationTransition() {
        return exaggerationTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : exaggerationTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions exaggeration_transition = 12;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getExaggerationTransitionOrBuilder() {
        return getExaggerationTransition();
      }

      public static final int SHADOW_COLOR_TRANSITION_FIELD_NUMBER = 13;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions shadowColorTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions shadow_color_transition = 13;</code>
       */
      public boolean hasShadowColorTransition() {
        return shadowColorTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions shadow_color_transition = 13;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getShadowColorTransition() {
        return shadowColorTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : shadowColorTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions shadow_color_transition = 13;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getShadowColorTransitionOrBuilder() {
        return getShadowColorTransition();
      }

      public static final int HIGHLIGHT_COLOR_TRANSITION_FIELD_NUMBER = 14;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions highlightColorTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions highlight_color_transition = 14;</code>
       */
      public boolean hasHighlightColorTransition() {
        return highlightColorTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions highlight_color_transition = 14;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getHighlightColorTransition() {
        return highlightColorTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : highlightColorTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions highlight_color_transition = 14;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getHighlightColorTransitionOrBuilder() {
        return getHighlightColorTransition();
      }

      public static final int ACCENT_COLOR_TRANSITION_FIELD_NUMBER = 15;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions accentColorTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions accent_color_transition = 15;</code>
       */
      public boolean hasAccentColorTransition() {
        return accentColorTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions accent_color_transition = 15;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getAccentColorTransition() {
        return accentColorTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : accentColorTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions accent_color_transition = 15;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getAccentColorTransitionOrBuilder() {
        return getAccentColorTransition();
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!getIdBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, id_);
        }
        if (!getSourceIdBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, sourceId_);
        }
        if (visible_ != false) {
          output.writeBool(3, visible_);
        }
        if (minZoom_ != 0F) {
          output.writeFloat(4, minZoom_);
        }
        if (maxZoom_ != 0F) {
          output.writeFloat(5, maxZoom_);
        }
        if (illuminationDirection_ != 0F) {
          output.writeFloat(6, illuminationDirection_);
        }
        if (illuminationAnchor_ != com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.MAP.getNumber()) {
          output.writeEnum(7, illuminationAnchor_);
        }
        if (exaggeration_ != 0F) {
          output.writeFloat(8, exaggeration_);
        }
        if (shadowColor_ != null) {
          output.writeMessage(9, getShadowColor());
        }
        if (highlightColor_ != null) {
          output.writeMessage(10, getHighlightColor());
        }
        if (accentColor_ != null) {
          output.writeMessage(11, getAccentColor());
        }
        if (exaggerationTransition_ != null) {
          output.writeMessage(12, getExaggerationTransition());
        }
        if (shadowColorTransition_ != null) {
          output.writeMessage(13, getShadowColorTransition());
        }
        if (highlightColorTransition_ != null) {
          output.writeMessage(14, getHighlightColorTransition());
        }
        if (accentColorTransition_ != null) {
          output.writeMessage(15, getAccentColorTransition());
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!getIdBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, id_);
        }
        if (!getSourceIdBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, sourceId_);
        }
        if (visible_ != false) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(3, visible_);
        }
        if (minZoom_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(4, minZoom_);
        }
        if (maxZoom_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(5, maxZoom_);
        }
        if (illuminationDirection_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(6, illuminationDirection_);
        }
        if (illuminationAnchor_ != com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.MAP.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(7, illuminationAnchor_);
        }
        if (exaggeration_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(8, exaggeration_);
        }
        if (shadowColor_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(9, getShadowColor());
        }
        if (highlightColor_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(10, getHighlightColor());
        }
        if (accentColor_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(11, getAccentColor());
        }
        if (exaggerationTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(12, getExaggerationTransition());
        }
        if (shadowColorTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(13, getShadowColorTransition());
        }
        if (highlightColorTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(14, getHighlightColorTransition());
        }
        if (accentColorTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(15, getAccentColorTransition());
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade)) {
          return super.equals(obj);
        }
        com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade other = (com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade) obj;

        if (!getId()
            .equals(other.getId())) return false;
        if (!getSourceId()
            .equals(other.getSourceId())) return false;
        if (getVisible()
            != other.getVisible()) return false;
        if (java.lang.Float.floatToIntBits(getMinZoom())
            != java.lang.Float.floatToIntBits(
                other.getMinZoom())) return false;
        if (java.lang.Float.floatToIntBits(getMaxZoom())
            != java.lang.Float.floatToIntBits(
                other.getMaxZoom())) return false;
        if (java.lang.Float.floatToIntBits(getIlluminationDirection())
            != java.lang.Float.floatToIntBits(
                other.getIlluminationDirection())) return false;
        if (illuminationAnchor_ != other.illuminationAnchor_) return false;
        if (java.lang.Float.floatToIntBits(getExaggeration())
            != java.lang.Float.floatToIntBits(
                other.getExaggeration())) return false;
        if (hasShadowColor() != other.hasShadowColor()) return false;
        if (hasShadowColor()) {
          if (!getShadowColor()
              .equals(other.getShadowColor())) return false;
        }
        if (hasHighlightColor() != other.hasHighlightColor()) return false;
        if (hasHighlightColor()) {
          if (!getHighlightColor()
              .equals(other.getHighlightColor())) return false;
        }
        if (hasAccentColor() != other.hasAccentColor()) return false;
        if (hasAccentColor()) {
          if (!getAccentColor()
              .equals(other.getAccentColor())) return false;
        }
        if (hasExaggerationTransition() != other.hasExaggerationTransition()) return false;
        if (hasExaggerationTransition()) {
          if (!getExaggerationTransition()
              .equals(other.getExaggerationTransition())) return false;
        }
        if (hasShadowColorTransition() != other.hasShadowColorTransition()) return false;
        if (hasShadowColorTransition()) {
          if (!getShadowColorTransition()
              .equals(other.getShadowColorTransition())) return false;
        }
        if (hasHighlightColorTransition() != other.hasHighlightColorTransition()) return false;
        if (hasHighlightColorTransition()) {
          if (!getHighlightColorTransition()
              .equals(other.getHighlightColorTransition())) return false;
        }
        if (hasAccentColorTransition() != other.hasAccentColorTransition()) return false;
        if (hasAccentColorTransition()) {
          if (!getAccentColorTransition()
              .equals(other.getAccentColorTransition())) return false;
        }
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + ID_FIELD_NUMBER;
        hash = (53 * hash) + getId().hashCode();
        hash = (37 * hash) + SOURCE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getSourceId().hashCode();
        hash = (37 * hash) + VISIBLE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getVisible());
        hash = (37 * hash) + MIN_ZOOM_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMinZoom());
        hash = (37 * hash) + MAX_ZOOM_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMaxZoom());
        hash = (37 * hash) + ILLUMINATION_DIRECTION_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getIlluminationDirection());
        hash = (37 * hash) + ILLUMINATION_ANCHOR_FIELD_NUMBER;
        hash = (53 * hash) + illuminationAnchor_;
        hash = (37 * hash) + EXAGGERATION_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getExaggeration());
        if (hasShadowColor()) {
          hash = (37 * hash) + SHADOW_COLOR_FIELD_NUMBER;
          hash = (53 * hash) + getShadowColor().hashCode();
        }
        if (hasHighlightColor()) {
          hash = (37 * hash) + HIGHLIGHT_COLOR_FIELD_NUMBER;
          hash = (53 * hash) + getHighlightColor().hashCode();
        }
        if (hasAccentColor()) {
          hash = (37 * hash) + ACCENT_COLOR_FIELD_NUMBER;
          hash = (53 * hash) + getAccentColor().hashCode();
        }
        if (hasExaggerationTransition()) {
          hash = (37 * hash) + EXAGGERATION_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getExaggerationTransition().hashCode();
        }
        if (hasShadowColorTransition()) {
          hash = (37 * hash) + SHADOW_COLOR_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getShadowColorTransition().hashCode();
        }
        if (hasHighlightColorTransition()) {
          hash = (37 * hash) + HIGHLIGHT_COLOR_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getHighlightColorTransition().hashCode();
        }
        if (hasAccentColorTransition()) {
          hash = (37 * hash) + ACCENT_COLOR_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getAccentColorTransition().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.tophap.mapbox_gl.proto.Layer.Hillshade}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:com.tophap.mapbox_gl.proto.Layer.Hillshade)
          com.tophap.mapbox_gl.proto.Layers.Layer.HillshadeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_Hillshade_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_Hillshade_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade.class, com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade.Builder.class);
        }

        // Construct using com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          id_ = "";

          sourceId_ = "";

          visible_ = false;

          minZoom_ = 0F;

          maxZoom_ = 0F;

          illuminationDirection_ = 0F;

          illuminationAnchor_ = 0;

          exaggeration_ = 0F;

          if (shadowColorBuilder_ == null) {
            shadowColor_ = null;
          } else {
            shadowColor_ = null;
            shadowColorBuilder_ = null;
          }
          if (highlightColorBuilder_ == null) {
            highlightColor_ = null;
          } else {
            highlightColor_ = null;
            highlightColorBuilder_ = null;
          }
          if (accentColorBuilder_ == null) {
            accentColor_ = null;
          } else {
            accentColor_ = null;
            accentColorBuilder_ = null;
          }
          if (exaggerationTransitionBuilder_ == null) {
            exaggerationTransition_ = null;
          } else {
            exaggerationTransition_ = null;
            exaggerationTransitionBuilder_ = null;
          }
          if (shadowColorTransitionBuilder_ == null) {
            shadowColorTransition_ = null;
          } else {
            shadowColorTransition_ = null;
            shadowColorTransitionBuilder_ = null;
          }
          if (highlightColorTransitionBuilder_ == null) {
            highlightColorTransition_ = null;
          } else {
            highlightColorTransition_ = null;
            highlightColorTransitionBuilder_ = null;
          }
          if (accentColorTransitionBuilder_ == null) {
            accentColorTransition_ = null;
          } else {
            accentColorTransition_ = null;
            accentColorTransitionBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_Hillshade_descriptor;
        }

        @java.lang.Override
        public com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade getDefaultInstanceForType() {
          return com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade.getDefaultInstance();
        }

        @java.lang.Override
        public com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade build() {
          com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade buildPartial() {
          com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade result = new com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade(this);
          result.id_ = id_;
          result.sourceId_ = sourceId_;
          result.visible_ = visible_;
          result.minZoom_ = minZoom_;
          result.maxZoom_ = maxZoom_;
          result.illuminationDirection_ = illuminationDirection_;
          result.illuminationAnchor_ = illuminationAnchor_;
          result.exaggeration_ = exaggeration_;
          if (shadowColorBuilder_ == null) {
            result.shadowColor_ = shadowColor_;
          } else {
            result.shadowColor_ = shadowColorBuilder_.build();
          }
          if (highlightColorBuilder_ == null) {
            result.highlightColor_ = highlightColor_;
          } else {
            result.highlightColor_ = highlightColorBuilder_.build();
          }
          if (accentColorBuilder_ == null) {
            result.accentColor_ = accentColor_;
          } else {
            result.accentColor_ = accentColorBuilder_.build();
          }
          if (exaggerationTransitionBuilder_ == null) {
            result.exaggerationTransition_ = exaggerationTransition_;
          } else {
            result.exaggerationTransition_ = exaggerationTransitionBuilder_.build();
          }
          if (shadowColorTransitionBuilder_ == null) {
            result.shadowColorTransition_ = shadowColorTransition_;
          } else {
            result.shadowColorTransition_ = shadowColorTransitionBuilder_.build();
          }
          if (highlightColorTransitionBuilder_ == null) {
            result.highlightColorTransition_ = highlightColorTransition_;
          } else {
            result.highlightColorTransition_ = highlightColorTransitionBuilder_.build();
          }
          if (accentColorTransitionBuilder_ == null) {
            result.accentColorTransition_ = accentColorTransition_;
          } else {
            result.accentColorTransition_ = accentColorTransitionBuilder_.build();
          }
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade) {
            return mergeFrom((com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade other) {
          if (other == com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade.getDefaultInstance()) return this;
          if (!other.getId().isEmpty()) {
            id_ = other.id_;
            onChanged();
          }
          if (!other.getSourceId().isEmpty()) {
            sourceId_ = other.sourceId_;
            onChanged();
          }
          if (other.getVisible() != false) {
            setVisible(other.getVisible());
          }
          if (other.getMinZoom() != 0F) {
            setMinZoom(other.getMinZoom());
          }
          if (other.getMaxZoom() != 0F) {
            setMaxZoom(other.getMaxZoom());
          }
          if (other.getIlluminationDirection() != 0F) {
            setIlluminationDirection(other.getIlluminationDirection());
          }
          if (other.illuminationAnchor_ != 0) {
            setIlluminationAnchorValue(other.getIlluminationAnchorValue());
          }
          if (other.getExaggeration() != 0F) {
            setExaggeration(other.getExaggeration());
          }
          if (other.hasShadowColor()) {
            mergeShadowColor(other.getShadowColor());
          }
          if (other.hasHighlightColor()) {
            mergeHighlightColor(other.getHighlightColor());
          }
          if (other.hasAccentColor()) {
            mergeAccentColor(other.getAccentColor());
          }
          if (other.hasExaggerationTransition()) {
            mergeExaggerationTransition(other.getExaggerationTransition());
          }
          if (other.hasShadowColorTransition()) {
            mergeShadowColorTransition(other.getShadowColorTransition());
          }
          if (other.hasHighlightColorTransition()) {
            mergeHighlightColorTransition(other.getHighlightColorTransition());
          }
          if (other.hasAccentColorTransition()) {
            mergeAccentColorTransition(other.getAccentColorTransition());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }

        private java.lang.Object id_ = "";
        /**
         * <code>string id = 1;</code>
         */
        public java.lang.String getId() {
          java.lang.Object ref = id_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            id_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string id = 1;</code>
         */
        public com.google.protobuf.ByteString
            getIdBytes() {
          java.lang.Object ref = id_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            id_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string id = 1;</code>
         */
        public Builder setId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          id_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string id = 1;</code>
         */
        public Builder clearId() {
          
          id_ = getDefaultInstance().getId();
          onChanged();
          return this;
        }
        /**
         * <code>string id = 1;</code>
         */
        public Builder setIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          id_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object sourceId_ = "";
        /**
         * <code>string source_id = 2;</code>
         */
        public java.lang.String getSourceId() {
          java.lang.Object ref = sourceId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            sourceId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string source_id = 2;</code>
         */
        public com.google.protobuf.ByteString
            getSourceIdBytes() {
          java.lang.Object ref = sourceId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            sourceId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string source_id = 2;</code>
         */
        public Builder setSourceId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          sourceId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string source_id = 2;</code>
         */
        public Builder clearSourceId() {
          
          sourceId_ = getDefaultInstance().getSourceId();
          onChanged();
          return this;
        }
        /**
         * <code>string source_id = 2;</code>
         */
        public Builder setSourceIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          sourceId_ = value;
          onChanged();
          return this;
        }

        private boolean visible_ ;
        /**
         * <code>bool visible = 3;</code>
         */
        public boolean getVisible() {
          return visible_;
        }
        /**
         * <code>bool visible = 3;</code>
         */
        public Builder setVisible(boolean value) {
          
          visible_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>bool visible = 3;</code>
         */
        public Builder clearVisible() {
          
          visible_ = false;
          onChanged();
          return this;
        }

        private float minZoom_ ;
        /**
         * <code>float min_zoom = 4;</code>
         */
        public float getMinZoom() {
          return minZoom_;
        }
        /**
         * <code>float min_zoom = 4;</code>
         */
        public Builder setMinZoom(float value) {
          
          minZoom_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float min_zoom = 4;</code>
         */
        public Builder clearMinZoom() {
          
          minZoom_ = 0F;
          onChanged();
          return this;
        }

        private float maxZoom_ ;
        /**
         * <code>float max_zoom = 5;</code>
         */
        public float getMaxZoom() {
          return maxZoom_;
        }
        /**
         * <code>float max_zoom = 5;</code>
         */
        public Builder setMaxZoom(float value) {
          
          maxZoom_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float max_zoom = 5;</code>
         */
        public Builder clearMaxZoom() {
          
          maxZoom_ = 0F;
          onChanged();
          return this;
        }

        private float illuminationDirection_ ;
        /**
         * <code>float illumination_direction = 6;</code>
         */
        public float getIlluminationDirection() {
          return illuminationDirection_;
        }
        /**
         * <code>float illumination_direction = 6;</code>
         */
        public Builder setIlluminationDirection(float value) {
          
          illuminationDirection_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float illumination_direction = 6;</code>
         */
        public Builder clearIlluminationDirection() {
          
          illuminationDirection_ = 0F;
          onChanged();
          return this;
        }

        private int illuminationAnchor_ = 0;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor illumination_anchor = 7;</code>
         */
        public int getIlluminationAnchorValue() {
          return illuminationAnchor_;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor illumination_anchor = 7;</code>
         */
        public Builder setIlluminationAnchorValue(int value) {
          illuminationAnchor_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor illumination_anchor = 7;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor getIlluminationAnchor() {
          @SuppressWarnings("deprecation")
          com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor result = com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.valueOf(illuminationAnchor_);
          return result == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.UNRECOGNIZED : result;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor illumination_anchor = 7;</code>
         */
        public Builder setIlluminationAnchor(com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor value) {
          if (value == null) {
            throw new NullPointerException();
          }
          
          illuminationAnchor_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor illumination_anchor = 7;</code>
         */
        public Builder clearIlluminationAnchor() {
          
          illuminationAnchor_ = 0;
          onChanged();
          return this;
        }

        private float exaggeration_ ;
        /**
         * <code>float exaggeration = 8;</code>
         */
        public float getExaggeration() {
          return exaggeration_;
        }
        /**
         * <code>float exaggeration = 8;</code>
         */
        public Builder setExaggeration(float value) {
          
          exaggeration_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float exaggeration = 8;</code>
         */
        public Builder clearExaggeration() {
          
          exaggeration_ = 0F;
          onChanged();
          return this;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.Color shadowColor_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder> shadowColorBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color shadow_color = 9;</code>
         */
        public boolean hasShadowColor() {
          return shadowColorBuilder_ != null || shadowColor_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color shadow_color = 9;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.Color getShadowColor() {
          if (shadowColorBuilder_ == null) {
            return shadowColor_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : shadowColor_;
          } else {
            return shadowColorBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color shadow_color = 9;</code>
         */
        public Builder setShadowColor(com.tophap.mapbox_gl.proto.MapboxUtil.Color value) {
          if (shadowColorBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            shadowColor_ = value;
            onChanged();
          } else {
            shadowColorBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color shadow_color = 9;</code>
         */
        public Builder setShadowColor(
            com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder builderForValue) {
          if (shadowColorBuilder_ == null) {
            shadowColor_ = builderForValue.build();
            onChanged();
          } else {
            shadowColorBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color shadow_color = 9;</code>
         */
        public Builder mergeShadowColor(com.tophap.mapbox_gl.proto.MapboxUtil.Color value) {
          if (shadowColorBuilder_ == null) {
            if (shadowColor_ != null) {
              shadowColor_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.newBuilder(shadowColor_).mergeFrom(value).buildPartial();
            } else {
              shadowColor_ = value;
            }
            onChanged();
          } else {
            shadowColorBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color shadow_color = 9;</code>
         */
        public Builder clearShadowColor() {
          if (shadowColorBuilder_ == null) {
            shadowColor_ = null;
            onChanged();
          } else {
            shadowColor_ = null;
            shadowColorBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color shadow_color = 9;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder getShadowColorBuilder() {
          
          onChanged();
          return getShadowColorFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color shadow_color = 9;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getShadowColorOrBuilder() {
          if (shadowColorBuilder_ != null) {
            return shadowColorBuilder_.getMessageOrBuilder();
          } else {
            return shadowColor_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : shadowColor_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color shadow_color = 9;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder> 
            getShadowColorFieldBuilder() {
          if (shadowColorBuilder_ == null) {
            shadowColorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder>(
                    getShadowColor(),
                    getParentForChildren(),
                    isClean());
            shadowColor_ = null;
          }
          return shadowColorBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.Color highlightColor_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder> highlightColorBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color highlight_color = 10;</code>
         */
        public boolean hasHighlightColor() {
          return highlightColorBuilder_ != null || highlightColor_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color highlight_color = 10;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.Color getHighlightColor() {
          if (highlightColorBuilder_ == null) {
            return highlightColor_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : highlightColor_;
          } else {
            return highlightColorBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color highlight_color = 10;</code>
         */
        public Builder setHighlightColor(com.tophap.mapbox_gl.proto.MapboxUtil.Color value) {
          if (highlightColorBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            highlightColor_ = value;
            onChanged();
          } else {
            highlightColorBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color highlight_color = 10;</code>
         */
        public Builder setHighlightColor(
            com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder builderForValue) {
          if (highlightColorBuilder_ == null) {
            highlightColor_ = builderForValue.build();
            onChanged();
          } else {
            highlightColorBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color highlight_color = 10;</code>
         */
        public Builder mergeHighlightColor(com.tophap.mapbox_gl.proto.MapboxUtil.Color value) {
          if (highlightColorBuilder_ == null) {
            if (highlightColor_ != null) {
              highlightColor_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.newBuilder(highlightColor_).mergeFrom(value).buildPartial();
            } else {
              highlightColor_ = value;
            }
            onChanged();
          } else {
            highlightColorBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color highlight_color = 10;</code>
         */
        public Builder clearHighlightColor() {
          if (highlightColorBuilder_ == null) {
            highlightColor_ = null;
            onChanged();
          } else {
            highlightColor_ = null;
            highlightColorBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color highlight_color = 10;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder getHighlightColorBuilder() {
          
          onChanged();
          return getHighlightColorFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color highlight_color = 10;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getHighlightColorOrBuilder() {
          if (highlightColorBuilder_ != null) {
            return highlightColorBuilder_.getMessageOrBuilder();
          } else {
            return highlightColor_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : highlightColor_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color highlight_color = 10;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder> 
            getHighlightColorFieldBuilder() {
          if (highlightColorBuilder_ == null) {
            highlightColorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder>(
                    getHighlightColor(),
                    getParentForChildren(),
                    isClean());
            highlightColor_ = null;
          }
          return highlightColorBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.Color accentColor_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder> accentColorBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color accent_color = 11;</code>
         */
        public boolean hasAccentColor() {
          return accentColorBuilder_ != null || accentColor_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color accent_color = 11;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.Color getAccentColor() {
          if (accentColorBuilder_ == null) {
            return accentColor_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : accentColor_;
          } else {
            return accentColorBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color accent_color = 11;</code>
         */
        public Builder setAccentColor(com.tophap.mapbox_gl.proto.MapboxUtil.Color value) {
          if (accentColorBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            accentColor_ = value;
            onChanged();
          } else {
            accentColorBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color accent_color = 11;</code>
         */
        public Builder setAccentColor(
            com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder builderForValue) {
          if (accentColorBuilder_ == null) {
            accentColor_ = builderForValue.build();
            onChanged();
          } else {
            accentColorBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color accent_color = 11;</code>
         */
        public Builder mergeAccentColor(com.tophap.mapbox_gl.proto.MapboxUtil.Color value) {
          if (accentColorBuilder_ == null) {
            if (accentColor_ != null) {
              accentColor_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.newBuilder(accentColor_).mergeFrom(value).buildPartial();
            } else {
              accentColor_ = value;
            }
            onChanged();
          } else {
            accentColorBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color accent_color = 11;</code>
         */
        public Builder clearAccentColor() {
          if (accentColorBuilder_ == null) {
            accentColor_ = null;
            onChanged();
          } else {
            accentColor_ = null;
            accentColorBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color accent_color = 11;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder getAccentColorBuilder() {
          
          onChanged();
          return getAccentColorFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color accent_color = 11;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getAccentColorOrBuilder() {
          if (accentColorBuilder_ != null) {
            return accentColorBuilder_.getMessageOrBuilder();
          } else {
            return accentColor_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : accentColor_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color accent_color = 11;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder> 
            getAccentColorFieldBuilder() {
          if (accentColorBuilder_ == null) {
            accentColorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder>(
                    getAccentColor(),
                    getParentForChildren(),
                    isClean());
            accentColor_ = null;
          }
          return accentColorBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions exaggerationTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> exaggerationTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions exaggeration_transition = 12;</code>
         */
        public boolean hasExaggerationTransition() {
          return exaggerationTransitionBuilder_ != null || exaggerationTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions exaggeration_transition = 12;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getExaggerationTransition() {
          if (exaggerationTransitionBuilder_ == null) {
            return exaggerationTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : exaggerationTransition_;
          } else {
            return exaggerationTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions exaggeration_transition = 12;</code>
         */
        public Builder setExaggerationTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (exaggerationTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            exaggerationTransition_ = value;
            onChanged();
          } else {
            exaggerationTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions exaggeration_transition = 12;</code>
         */
        public Builder setExaggerationTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (exaggerationTransitionBuilder_ == null) {
            exaggerationTransition_ = builderForValue.build();
            onChanged();
          } else {
            exaggerationTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions exaggeration_transition = 12;</code>
         */
        public Builder mergeExaggerationTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (exaggerationTransitionBuilder_ == null) {
            if (exaggerationTransition_ != null) {
              exaggerationTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(exaggerationTransition_).mergeFrom(value).buildPartial();
            } else {
              exaggerationTransition_ = value;
            }
            onChanged();
          } else {
            exaggerationTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions exaggeration_transition = 12;</code>
         */
        public Builder clearExaggerationTransition() {
          if (exaggerationTransitionBuilder_ == null) {
            exaggerationTransition_ = null;
            onChanged();
          } else {
            exaggerationTransition_ = null;
            exaggerationTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions exaggeration_transition = 12;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getExaggerationTransitionBuilder() {
          
          onChanged();
          return getExaggerationTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions exaggeration_transition = 12;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getExaggerationTransitionOrBuilder() {
          if (exaggerationTransitionBuilder_ != null) {
            return exaggerationTransitionBuilder_.getMessageOrBuilder();
          } else {
            return exaggerationTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : exaggerationTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions exaggeration_transition = 12;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getExaggerationTransitionFieldBuilder() {
          if (exaggerationTransitionBuilder_ == null) {
            exaggerationTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getExaggerationTransition(),
                    getParentForChildren(),
                    isClean());
            exaggerationTransition_ = null;
          }
          return exaggerationTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions shadowColorTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> shadowColorTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions shadow_color_transition = 13;</code>
         */
        public boolean hasShadowColorTransition() {
          return shadowColorTransitionBuilder_ != null || shadowColorTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions shadow_color_transition = 13;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getShadowColorTransition() {
          if (shadowColorTransitionBuilder_ == null) {
            return shadowColorTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : shadowColorTransition_;
          } else {
            return shadowColorTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions shadow_color_transition = 13;</code>
         */
        public Builder setShadowColorTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (shadowColorTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            shadowColorTransition_ = value;
            onChanged();
          } else {
            shadowColorTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions shadow_color_transition = 13;</code>
         */
        public Builder setShadowColorTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (shadowColorTransitionBuilder_ == null) {
            shadowColorTransition_ = builderForValue.build();
            onChanged();
          } else {
            shadowColorTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions shadow_color_transition = 13;</code>
         */
        public Builder mergeShadowColorTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (shadowColorTransitionBuilder_ == null) {
            if (shadowColorTransition_ != null) {
              shadowColorTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(shadowColorTransition_).mergeFrom(value).buildPartial();
            } else {
              shadowColorTransition_ = value;
            }
            onChanged();
          } else {
            shadowColorTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions shadow_color_transition = 13;</code>
         */
        public Builder clearShadowColorTransition() {
          if (shadowColorTransitionBuilder_ == null) {
            shadowColorTransition_ = null;
            onChanged();
          } else {
            shadowColorTransition_ = null;
            shadowColorTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions shadow_color_transition = 13;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getShadowColorTransitionBuilder() {
          
          onChanged();
          return getShadowColorTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions shadow_color_transition = 13;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getShadowColorTransitionOrBuilder() {
          if (shadowColorTransitionBuilder_ != null) {
            return shadowColorTransitionBuilder_.getMessageOrBuilder();
          } else {
            return shadowColorTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : shadowColorTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions shadow_color_transition = 13;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getShadowColorTransitionFieldBuilder() {
          if (shadowColorTransitionBuilder_ == null) {
            shadowColorTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getShadowColorTransition(),
                    getParentForChildren(),
                    isClean());
            shadowColorTransition_ = null;
          }
          return shadowColorTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions highlightColorTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> highlightColorTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions highlight_color_transition = 14;</code>
         */
        public boolean hasHighlightColorTransition() {
          return highlightColorTransitionBuilder_ != null || highlightColorTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions highlight_color_transition = 14;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getHighlightColorTransition() {
          if (highlightColorTransitionBuilder_ == null) {
            return highlightColorTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : highlightColorTransition_;
          } else {
            return highlightColorTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions highlight_color_transition = 14;</code>
         */
        public Builder setHighlightColorTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (highlightColorTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            highlightColorTransition_ = value;
            onChanged();
          } else {
            highlightColorTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions highlight_color_transition = 14;</code>
         */
        public Builder setHighlightColorTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (highlightColorTransitionBuilder_ == null) {
            highlightColorTransition_ = builderForValue.build();
            onChanged();
          } else {
            highlightColorTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions highlight_color_transition = 14;</code>
         */
        public Builder mergeHighlightColorTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (highlightColorTransitionBuilder_ == null) {
            if (highlightColorTransition_ != null) {
              highlightColorTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(highlightColorTransition_).mergeFrom(value).buildPartial();
            } else {
              highlightColorTransition_ = value;
            }
            onChanged();
          } else {
            highlightColorTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions highlight_color_transition = 14;</code>
         */
        public Builder clearHighlightColorTransition() {
          if (highlightColorTransitionBuilder_ == null) {
            highlightColorTransition_ = null;
            onChanged();
          } else {
            highlightColorTransition_ = null;
            highlightColorTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions highlight_color_transition = 14;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getHighlightColorTransitionBuilder() {
          
          onChanged();
          return getHighlightColorTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions highlight_color_transition = 14;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getHighlightColorTransitionOrBuilder() {
          if (highlightColorTransitionBuilder_ != null) {
            return highlightColorTransitionBuilder_.getMessageOrBuilder();
          } else {
            return highlightColorTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : highlightColorTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions highlight_color_transition = 14;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getHighlightColorTransitionFieldBuilder() {
          if (highlightColorTransitionBuilder_ == null) {
            highlightColorTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getHighlightColorTransition(),
                    getParentForChildren(),
                    isClean());
            highlightColorTransition_ = null;
          }
          return highlightColorTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions accentColorTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> accentColorTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions accent_color_transition = 15;</code>
         */
        public boolean hasAccentColorTransition() {
          return accentColorTransitionBuilder_ != null || accentColorTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions accent_color_transition = 15;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getAccentColorTransition() {
          if (accentColorTransitionBuilder_ == null) {
            return accentColorTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : accentColorTransition_;
          } else {
            return accentColorTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions accent_color_transition = 15;</code>
         */
        public Builder setAccentColorTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (accentColorTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            accentColorTransition_ = value;
            onChanged();
          } else {
            accentColorTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions accent_color_transition = 15;</code>
         */
        public Builder setAccentColorTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (accentColorTransitionBuilder_ == null) {
            accentColorTransition_ = builderForValue.build();
            onChanged();
          } else {
            accentColorTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions accent_color_transition = 15;</code>
         */
        public Builder mergeAccentColorTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (accentColorTransitionBuilder_ == null) {
            if (accentColorTransition_ != null) {
              accentColorTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(accentColorTransition_).mergeFrom(value).buildPartial();
            } else {
              accentColorTransition_ = value;
            }
            onChanged();
          } else {
            accentColorTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions accent_color_transition = 15;</code>
         */
        public Builder clearAccentColorTransition() {
          if (accentColorTransitionBuilder_ == null) {
            accentColorTransition_ = null;
            onChanged();
          } else {
            accentColorTransition_ = null;
            accentColorTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions accent_color_transition = 15;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getAccentColorTransitionBuilder() {
          
          onChanged();
          return getAccentColorTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions accent_color_transition = 15;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getAccentColorTransitionOrBuilder() {
          if (accentColorTransitionBuilder_ != null) {
            return accentColorTransitionBuilder_.getMessageOrBuilder();
          } else {
            return accentColorTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : accentColorTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions accent_color_transition = 15;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getAccentColorTransitionFieldBuilder() {
          if (accentColorTransitionBuilder_ == null) {
            accentColorTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getAccentColorTransition(),
                    getParentForChildren(),
                    isClean());
            accentColorTransition_ = null;
          }
          return accentColorTransitionBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:com.tophap.mapbox_gl.proto.Layer.Hillshade)
      }

      // @@protoc_insertion_point(class_scope:com.tophap.mapbox_gl.proto.Layer.Hillshade)
      private static final com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade();
      }

      public static com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Hillshade>
          PARSER = new com.google.protobuf.AbstractParser<Hillshade>() {
        @java.lang.Override
        public Hillshade parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Hillshade(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Hillshade> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Hillshade> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface LineOrBuilder extends
        // @@protoc_insertion_point(interface_extends:com.tophap.mapbox_gl.proto.Layer.Line)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>string id = 1;</code>
       */
      java.lang.String getId();
      /**
       * <code>string id = 1;</code>
       */
      com.google.protobuf.ByteString
          getIdBytes();

      /**
       * <code>string source_id = 2;</code>
       */
      java.lang.String getSourceId();
      /**
       * <code>string source_id = 2;</code>
       */
      com.google.protobuf.ByteString
          getSourceIdBytes();

      /**
       * <code>bool visible = 3;</code>
       */
      boolean getVisible();

      /**
       * <code>float min_zoom = 4;</code>
       */
      float getMinZoom();

      /**
       * <code>float max_zoom = 5;</code>
       */
      float getMaxZoom();

      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Line.Cap cap = 6;</code>
       */
      int getCapValue();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Line.Cap cap = 6;</code>
       */
      com.tophap.mapbox_gl.proto.Layers.Layer.Line.Cap getCap();

      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Line.Join join = 7;</code>
       */
      int getJoinValue();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Line.Join join = 7;</code>
       */
      com.tophap.mapbox_gl.proto.Layers.Layer.Line.Join getJoin();

      /**
       * <code>float miter_limit = 8;</code>
       */
      float getMiterLimit();

      /**
       * <code>float round_limit = 9;</code>
       */
      float getRoundLimit();

      /**
       * <code>.com.tophap.mapbox_gl.proto.Color color = 11;</code>
       */
      boolean hasColor();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color color = 11;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.Color getColor();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color color = 11;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getColorOrBuilder();

      /**
       * <code>repeated float translate = 12;</code>
       */
      java.util.List<java.lang.Float> getTranslateList();
      /**
       * <code>repeated float translate = 12;</code>
       */
      int getTranslateCount();
      /**
       * <code>repeated float translate = 12;</code>
       */
      float getTranslate(int index);

      /**
       * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor translate_anchor = 13;</code>
       */
      int getTranslateAnchorValue();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor translate_anchor = 13;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor getTranslateAnchor();

      /**
       * <code>float width = 14;</code>
       */
      float getWidth();

      /**
       * <code>float gap_width = 15;</code>
       */
      float getGapWidth();

      /**
       * <code>float offset = 16;</code>
       */
      float getOffset();

      /**
       * <code>float blur = 17;</code>
       */
      float getBlur();

      /**
       * <code>repeated float dasharray = 18;</code>
       */
      java.util.List<java.lang.Float> getDasharrayList();
      /**
       * <code>repeated float dasharray = 18;</code>
       */
      int getDasharrayCount();
      /**
       * <code>repeated float dasharray = 18;</code>
       */
      float getDasharray(int index);

      /**
       * <code>string pattern = 19;</code>
       */
      java.lang.String getPattern();
      /**
       * <code>string pattern = 19;</code>
       */
      com.google.protobuf.ByteString
          getPatternBytes();

      /**
       * <code>int32 gradient = 20;</code>
       */
      int getGradient();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 21;</code>
       */
      boolean hasOpacityTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 21;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getOpacityTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 21;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getOpacityTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 22;</code>
       */
      boolean hasColorTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 22;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getColorTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 22;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getColorTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 23;</code>
       */
      boolean hasTranslateTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 23;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getTranslateTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 23;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getTranslateTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions width_transition = 24;</code>
       */
      boolean hasWidthTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions width_transition = 24;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getWidthTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions width_transition = 24;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getWidthTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions gap_width_transition = 25;</code>
       */
      boolean hasGapWidthTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions gap_width_transition = 25;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getGapWidthTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions gap_width_transition = 25;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getGapWidthTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions offset_transition = 26;</code>
       */
      boolean hasOffsetTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions offset_transition = 26;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getOffsetTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions offset_transition = 26;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getOffsetTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions blur_transition = 27;</code>
       */
      boolean hasBlurTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions blur_transition = 27;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getBlurTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions blur_transition = 27;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getBlurTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions dasharray_transition = 28;</code>
       */
      boolean hasDasharrayTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions dasharray_transition = 28;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getDasharrayTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions dasharray_transition = 28;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getDasharrayTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 29;</code>
       */
      boolean hasPatternTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 29;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getPatternTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 29;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getPatternTransitionOrBuilder();
    }
    /**
     * Protobuf type {@code com.tophap.mapbox_gl.proto.Layer.Line}
     */
    public  static final class Line extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:com.tophap.mapbox_gl.proto.Layer.Line)
        LineOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Line.newBuilder() to construct.
      private Line(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Line() {
        id_ = "";
        sourceId_ = "";
        cap_ = 0;
        join_ = 0;
        translate_ = emptyFloatList();
        translateAnchor_ = 0;
        dasharray_ = emptyFloatList();
        pattern_ = "";
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Line(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();

                id_ = s;
                break;
              }
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();

                sourceId_ = s;
                break;
              }
              case 24: {

                visible_ = input.readBool();
                break;
              }
              case 37: {

                minZoom_ = input.readFloat();
                break;
              }
              case 45: {

                maxZoom_ = input.readFloat();
                break;
              }
              case 48: {
                int rawValue = input.readEnum();

                cap_ = rawValue;
                break;
              }
              case 56: {
                int rawValue = input.readEnum();

                join_ = rawValue;
                break;
              }
              case 69: {

                miterLimit_ = input.readFloat();
                break;
              }
              case 77: {

                roundLimit_ = input.readFloat();
                break;
              }
              case 90: {
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder subBuilder = null;
                if (color_ != null) {
                  subBuilder = color_.toBuilder();
                }
                color_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.Color.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(color_);
                  color_ = subBuilder.buildPartial();
                }

                break;
              }
              case 101: {
                if (!((mutable_bitField0_ & 0x00000400) != 0)) {
                  translate_ = newFloatList();
                  mutable_bitField0_ |= 0x00000400;
                }
                translate_.addFloat(input.readFloat());
                break;
              }
              case 98: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000400) != 0) && input.getBytesUntilLimit() > 0) {
                  translate_ = newFloatList();
                  mutable_bitField0_ |= 0x00000400;
                }
                while (input.getBytesUntilLimit() > 0) {
                  translate_.addFloat(input.readFloat());
                }
                input.popLimit(limit);
                break;
              }
              case 104: {
                int rawValue = input.readEnum();

                translateAnchor_ = rawValue;
                break;
              }
              case 117: {

                width_ = input.readFloat();
                break;
              }
              case 125: {

                gapWidth_ = input.readFloat();
                break;
              }
              case 133: {

                offset_ = input.readFloat();
                break;
              }
              case 141: {

                blur_ = input.readFloat();
                break;
              }
              case 149: {
                if (!((mutable_bitField0_ & 0x00010000) != 0)) {
                  dasharray_ = newFloatList();
                  mutable_bitField0_ |= 0x00010000;
                }
                dasharray_.addFloat(input.readFloat());
                break;
              }
              case 146: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00010000) != 0) && input.getBytesUntilLimit() > 0) {
                  dasharray_ = newFloatList();
                  mutable_bitField0_ |= 0x00010000;
                }
                while (input.getBytesUntilLimit() > 0) {
                  dasharray_.addFloat(input.readFloat());
                }
                input.popLimit(limit);
                break;
              }
              case 154: {
                java.lang.String s = input.readStringRequireUtf8();

                pattern_ = s;
                break;
              }
              case 160: {

                gradient_ = input.readInt32();
                break;
              }
              case 170: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (opacityTransition_ != null) {
                  subBuilder = opacityTransition_.toBuilder();
                }
                opacityTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(opacityTransition_);
                  opacityTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 178: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (colorTransition_ != null) {
                  subBuilder = colorTransition_.toBuilder();
                }
                colorTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(colorTransition_);
                  colorTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 186: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (translateTransition_ != null) {
                  subBuilder = translateTransition_.toBuilder();
                }
                translateTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(translateTransition_);
                  translateTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 194: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (widthTransition_ != null) {
                  subBuilder = widthTransition_.toBuilder();
                }
                widthTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(widthTransition_);
                  widthTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 202: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (gapWidthTransition_ != null) {
                  subBuilder = gapWidthTransition_.toBuilder();
                }
                gapWidthTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(gapWidthTransition_);
                  gapWidthTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 210: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (offsetTransition_ != null) {
                  subBuilder = offsetTransition_.toBuilder();
                }
                offsetTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(offsetTransition_);
                  offsetTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 218: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (blurTransition_ != null) {
                  subBuilder = blurTransition_.toBuilder();
                }
                blurTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(blurTransition_);
                  blurTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 226: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (dasharrayTransition_ != null) {
                  subBuilder = dasharrayTransition_.toBuilder();
                }
                dasharrayTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(dasharrayTransition_);
                  dasharrayTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 234: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (patternTransition_ != null) {
                  subBuilder = patternTransition_.toBuilder();
                }
                patternTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(patternTransition_);
                  patternTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000400) != 0)) {
            translate_.makeImmutable(); // C
          }
          if (((mutable_bitField0_ & 0x00010000) != 0)) {
            dasharray_.makeImmutable(); // C
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_Line_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_Line_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.tophap.mapbox_gl.proto.Layers.Layer.Line.class, com.tophap.mapbox_gl.proto.Layers.Layer.Line.Builder.class);
      }

      /**
       * Protobuf enum {@code com.tophap.mapbox_gl.proto.Layer.Line.Cap}
       */
      public enum Cap
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>CAP_BUTT = 0;</code>
         */
        CAP_BUTT(0),
        /**
         * <code>CAP_ROUND = 1;</code>
         */
        CAP_ROUND(1),
        /**
         * <code>CAP_SQUARE = 3;</code>
         */
        CAP_SQUARE(3),
        UNRECOGNIZED(-1),
        ;

        /**
         * <code>CAP_BUTT = 0;</code>
         */
        public static final int CAP_BUTT_VALUE = 0;
        /**
         * <code>CAP_ROUND = 1;</code>
         */
        public static final int CAP_ROUND_VALUE = 1;
        /**
         * <code>CAP_SQUARE = 3;</code>
         */
        public static final int CAP_SQUARE_VALUE = 3;


        public final int getNumber() {
          if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalArgumentException(
                "Can't get the number of an unknown enum value.");
          }
          return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static Cap valueOf(int value) {
          return forNumber(value);
        }

        public static Cap forNumber(int value) {
          switch (value) {
            case 0: return CAP_BUTT;
            case 1: return CAP_ROUND;
            case 3: return CAP_SQUARE;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<Cap>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            Cap> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<Cap>() {
                public Cap findValueByNumber(int number) {
                  return Cap.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return com.tophap.mapbox_gl.proto.Layers.Layer.Line.getDescriptor().getEnumTypes().get(0);
        }

        private static final Cap[] VALUES = values();

        public static Cap valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          if (desc.getIndex() == -1) {
            return UNRECOGNIZED;
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private Cap(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:com.tophap.mapbox_gl.proto.Layer.Line.Cap)
      }

      /**
       * Protobuf enum {@code com.tophap.mapbox_gl.proto.Layer.Line.Join}
       */
      public enum Join
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>JOIN_MITER = 0;</code>
         */
        JOIN_MITER(0),
        /**
         * <code>JOIN_BEVEL = 1;</code>
         */
        JOIN_BEVEL(1),
        /**
         * <code>JOIN_ROUND = 2;</code>
         */
        JOIN_ROUND(2),
        UNRECOGNIZED(-1),
        ;

        /**
         * <code>JOIN_MITER = 0;</code>
         */
        public static final int JOIN_MITER_VALUE = 0;
        /**
         * <code>JOIN_BEVEL = 1;</code>
         */
        public static final int JOIN_BEVEL_VALUE = 1;
        /**
         * <code>JOIN_ROUND = 2;</code>
         */
        public static final int JOIN_ROUND_VALUE = 2;


        public final int getNumber() {
          if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalArgumentException(
                "Can't get the number of an unknown enum value.");
          }
          return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static Join valueOf(int value) {
          return forNumber(value);
        }

        public static Join forNumber(int value) {
          switch (value) {
            case 0: return JOIN_MITER;
            case 1: return JOIN_BEVEL;
            case 2: return JOIN_ROUND;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<Join>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            Join> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<Join>() {
                public Join findValueByNumber(int number) {
                  return Join.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return com.tophap.mapbox_gl.proto.Layers.Layer.Line.getDescriptor().getEnumTypes().get(1);
        }

        private static final Join[] VALUES = values();

        public static Join valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          if (desc.getIndex() == -1) {
            return UNRECOGNIZED;
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private Join(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:com.tophap.mapbox_gl.proto.Layer.Line.Join)
      }

      private int bitField0_;
      public static final int ID_FIELD_NUMBER = 1;
      private volatile java.lang.Object id_;
      /**
       * <code>string id = 1;</code>
       */
      public java.lang.String getId() {
        java.lang.Object ref = id_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          id_ = s;
          return s;
        }
      }
      /**
       * <code>string id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = id_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          id_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int SOURCE_ID_FIELD_NUMBER = 2;
      private volatile java.lang.Object sourceId_;
      /**
       * <code>string source_id = 2;</code>
       */
      public java.lang.String getSourceId() {
        java.lang.Object ref = sourceId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          sourceId_ = s;
          return s;
        }
      }
      /**
       * <code>string source_id = 2;</code>
       */
      public com.google.protobuf.ByteString
          getSourceIdBytes() {
        java.lang.Object ref = sourceId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          sourceId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int VISIBLE_FIELD_NUMBER = 3;
      private boolean visible_;
      /**
       * <code>bool visible = 3;</code>
       */
      public boolean getVisible() {
        return visible_;
      }

      public static final int MIN_ZOOM_FIELD_NUMBER = 4;
      private float minZoom_;
      /**
       * <code>float min_zoom = 4;</code>
       */
      public float getMinZoom() {
        return minZoom_;
      }

      public static final int MAX_ZOOM_FIELD_NUMBER = 5;
      private float maxZoom_;
      /**
       * <code>float max_zoom = 5;</code>
       */
      public float getMaxZoom() {
        return maxZoom_;
      }

      public static final int CAP_FIELD_NUMBER = 6;
      private int cap_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Line.Cap cap = 6;</code>
       */
      public int getCapValue() {
        return cap_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Line.Cap cap = 6;</code>
       */
      public com.tophap.mapbox_gl.proto.Layers.Layer.Line.Cap getCap() {
        @SuppressWarnings("deprecation")
        com.tophap.mapbox_gl.proto.Layers.Layer.Line.Cap result = com.tophap.mapbox_gl.proto.Layers.Layer.Line.Cap.valueOf(cap_);
        return result == null ? com.tophap.mapbox_gl.proto.Layers.Layer.Line.Cap.UNRECOGNIZED : result;
      }

      public static final int JOIN_FIELD_NUMBER = 7;
      private int join_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Line.Join join = 7;</code>
       */
      public int getJoinValue() {
        return join_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Line.Join join = 7;</code>
       */
      public com.tophap.mapbox_gl.proto.Layers.Layer.Line.Join getJoin() {
        @SuppressWarnings("deprecation")
        com.tophap.mapbox_gl.proto.Layers.Layer.Line.Join result = com.tophap.mapbox_gl.proto.Layers.Layer.Line.Join.valueOf(join_);
        return result == null ? com.tophap.mapbox_gl.proto.Layers.Layer.Line.Join.UNRECOGNIZED : result;
      }

      public static final int MITER_LIMIT_FIELD_NUMBER = 8;
      private float miterLimit_;
      /**
       * <code>float miter_limit = 8;</code>
       */
      public float getMiterLimit() {
        return miterLimit_;
      }

      public static final int ROUND_LIMIT_FIELD_NUMBER = 9;
      private float roundLimit_;
      /**
       * <code>float round_limit = 9;</code>
       */
      public float getRoundLimit() {
        return roundLimit_;
      }

      public static final int COLOR_FIELD_NUMBER = 11;
      private com.tophap.mapbox_gl.proto.MapboxUtil.Color color_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color color = 11;</code>
       */
      public boolean hasColor() {
        return color_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color color = 11;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.Color getColor() {
        return color_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : color_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color color = 11;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getColorOrBuilder() {
        return getColor();
      }

      public static final int TRANSLATE_FIELD_NUMBER = 12;
      private com.google.protobuf.Internal.FloatList translate_;
      /**
       * <code>repeated float translate = 12;</code>
       */
      public java.util.List<java.lang.Float>
          getTranslateList() {
        return translate_;
      }
      /**
       * <code>repeated float translate = 12;</code>
       */
      public int getTranslateCount() {
        return translate_.size();
      }
      /**
       * <code>repeated float translate = 12;</code>
       */
      public float getTranslate(int index) {
        return translate_.getFloat(index);
      }
      private int translateMemoizedSerializedSize = -1;

      public static final int TRANSLATE_ANCHOR_FIELD_NUMBER = 13;
      private int translateAnchor_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor translate_anchor = 13;</code>
       */
      public int getTranslateAnchorValue() {
        return translateAnchor_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor translate_anchor = 13;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor getTranslateAnchor() {
        @SuppressWarnings("deprecation")
        com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor result = com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.valueOf(translateAnchor_);
        return result == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.UNRECOGNIZED : result;
      }

      public static final int WIDTH_FIELD_NUMBER = 14;
      private float width_;
      /**
       * <code>float width = 14;</code>
       */
      public float getWidth() {
        return width_;
      }

      public static final int GAP_WIDTH_FIELD_NUMBER = 15;
      private float gapWidth_;
      /**
       * <code>float gap_width = 15;</code>
       */
      public float getGapWidth() {
        return gapWidth_;
      }

      public static final int OFFSET_FIELD_NUMBER = 16;
      private float offset_;
      /**
       * <code>float offset = 16;</code>
       */
      public float getOffset() {
        return offset_;
      }

      public static final int BLUR_FIELD_NUMBER = 17;
      private float blur_;
      /**
       * <code>float blur = 17;</code>
       */
      public float getBlur() {
        return blur_;
      }

      public static final int DASHARRAY_FIELD_NUMBER = 18;
      private com.google.protobuf.Internal.FloatList dasharray_;
      /**
       * <code>repeated float dasharray = 18;</code>
       */
      public java.util.List<java.lang.Float>
          getDasharrayList() {
        return dasharray_;
      }
      /**
       * <code>repeated float dasharray = 18;</code>
       */
      public int getDasharrayCount() {
        return dasharray_.size();
      }
      /**
       * <code>repeated float dasharray = 18;</code>
       */
      public float getDasharray(int index) {
        return dasharray_.getFloat(index);
      }
      private int dasharrayMemoizedSerializedSize = -1;

      public static final int PATTERN_FIELD_NUMBER = 19;
      private volatile java.lang.Object pattern_;
      /**
       * <code>string pattern = 19;</code>
       */
      public java.lang.String getPattern() {
        java.lang.Object ref = pattern_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          pattern_ = s;
          return s;
        }
      }
      /**
       * <code>string pattern = 19;</code>
       */
      public com.google.protobuf.ByteString
          getPatternBytes() {
        java.lang.Object ref = pattern_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          pattern_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int GRADIENT_FIELD_NUMBER = 20;
      private int gradient_;
      /**
       * <code>int32 gradient = 20;</code>
       */
      public int getGradient() {
        return gradient_;
      }

      public static final int OPACITY_TRANSITION_FIELD_NUMBER = 21;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions opacityTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 21;</code>
       */
      public boolean hasOpacityTransition() {
        return opacityTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 21;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getOpacityTransition() {
        return opacityTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : opacityTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 21;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getOpacityTransitionOrBuilder() {
        return getOpacityTransition();
      }

      public static final int COLOR_TRANSITION_FIELD_NUMBER = 22;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions colorTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 22;</code>
       */
      public boolean hasColorTransition() {
        return colorTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 22;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getColorTransition() {
        return colorTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : colorTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 22;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getColorTransitionOrBuilder() {
        return getColorTransition();
      }

      public static final int TRANSLATE_TRANSITION_FIELD_NUMBER = 23;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions translateTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 23;</code>
       */
      public boolean hasTranslateTransition() {
        return translateTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 23;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getTranslateTransition() {
        return translateTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : translateTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 23;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getTranslateTransitionOrBuilder() {
        return getTranslateTransition();
      }

      public static final int WIDTH_TRANSITION_FIELD_NUMBER = 24;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions widthTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions width_transition = 24;</code>
       */
      public boolean hasWidthTransition() {
        return widthTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions width_transition = 24;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getWidthTransition() {
        return widthTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : widthTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions width_transition = 24;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getWidthTransitionOrBuilder() {
        return getWidthTransition();
      }

      public static final int GAP_WIDTH_TRANSITION_FIELD_NUMBER = 25;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions gapWidthTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions gap_width_transition = 25;</code>
       */
      public boolean hasGapWidthTransition() {
        return gapWidthTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions gap_width_transition = 25;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getGapWidthTransition() {
        return gapWidthTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : gapWidthTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions gap_width_transition = 25;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getGapWidthTransitionOrBuilder() {
        return getGapWidthTransition();
      }

      public static final int OFFSET_TRANSITION_FIELD_NUMBER = 26;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions offsetTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions offset_transition = 26;</code>
       */
      public boolean hasOffsetTransition() {
        return offsetTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions offset_transition = 26;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getOffsetTransition() {
        return offsetTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : offsetTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions offset_transition = 26;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getOffsetTransitionOrBuilder() {
        return getOffsetTransition();
      }

      public static final int BLUR_TRANSITION_FIELD_NUMBER = 27;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions blurTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions blur_transition = 27;</code>
       */
      public boolean hasBlurTransition() {
        return blurTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions blur_transition = 27;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getBlurTransition() {
        return blurTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : blurTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions blur_transition = 27;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getBlurTransitionOrBuilder() {
        return getBlurTransition();
      }

      public static final int DASHARRAY_TRANSITION_FIELD_NUMBER = 28;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions dasharrayTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions dasharray_transition = 28;</code>
       */
      public boolean hasDasharrayTransition() {
        return dasharrayTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions dasharray_transition = 28;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getDasharrayTransition() {
        return dasharrayTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : dasharrayTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions dasharray_transition = 28;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getDasharrayTransitionOrBuilder() {
        return getDasharrayTransition();
      }

      public static final int PATTERN_TRANSITION_FIELD_NUMBER = 29;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions patternTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 29;</code>
       */
      public boolean hasPatternTransition() {
        return patternTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 29;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getPatternTransition() {
        return patternTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : patternTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 29;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getPatternTransitionOrBuilder() {
        return getPatternTransition();
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (!getIdBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, id_);
        }
        if (!getSourceIdBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, sourceId_);
        }
        if (visible_ != false) {
          output.writeBool(3, visible_);
        }
        if (minZoom_ != 0F) {
          output.writeFloat(4, minZoom_);
        }
        if (maxZoom_ != 0F) {
          output.writeFloat(5, maxZoom_);
        }
        if (cap_ != com.tophap.mapbox_gl.proto.Layers.Layer.Line.Cap.CAP_BUTT.getNumber()) {
          output.writeEnum(6, cap_);
        }
        if (join_ != com.tophap.mapbox_gl.proto.Layers.Layer.Line.Join.JOIN_MITER.getNumber()) {
          output.writeEnum(7, join_);
        }
        if (miterLimit_ != 0F) {
          output.writeFloat(8, miterLimit_);
        }
        if (roundLimit_ != 0F) {
          output.writeFloat(9, roundLimit_);
        }
        if (color_ != null) {
          output.writeMessage(11, getColor());
        }
        if (getTranslateList().size() > 0) {
          output.writeUInt32NoTag(98);
          output.writeUInt32NoTag(translateMemoizedSerializedSize);
        }
        for (int i = 0; i < translate_.size(); i++) {
          output.writeFloatNoTag(translate_.getFloat(i));
        }
        if (translateAnchor_ != com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.MAP.getNumber()) {
          output.writeEnum(13, translateAnchor_);
        }
        if (width_ != 0F) {
          output.writeFloat(14, width_);
        }
        if (gapWidth_ != 0F) {
          output.writeFloat(15, gapWidth_);
        }
        if (offset_ != 0F) {
          output.writeFloat(16, offset_);
        }
        if (blur_ != 0F) {
          output.writeFloat(17, blur_);
        }
        if (getDasharrayList().size() > 0) {
          output.writeUInt32NoTag(146);
          output.writeUInt32NoTag(dasharrayMemoizedSerializedSize);
        }
        for (int i = 0; i < dasharray_.size(); i++) {
          output.writeFloatNoTag(dasharray_.getFloat(i));
        }
        if (!getPatternBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 19, pattern_);
        }
        if (gradient_ != 0) {
          output.writeInt32(20, gradient_);
        }
        if (opacityTransition_ != null) {
          output.writeMessage(21, getOpacityTransition());
        }
        if (colorTransition_ != null) {
          output.writeMessage(22, getColorTransition());
        }
        if (translateTransition_ != null) {
          output.writeMessage(23, getTranslateTransition());
        }
        if (widthTransition_ != null) {
          output.writeMessage(24, getWidthTransition());
        }
        if (gapWidthTransition_ != null) {
          output.writeMessage(25, getGapWidthTransition());
        }
        if (offsetTransition_ != null) {
          output.writeMessage(26, getOffsetTransition());
        }
        if (blurTransition_ != null) {
          output.writeMessage(27, getBlurTransition());
        }
        if (dasharrayTransition_ != null) {
          output.writeMessage(28, getDasharrayTransition());
        }
        if (patternTransition_ != null) {
          output.writeMessage(29, getPatternTransition());
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!getIdBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, id_);
        }
        if (!getSourceIdBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, sourceId_);
        }
        if (visible_ != false) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(3, visible_);
        }
        if (minZoom_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(4, minZoom_);
        }
        if (maxZoom_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(5, maxZoom_);
        }
        if (cap_ != com.tophap.mapbox_gl.proto.Layers.Layer.Line.Cap.CAP_BUTT.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(6, cap_);
        }
        if (join_ != com.tophap.mapbox_gl.proto.Layers.Layer.Line.Join.JOIN_MITER.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(7, join_);
        }
        if (miterLimit_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(8, miterLimit_);
        }
        if (roundLimit_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(9, roundLimit_);
        }
        if (color_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(11, getColor());
        }
        {
          int dataSize = 0;
          dataSize = 4 * getTranslateList().size();
          size += dataSize;
          if (!getTranslateList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          translateMemoizedSerializedSize = dataSize;
        }
        if (translateAnchor_ != com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.MAP.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(13, translateAnchor_);
        }
        if (width_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(14, width_);
        }
        if (gapWidth_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(15, gapWidth_);
        }
        if (offset_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(16, offset_);
        }
        if (blur_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(17, blur_);
        }
        {
          int dataSize = 0;
          dataSize = 4 * getDasharrayList().size();
          size += dataSize;
          if (!getDasharrayList().isEmpty()) {
            size += 2;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          dasharrayMemoizedSerializedSize = dataSize;
        }
        if (!getPatternBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(19, pattern_);
        }
        if (gradient_ != 0) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(20, gradient_);
        }
        if (opacityTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(21, getOpacityTransition());
        }
        if (colorTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(22, getColorTransition());
        }
        if (translateTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(23, getTranslateTransition());
        }
        if (widthTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(24, getWidthTransition());
        }
        if (gapWidthTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(25, getGapWidthTransition());
        }
        if (offsetTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(26, getOffsetTransition());
        }
        if (blurTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(27, getBlurTransition());
        }
        if (dasharrayTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(28, getDasharrayTransition());
        }
        if (patternTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(29, getPatternTransition());
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.tophap.mapbox_gl.proto.Layers.Layer.Line)) {
          return super.equals(obj);
        }
        com.tophap.mapbox_gl.proto.Layers.Layer.Line other = (com.tophap.mapbox_gl.proto.Layers.Layer.Line) obj;

        if (!getId()
            .equals(other.getId())) return false;
        if (!getSourceId()
            .equals(other.getSourceId())) return false;
        if (getVisible()
            != other.getVisible()) return false;
        if (java.lang.Float.floatToIntBits(getMinZoom())
            != java.lang.Float.floatToIntBits(
                other.getMinZoom())) return false;
        if (java.lang.Float.floatToIntBits(getMaxZoom())
            != java.lang.Float.floatToIntBits(
                other.getMaxZoom())) return false;
        if (cap_ != other.cap_) return false;
        if (join_ != other.join_) return false;
        if (java.lang.Float.floatToIntBits(getMiterLimit())
            != java.lang.Float.floatToIntBits(
                other.getMiterLimit())) return false;
        if (java.lang.Float.floatToIntBits(getRoundLimit())
            != java.lang.Float.floatToIntBits(
                other.getRoundLimit())) return false;
        if (hasColor() != other.hasColor()) return false;
        if (hasColor()) {
          if (!getColor()
              .equals(other.getColor())) return false;
        }
        if (!getTranslateList()
            .equals(other.getTranslateList())) return false;
        if (translateAnchor_ != other.translateAnchor_) return false;
        if (java.lang.Float.floatToIntBits(getWidth())
            != java.lang.Float.floatToIntBits(
                other.getWidth())) return false;
        if (java.lang.Float.floatToIntBits(getGapWidth())
            != java.lang.Float.floatToIntBits(
                other.getGapWidth())) return false;
        if (java.lang.Float.floatToIntBits(getOffset())
            != java.lang.Float.floatToIntBits(
                other.getOffset())) return false;
        if (java.lang.Float.floatToIntBits(getBlur())
            != java.lang.Float.floatToIntBits(
                other.getBlur())) return false;
        if (!getDasharrayList()
            .equals(other.getDasharrayList())) return false;
        if (!getPattern()
            .equals(other.getPattern())) return false;
        if (getGradient()
            != other.getGradient()) return false;
        if (hasOpacityTransition() != other.hasOpacityTransition()) return false;
        if (hasOpacityTransition()) {
          if (!getOpacityTransition()
              .equals(other.getOpacityTransition())) return false;
        }
        if (hasColorTransition() != other.hasColorTransition()) return false;
        if (hasColorTransition()) {
          if (!getColorTransition()
              .equals(other.getColorTransition())) return false;
        }
        if (hasTranslateTransition() != other.hasTranslateTransition()) return false;
        if (hasTranslateTransition()) {
          if (!getTranslateTransition()
              .equals(other.getTranslateTransition())) return false;
        }
        if (hasWidthTransition() != other.hasWidthTransition()) return false;
        if (hasWidthTransition()) {
          if (!getWidthTransition()
              .equals(other.getWidthTransition())) return false;
        }
        if (hasGapWidthTransition() != other.hasGapWidthTransition()) return false;
        if (hasGapWidthTransition()) {
          if (!getGapWidthTransition()
              .equals(other.getGapWidthTransition())) return false;
        }
        if (hasOffsetTransition() != other.hasOffsetTransition()) return false;
        if (hasOffsetTransition()) {
          if (!getOffsetTransition()
              .equals(other.getOffsetTransition())) return false;
        }
        if (hasBlurTransition() != other.hasBlurTransition()) return false;
        if (hasBlurTransition()) {
          if (!getBlurTransition()
              .equals(other.getBlurTransition())) return false;
        }
        if (hasDasharrayTransition() != other.hasDasharrayTransition()) return false;
        if (hasDasharrayTransition()) {
          if (!getDasharrayTransition()
              .equals(other.getDasharrayTransition())) return false;
        }
        if (hasPatternTransition() != other.hasPatternTransition()) return false;
        if (hasPatternTransition()) {
          if (!getPatternTransition()
              .equals(other.getPatternTransition())) return false;
        }
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + ID_FIELD_NUMBER;
        hash = (53 * hash) + getId().hashCode();
        hash = (37 * hash) + SOURCE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getSourceId().hashCode();
        hash = (37 * hash) + VISIBLE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getVisible());
        hash = (37 * hash) + MIN_ZOOM_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMinZoom());
        hash = (37 * hash) + MAX_ZOOM_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMaxZoom());
        hash = (37 * hash) + CAP_FIELD_NUMBER;
        hash = (53 * hash) + cap_;
        hash = (37 * hash) + JOIN_FIELD_NUMBER;
        hash = (53 * hash) + join_;
        hash = (37 * hash) + MITER_LIMIT_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMiterLimit());
        hash = (37 * hash) + ROUND_LIMIT_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getRoundLimit());
        if (hasColor()) {
          hash = (37 * hash) + COLOR_FIELD_NUMBER;
          hash = (53 * hash) + getColor().hashCode();
        }
        if (getTranslateCount() > 0) {
          hash = (37 * hash) + TRANSLATE_FIELD_NUMBER;
          hash = (53 * hash) + getTranslateList().hashCode();
        }
        hash = (37 * hash) + TRANSLATE_ANCHOR_FIELD_NUMBER;
        hash = (53 * hash) + translateAnchor_;
        hash = (37 * hash) + WIDTH_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getWidth());
        hash = (37 * hash) + GAP_WIDTH_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getGapWidth());
        hash = (37 * hash) + OFFSET_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getOffset());
        hash = (37 * hash) + BLUR_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getBlur());
        if (getDasharrayCount() > 0) {
          hash = (37 * hash) + DASHARRAY_FIELD_NUMBER;
          hash = (53 * hash) + getDasharrayList().hashCode();
        }
        hash = (37 * hash) + PATTERN_FIELD_NUMBER;
        hash = (53 * hash) + getPattern().hashCode();
        hash = (37 * hash) + GRADIENT_FIELD_NUMBER;
        hash = (53 * hash) + getGradient();
        if (hasOpacityTransition()) {
          hash = (37 * hash) + OPACITY_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getOpacityTransition().hashCode();
        }
        if (hasColorTransition()) {
          hash = (37 * hash) + COLOR_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getColorTransition().hashCode();
        }
        if (hasTranslateTransition()) {
          hash = (37 * hash) + TRANSLATE_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getTranslateTransition().hashCode();
        }
        if (hasWidthTransition()) {
          hash = (37 * hash) + WIDTH_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getWidthTransition().hashCode();
        }
        if (hasGapWidthTransition()) {
          hash = (37 * hash) + GAP_WIDTH_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getGapWidthTransition().hashCode();
        }
        if (hasOffsetTransition()) {
          hash = (37 * hash) + OFFSET_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getOffsetTransition().hashCode();
        }
        if (hasBlurTransition()) {
          hash = (37 * hash) + BLUR_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getBlurTransition().hashCode();
        }
        if (hasDasharrayTransition()) {
          hash = (37 * hash) + DASHARRAY_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getDasharrayTransition().hashCode();
        }
        if (hasPatternTransition()) {
          hash = (37 * hash) + PATTERN_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getPatternTransition().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.tophap.mapbox_gl.proto.Layers.Layer.Line parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Line parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Line parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Line parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Line parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Line parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Line parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Line parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Line parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Line parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Line parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Line parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.tophap.mapbox_gl.proto.Layers.Layer.Line prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.tophap.mapbox_gl.proto.Layer.Line}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:com.tophap.mapbox_gl.proto.Layer.Line)
          com.tophap.mapbox_gl.proto.Layers.Layer.LineOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_Line_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_Line_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.tophap.mapbox_gl.proto.Layers.Layer.Line.class, com.tophap.mapbox_gl.proto.Layers.Layer.Line.Builder.class);
        }

        // Construct using com.tophap.mapbox_gl.proto.Layers.Layer.Line.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          id_ = "";

          sourceId_ = "";

          visible_ = false;

          minZoom_ = 0F;

          maxZoom_ = 0F;

          cap_ = 0;

          join_ = 0;

          miterLimit_ = 0F;

          roundLimit_ = 0F;

          if (colorBuilder_ == null) {
            color_ = null;
          } else {
            color_ = null;
            colorBuilder_ = null;
          }
          translate_ = emptyFloatList();
          bitField0_ = (bitField0_ & ~0x00000400);
          translateAnchor_ = 0;

          width_ = 0F;

          gapWidth_ = 0F;

          offset_ = 0F;

          blur_ = 0F;

          dasharray_ = emptyFloatList();
          bitField0_ = (bitField0_ & ~0x00010000);
          pattern_ = "";

          gradient_ = 0;

          if (opacityTransitionBuilder_ == null) {
            opacityTransition_ = null;
          } else {
            opacityTransition_ = null;
            opacityTransitionBuilder_ = null;
          }
          if (colorTransitionBuilder_ == null) {
            colorTransition_ = null;
          } else {
            colorTransition_ = null;
            colorTransitionBuilder_ = null;
          }
          if (translateTransitionBuilder_ == null) {
            translateTransition_ = null;
          } else {
            translateTransition_ = null;
            translateTransitionBuilder_ = null;
          }
          if (widthTransitionBuilder_ == null) {
            widthTransition_ = null;
          } else {
            widthTransition_ = null;
            widthTransitionBuilder_ = null;
          }
          if (gapWidthTransitionBuilder_ == null) {
            gapWidthTransition_ = null;
          } else {
            gapWidthTransition_ = null;
            gapWidthTransitionBuilder_ = null;
          }
          if (offsetTransitionBuilder_ == null) {
            offsetTransition_ = null;
          } else {
            offsetTransition_ = null;
            offsetTransitionBuilder_ = null;
          }
          if (blurTransitionBuilder_ == null) {
            blurTransition_ = null;
          } else {
            blurTransition_ = null;
            blurTransitionBuilder_ = null;
          }
          if (dasharrayTransitionBuilder_ == null) {
            dasharrayTransition_ = null;
          } else {
            dasharrayTransition_ = null;
            dasharrayTransitionBuilder_ = null;
          }
          if (patternTransitionBuilder_ == null) {
            patternTransition_ = null;
          } else {
            patternTransition_ = null;
            patternTransitionBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_Line_descriptor;
        }

        @java.lang.Override
        public com.tophap.mapbox_gl.proto.Layers.Layer.Line getDefaultInstanceForType() {
          return com.tophap.mapbox_gl.proto.Layers.Layer.Line.getDefaultInstance();
        }

        @java.lang.Override
        public com.tophap.mapbox_gl.proto.Layers.Layer.Line build() {
          com.tophap.mapbox_gl.proto.Layers.Layer.Line result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.tophap.mapbox_gl.proto.Layers.Layer.Line buildPartial() {
          com.tophap.mapbox_gl.proto.Layers.Layer.Line result = new com.tophap.mapbox_gl.proto.Layers.Layer.Line(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          result.id_ = id_;
          result.sourceId_ = sourceId_;
          result.visible_ = visible_;
          result.minZoom_ = minZoom_;
          result.maxZoom_ = maxZoom_;
          result.cap_ = cap_;
          result.join_ = join_;
          result.miterLimit_ = miterLimit_;
          result.roundLimit_ = roundLimit_;
          if (colorBuilder_ == null) {
            result.color_ = color_;
          } else {
            result.color_ = colorBuilder_.build();
          }
          if (((bitField0_ & 0x00000400) != 0)) {
            translate_.makeImmutable();
            bitField0_ = (bitField0_ & ~0x00000400);
          }
          result.translate_ = translate_;
          result.translateAnchor_ = translateAnchor_;
          result.width_ = width_;
          result.gapWidth_ = gapWidth_;
          result.offset_ = offset_;
          result.blur_ = blur_;
          if (((bitField0_ & 0x00010000) != 0)) {
            dasharray_.makeImmutable();
            bitField0_ = (bitField0_ & ~0x00010000);
          }
          result.dasharray_ = dasharray_;
          result.pattern_ = pattern_;
          result.gradient_ = gradient_;
          if (opacityTransitionBuilder_ == null) {
            result.opacityTransition_ = opacityTransition_;
          } else {
            result.opacityTransition_ = opacityTransitionBuilder_.build();
          }
          if (colorTransitionBuilder_ == null) {
            result.colorTransition_ = colorTransition_;
          } else {
            result.colorTransition_ = colorTransitionBuilder_.build();
          }
          if (translateTransitionBuilder_ == null) {
            result.translateTransition_ = translateTransition_;
          } else {
            result.translateTransition_ = translateTransitionBuilder_.build();
          }
          if (widthTransitionBuilder_ == null) {
            result.widthTransition_ = widthTransition_;
          } else {
            result.widthTransition_ = widthTransitionBuilder_.build();
          }
          if (gapWidthTransitionBuilder_ == null) {
            result.gapWidthTransition_ = gapWidthTransition_;
          } else {
            result.gapWidthTransition_ = gapWidthTransitionBuilder_.build();
          }
          if (offsetTransitionBuilder_ == null) {
            result.offsetTransition_ = offsetTransition_;
          } else {
            result.offsetTransition_ = offsetTransitionBuilder_.build();
          }
          if (blurTransitionBuilder_ == null) {
            result.blurTransition_ = blurTransition_;
          } else {
            result.blurTransition_ = blurTransitionBuilder_.build();
          }
          if (dasharrayTransitionBuilder_ == null) {
            result.dasharrayTransition_ = dasharrayTransition_;
          } else {
            result.dasharrayTransition_ = dasharrayTransitionBuilder_.build();
          }
          if (patternTransitionBuilder_ == null) {
            result.patternTransition_ = patternTransition_;
          } else {
            result.patternTransition_ = patternTransitionBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.tophap.mapbox_gl.proto.Layers.Layer.Line) {
            return mergeFrom((com.tophap.mapbox_gl.proto.Layers.Layer.Line)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.tophap.mapbox_gl.proto.Layers.Layer.Line other) {
          if (other == com.tophap.mapbox_gl.proto.Layers.Layer.Line.getDefaultInstance()) return this;
          if (!other.getId().isEmpty()) {
            id_ = other.id_;
            onChanged();
          }
          if (!other.getSourceId().isEmpty()) {
            sourceId_ = other.sourceId_;
            onChanged();
          }
          if (other.getVisible() != false) {
            setVisible(other.getVisible());
          }
          if (other.getMinZoom() != 0F) {
            setMinZoom(other.getMinZoom());
          }
          if (other.getMaxZoom() != 0F) {
            setMaxZoom(other.getMaxZoom());
          }
          if (other.cap_ != 0) {
            setCapValue(other.getCapValue());
          }
          if (other.join_ != 0) {
            setJoinValue(other.getJoinValue());
          }
          if (other.getMiterLimit() != 0F) {
            setMiterLimit(other.getMiterLimit());
          }
          if (other.getRoundLimit() != 0F) {
            setRoundLimit(other.getRoundLimit());
          }
          if (other.hasColor()) {
            mergeColor(other.getColor());
          }
          if (!other.translate_.isEmpty()) {
            if (translate_.isEmpty()) {
              translate_ = other.translate_;
              bitField0_ = (bitField0_ & ~0x00000400);
            } else {
              ensureTranslateIsMutable();
              translate_.addAll(other.translate_);
            }
            onChanged();
          }
          if (other.translateAnchor_ != 0) {
            setTranslateAnchorValue(other.getTranslateAnchorValue());
          }
          if (other.getWidth() != 0F) {
            setWidth(other.getWidth());
          }
          if (other.getGapWidth() != 0F) {
            setGapWidth(other.getGapWidth());
          }
          if (other.getOffset() != 0F) {
            setOffset(other.getOffset());
          }
          if (other.getBlur() != 0F) {
            setBlur(other.getBlur());
          }
          if (!other.dasharray_.isEmpty()) {
            if (dasharray_.isEmpty()) {
              dasharray_ = other.dasharray_;
              bitField0_ = (bitField0_ & ~0x00010000);
            } else {
              ensureDasharrayIsMutable();
              dasharray_.addAll(other.dasharray_);
            }
            onChanged();
          }
          if (!other.getPattern().isEmpty()) {
            pattern_ = other.pattern_;
            onChanged();
          }
          if (other.getGradient() != 0) {
            setGradient(other.getGradient());
          }
          if (other.hasOpacityTransition()) {
            mergeOpacityTransition(other.getOpacityTransition());
          }
          if (other.hasColorTransition()) {
            mergeColorTransition(other.getColorTransition());
          }
          if (other.hasTranslateTransition()) {
            mergeTranslateTransition(other.getTranslateTransition());
          }
          if (other.hasWidthTransition()) {
            mergeWidthTransition(other.getWidthTransition());
          }
          if (other.hasGapWidthTransition()) {
            mergeGapWidthTransition(other.getGapWidthTransition());
          }
          if (other.hasOffsetTransition()) {
            mergeOffsetTransition(other.getOffsetTransition());
          }
          if (other.hasBlurTransition()) {
            mergeBlurTransition(other.getBlurTransition());
          }
          if (other.hasDasharrayTransition()) {
            mergeDasharrayTransition(other.getDasharrayTransition());
          }
          if (other.hasPatternTransition()) {
            mergePatternTransition(other.getPatternTransition());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.tophap.mapbox_gl.proto.Layers.Layer.Line parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.tophap.mapbox_gl.proto.Layers.Layer.Line) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private java.lang.Object id_ = "";
        /**
         * <code>string id = 1;</code>
         */
        public java.lang.String getId() {
          java.lang.Object ref = id_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            id_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string id = 1;</code>
         */
        public com.google.protobuf.ByteString
            getIdBytes() {
          java.lang.Object ref = id_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            id_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string id = 1;</code>
         */
        public Builder setId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          id_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string id = 1;</code>
         */
        public Builder clearId() {
          
          id_ = getDefaultInstance().getId();
          onChanged();
          return this;
        }
        /**
         * <code>string id = 1;</code>
         */
        public Builder setIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          id_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object sourceId_ = "";
        /**
         * <code>string source_id = 2;</code>
         */
        public java.lang.String getSourceId() {
          java.lang.Object ref = sourceId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            sourceId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string source_id = 2;</code>
         */
        public com.google.protobuf.ByteString
            getSourceIdBytes() {
          java.lang.Object ref = sourceId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            sourceId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string source_id = 2;</code>
         */
        public Builder setSourceId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          sourceId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string source_id = 2;</code>
         */
        public Builder clearSourceId() {
          
          sourceId_ = getDefaultInstance().getSourceId();
          onChanged();
          return this;
        }
        /**
         * <code>string source_id = 2;</code>
         */
        public Builder setSourceIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          sourceId_ = value;
          onChanged();
          return this;
        }

        private boolean visible_ ;
        /**
         * <code>bool visible = 3;</code>
         */
        public boolean getVisible() {
          return visible_;
        }
        /**
         * <code>bool visible = 3;</code>
         */
        public Builder setVisible(boolean value) {
          
          visible_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>bool visible = 3;</code>
         */
        public Builder clearVisible() {
          
          visible_ = false;
          onChanged();
          return this;
        }

        private float minZoom_ ;
        /**
         * <code>float min_zoom = 4;</code>
         */
        public float getMinZoom() {
          return minZoom_;
        }
        /**
         * <code>float min_zoom = 4;</code>
         */
        public Builder setMinZoom(float value) {
          
          minZoom_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float min_zoom = 4;</code>
         */
        public Builder clearMinZoom() {
          
          minZoom_ = 0F;
          onChanged();
          return this;
        }

        private float maxZoom_ ;
        /**
         * <code>float max_zoom = 5;</code>
         */
        public float getMaxZoom() {
          return maxZoom_;
        }
        /**
         * <code>float max_zoom = 5;</code>
         */
        public Builder setMaxZoom(float value) {
          
          maxZoom_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float max_zoom = 5;</code>
         */
        public Builder clearMaxZoom() {
          
          maxZoom_ = 0F;
          onChanged();
          return this;
        }

        private int cap_ = 0;
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Line.Cap cap = 6;</code>
         */
        public int getCapValue() {
          return cap_;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Line.Cap cap = 6;</code>
         */
        public Builder setCapValue(int value) {
          cap_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Line.Cap cap = 6;</code>
         */
        public com.tophap.mapbox_gl.proto.Layers.Layer.Line.Cap getCap() {
          @SuppressWarnings("deprecation")
          com.tophap.mapbox_gl.proto.Layers.Layer.Line.Cap result = com.tophap.mapbox_gl.proto.Layers.Layer.Line.Cap.valueOf(cap_);
          return result == null ? com.tophap.mapbox_gl.proto.Layers.Layer.Line.Cap.UNRECOGNIZED : result;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Line.Cap cap = 6;</code>
         */
        public Builder setCap(com.tophap.mapbox_gl.proto.Layers.Layer.Line.Cap value) {
          if (value == null) {
            throw new NullPointerException();
          }
          
          cap_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Line.Cap cap = 6;</code>
         */
        public Builder clearCap() {
          
          cap_ = 0;
          onChanged();
          return this;
        }

        private int join_ = 0;
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Line.Join join = 7;</code>
         */
        public int getJoinValue() {
          return join_;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Line.Join join = 7;</code>
         */
        public Builder setJoinValue(int value) {
          join_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Line.Join join = 7;</code>
         */
        public com.tophap.mapbox_gl.proto.Layers.Layer.Line.Join getJoin() {
          @SuppressWarnings("deprecation")
          com.tophap.mapbox_gl.proto.Layers.Layer.Line.Join result = com.tophap.mapbox_gl.proto.Layers.Layer.Line.Join.valueOf(join_);
          return result == null ? com.tophap.mapbox_gl.proto.Layers.Layer.Line.Join.UNRECOGNIZED : result;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Line.Join join = 7;</code>
         */
        public Builder setJoin(com.tophap.mapbox_gl.proto.Layers.Layer.Line.Join value) {
          if (value == null) {
            throw new NullPointerException();
          }
          
          join_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Line.Join join = 7;</code>
         */
        public Builder clearJoin() {
          
          join_ = 0;
          onChanged();
          return this;
        }

        private float miterLimit_ ;
        /**
         * <code>float miter_limit = 8;</code>
         */
        public float getMiterLimit() {
          return miterLimit_;
        }
        /**
         * <code>float miter_limit = 8;</code>
         */
        public Builder setMiterLimit(float value) {
          
          miterLimit_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float miter_limit = 8;</code>
         */
        public Builder clearMiterLimit() {
          
          miterLimit_ = 0F;
          onChanged();
          return this;
        }

        private float roundLimit_ ;
        /**
         * <code>float round_limit = 9;</code>
         */
        public float getRoundLimit() {
          return roundLimit_;
        }
        /**
         * <code>float round_limit = 9;</code>
         */
        public Builder setRoundLimit(float value) {
          
          roundLimit_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float round_limit = 9;</code>
         */
        public Builder clearRoundLimit() {
          
          roundLimit_ = 0F;
          onChanged();
          return this;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.Color color_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder> colorBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 11;</code>
         */
        public boolean hasColor() {
          return colorBuilder_ != null || color_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 11;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.Color getColor() {
          if (colorBuilder_ == null) {
            return color_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : color_;
          } else {
            return colorBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 11;</code>
         */
        public Builder setColor(com.tophap.mapbox_gl.proto.MapboxUtil.Color value) {
          if (colorBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            color_ = value;
            onChanged();
          } else {
            colorBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 11;</code>
         */
        public Builder setColor(
            com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder builderForValue) {
          if (colorBuilder_ == null) {
            color_ = builderForValue.build();
            onChanged();
          } else {
            colorBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 11;</code>
         */
        public Builder mergeColor(com.tophap.mapbox_gl.proto.MapboxUtil.Color value) {
          if (colorBuilder_ == null) {
            if (color_ != null) {
              color_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.newBuilder(color_).mergeFrom(value).buildPartial();
            } else {
              color_ = value;
            }
            onChanged();
          } else {
            colorBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 11;</code>
         */
        public Builder clearColor() {
          if (colorBuilder_ == null) {
            color_ = null;
            onChanged();
          } else {
            color_ = null;
            colorBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 11;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder getColorBuilder() {
          
          onChanged();
          return getColorFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 11;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getColorOrBuilder() {
          if (colorBuilder_ != null) {
            return colorBuilder_.getMessageOrBuilder();
          } else {
            return color_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : color_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color color = 11;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder> 
            getColorFieldBuilder() {
          if (colorBuilder_ == null) {
            colorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder>(
                    getColor(),
                    getParentForChildren(),
                    isClean());
            color_ = null;
          }
          return colorBuilder_;
        }

        private com.google.protobuf.Internal.FloatList translate_ = emptyFloatList();
        private void ensureTranslateIsMutable() {
          if (!((bitField0_ & 0x00000400) != 0)) {
            translate_ = mutableCopy(translate_);
            bitField0_ |= 0x00000400;
           }
        }
        /**
         * <code>repeated float translate = 12;</code>
         */
        public java.util.List<java.lang.Float>
            getTranslateList() {
          return ((bitField0_ & 0x00000400) != 0) ?
                   java.util.Collections.unmodifiableList(translate_) : translate_;
        }
        /**
         * <code>repeated float translate = 12;</code>
         */
        public int getTranslateCount() {
          return translate_.size();
        }
        /**
         * <code>repeated float translate = 12;</code>
         */
        public float getTranslate(int index) {
          return translate_.getFloat(index);
        }
        /**
         * <code>repeated float translate = 12;</code>
         */
        public Builder setTranslate(
            int index, float value) {
          ensureTranslateIsMutable();
          translate_.setFloat(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float translate = 12;</code>
         */
        public Builder addTranslate(float value) {
          ensureTranslateIsMutable();
          translate_.addFloat(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float translate = 12;</code>
         */
        public Builder addAllTranslate(
            java.lang.Iterable<? extends java.lang.Float> values) {
          ensureTranslateIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, translate_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float translate = 12;</code>
         */
        public Builder clearTranslate() {
          translate_ = emptyFloatList();
          bitField0_ = (bitField0_ & ~0x00000400);
          onChanged();
          return this;
        }

        private int translateAnchor_ = 0;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor translate_anchor = 13;</code>
         */
        public int getTranslateAnchorValue() {
          return translateAnchor_;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor translate_anchor = 13;</code>
         */
        public Builder setTranslateAnchorValue(int value) {
          translateAnchor_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor translate_anchor = 13;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor getTranslateAnchor() {
          @SuppressWarnings("deprecation")
          com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor result = com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.valueOf(translateAnchor_);
          return result == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.UNRECOGNIZED : result;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor translate_anchor = 13;</code>
         */
        public Builder setTranslateAnchor(com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor value) {
          if (value == null) {
            throw new NullPointerException();
          }
          
          translateAnchor_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor translate_anchor = 13;</code>
         */
        public Builder clearTranslateAnchor() {
          
          translateAnchor_ = 0;
          onChanged();
          return this;
        }

        private float width_ ;
        /**
         * <code>float width = 14;</code>
         */
        public float getWidth() {
          return width_;
        }
        /**
         * <code>float width = 14;</code>
         */
        public Builder setWidth(float value) {
          
          width_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float width = 14;</code>
         */
        public Builder clearWidth() {
          
          width_ = 0F;
          onChanged();
          return this;
        }

        private float gapWidth_ ;
        /**
         * <code>float gap_width = 15;</code>
         */
        public float getGapWidth() {
          return gapWidth_;
        }
        /**
         * <code>float gap_width = 15;</code>
         */
        public Builder setGapWidth(float value) {
          
          gapWidth_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float gap_width = 15;</code>
         */
        public Builder clearGapWidth() {
          
          gapWidth_ = 0F;
          onChanged();
          return this;
        }

        private float offset_ ;
        /**
         * <code>float offset = 16;</code>
         */
        public float getOffset() {
          return offset_;
        }
        /**
         * <code>float offset = 16;</code>
         */
        public Builder setOffset(float value) {
          
          offset_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float offset = 16;</code>
         */
        public Builder clearOffset() {
          
          offset_ = 0F;
          onChanged();
          return this;
        }

        private float blur_ ;
        /**
         * <code>float blur = 17;</code>
         */
        public float getBlur() {
          return blur_;
        }
        /**
         * <code>float blur = 17;</code>
         */
        public Builder setBlur(float value) {
          
          blur_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float blur = 17;</code>
         */
        public Builder clearBlur() {
          
          blur_ = 0F;
          onChanged();
          return this;
        }

        private com.google.protobuf.Internal.FloatList dasharray_ = emptyFloatList();
        private void ensureDasharrayIsMutable() {
          if (!((bitField0_ & 0x00010000) != 0)) {
            dasharray_ = mutableCopy(dasharray_);
            bitField0_ |= 0x00010000;
           }
        }
        /**
         * <code>repeated float dasharray = 18;</code>
         */
        public java.util.List<java.lang.Float>
            getDasharrayList() {
          return ((bitField0_ & 0x00010000) != 0) ?
                   java.util.Collections.unmodifiableList(dasharray_) : dasharray_;
        }
        /**
         * <code>repeated float dasharray = 18;</code>
         */
        public int getDasharrayCount() {
          return dasharray_.size();
        }
        /**
         * <code>repeated float dasharray = 18;</code>
         */
        public float getDasharray(int index) {
          return dasharray_.getFloat(index);
        }
        /**
         * <code>repeated float dasharray = 18;</code>
         */
        public Builder setDasharray(
            int index, float value) {
          ensureDasharrayIsMutable();
          dasharray_.setFloat(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float dasharray = 18;</code>
         */
        public Builder addDasharray(float value) {
          ensureDasharrayIsMutable();
          dasharray_.addFloat(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float dasharray = 18;</code>
         */
        public Builder addAllDasharray(
            java.lang.Iterable<? extends java.lang.Float> values) {
          ensureDasharrayIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, dasharray_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float dasharray = 18;</code>
         */
        public Builder clearDasharray() {
          dasharray_ = emptyFloatList();
          bitField0_ = (bitField0_ & ~0x00010000);
          onChanged();
          return this;
        }

        private java.lang.Object pattern_ = "";
        /**
         * <code>string pattern = 19;</code>
         */
        public java.lang.String getPattern() {
          java.lang.Object ref = pattern_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            pattern_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string pattern = 19;</code>
         */
        public com.google.protobuf.ByteString
            getPatternBytes() {
          java.lang.Object ref = pattern_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            pattern_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string pattern = 19;</code>
         */
        public Builder setPattern(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          pattern_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string pattern = 19;</code>
         */
        public Builder clearPattern() {
          
          pattern_ = getDefaultInstance().getPattern();
          onChanged();
          return this;
        }
        /**
         * <code>string pattern = 19;</code>
         */
        public Builder setPatternBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          pattern_ = value;
          onChanged();
          return this;
        }

        private int gradient_ ;
        /**
         * <code>int32 gradient = 20;</code>
         */
        public int getGradient() {
          return gradient_;
        }
        /**
         * <code>int32 gradient = 20;</code>
         */
        public Builder setGradient(int value) {
          
          gradient_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>int32 gradient = 20;</code>
         */
        public Builder clearGradient() {
          
          gradient_ = 0;
          onChanged();
          return this;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions opacityTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> opacityTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 21;</code>
         */
        public boolean hasOpacityTransition() {
          return opacityTransitionBuilder_ != null || opacityTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 21;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getOpacityTransition() {
          if (opacityTransitionBuilder_ == null) {
            return opacityTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : opacityTransition_;
          } else {
            return opacityTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 21;</code>
         */
        public Builder setOpacityTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (opacityTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            opacityTransition_ = value;
            onChanged();
          } else {
            opacityTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 21;</code>
         */
        public Builder setOpacityTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (opacityTransitionBuilder_ == null) {
            opacityTransition_ = builderForValue.build();
            onChanged();
          } else {
            opacityTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 21;</code>
         */
        public Builder mergeOpacityTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (opacityTransitionBuilder_ == null) {
            if (opacityTransition_ != null) {
              opacityTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(opacityTransition_).mergeFrom(value).buildPartial();
            } else {
              opacityTransition_ = value;
            }
            onChanged();
          } else {
            opacityTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 21;</code>
         */
        public Builder clearOpacityTransition() {
          if (opacityTransitionBuilder_ == null) {
            opacityTransition_ = null;
            onChanged();
          } else {
            opacityTransition_ = null;
            opacityTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 21;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getOpacityTransitionBuilder() {
          
          onChanged();
          return getOpacityTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 21;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getOpacityTransitionOrBuilder() {
          if (opacityTransitionBuilder_ != null) {
            return opacityTransitionBuilder_.getMessageOrBuilder();
          } else {
            return opacityTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : opacityTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions opacity_transition = 21;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getOpacityTransitionFieldBuilder() {
          if (opacityTransitionBuilder_ == null) {
            opacityTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getOpacityTransition(),
                    getParentForChildren(),
                    isClean());
            opacityTransition_ = null;
          }
          return opacityTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions colorTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> colorTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 22;</code>
         */
        public boolean hasColorTransition() {
          return colorTransitionBuilder_ != null || colorTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 22;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getColorTransition() {
          if (colorTransitionBuilder_ == null) {
            return colorTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : colorTransition_;
          } else {
            return colorTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 22;</code>
         */
        public Builder setColorTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (colorTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            colorTransition_ = value;
            onChanged();
          } else {
            colorTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 22;</code>
         */
        public Builder setColorTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (colorTransitionBuilder_ == null) {
            colorTransition_ = builderForValue.build();
            onChanged();
          } else {
            colorTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 22;</code>
         */
        public Builder mergeColorTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (colorTransitionBuilder_ == null) {
            if (colorTransition_ != null) {
              colorTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(colorTransition_).mergeFrom(value).buildPartial();
            } else {
              colorTransition_ = value;
            }
            onChanged();
          } else {
            colorTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 22;</code>
         */
        public Builder clearColorTransition() {
          if (colorTransitionBuilder_ == null) {
            colorTransition_ = null;
            onChanged();
          } else {
            colorTransition_ = null;
            colorTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 22;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getColorTransitionBuilder() {
          
          onChanged();
          return getColorTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 22;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getColorTransitionOrBuilder() {
          if (colorTransitionBuilder_ != null) {
            return colorTransitionBuilder_.getMessageOrBuilder();
          } else {
            return colorTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : colorTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions color_transition = 22;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getColorTransitionFieldBuilder() {
          if (colorTransitionBuilder_ == null) {
            colorTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getColorTransition(),
                    getParentForChildren(),
                    isClean());
            colorTransition_ = null;
          }
          return colorTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions translateTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> translateTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 23;</code>
         */
        public boolean hasTranslateTransition() {
          return translateTransitionBuilder_ != null || translateTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 23;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getTranslateTransition() {
          if (translateTransitionBuilder_ == null) {
            return translateTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : translateTransition_;
          } else {
            return translateTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 23;</code>
         */
        public Builder setTranslateTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (translateTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            translateTransition_ = value;
            onChanged();
          } else {
            translateTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 23;</code>
         */
        public Builder setTranslateTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (translateTransitionBuilder_ == null) {
            translateTransition_ = builderForValue.build();
            onChanged();
          } else {
            translateTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 23;</code>
         */
        public Builder mergeTranslateTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (translateTransitionBuilder_ == null) {
            if (translateTransition_ != null) {
              translateTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(translateTransition_).mergeFrom(value).buildPartial();
            } else {
              translateTransition_ = value;
            }
            onChanged();
          } else {
            translateTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 23;</code>
         */
        public Builder clearTranslateTransition() {
          if (translateTransitionBuilder_ == null) {
            translateTransition_ = null;
            onChanged();
          } else {
            translateTransition_ = null;
            translateTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 23;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getTranslateTransitionBuilder() {
          
          onChanged();
          return getTranslateTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 23;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getTranslateTransitionOrBuilder() {
          if (translateTransitionBuilder_ != null) {
            return translateTransitionBuilder_.getMessageOrBuilder();
          } else {
            return translateTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : translateTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions translate_transition = 23;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getTranslateTransitionFieldBuilder() {
          if (translateTransitionBuilder_ == null) {
            translateTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getTranslateTransition(),
                    getParentForChildren(),
                    isClean());
            translateTransition_ = null;
          }
          return translateTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions widthTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> widthTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions width_transition = 24;</code>
         */
        public boolean hasWidthTransition() {
          return widthTransitionBuilder_ != null || widthTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions width_transition = 24;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getWidthTransition() {
          if (widthTransitionBuilder_ == null) {
            return widthTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : widthTransition_;
          } else {
            return widthTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions width_transition = 24;</code>
         */
        public Builder setWidthTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (widthTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            widthTransition_ = value;
            onChanged();
          } else {
            widthTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions width_transition = 24;</code>
         */
        public Builder setWidthTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (widthTransitionBuilder_ == null) {
            widthTransition_ = builderForValue.build();
            onChanged();
          } else {
            widthTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions width_transition = 24;</code>
         */
        public Builder mergeWidthTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (widthTransitionBuilder_ == null) {
            if (widthTransition_ != null) {
              widthTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(widthTransition_).mergeFrom(value).buildPartial();
            } else {
              widthTransition_ = value;
            }
            onChanged();
          } else {
            widthTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions width_transition = 24;</code>
         */
        public Builder clearWidthTransition() {
          if (widthTransitionBuilder_ == null) {
            widthTransition_ = null;
            onChanged();
          } else {
            widthTransition_ = null;
            widthTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions width_transition = 24;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getWidthTransitionBuilder() {
          
          onChanged();
          return getWidthTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions width_transition = 24;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getWidthTransitionOrBuilder() {
          if (widthTransitionBuilder_ != null) {
            return widthTransitionBuilder_.getMessageOrBuilder();
          } else {
            return widthTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : widthTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions width_transition = 24;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getWidthTransitionFieldBuilder() {
          if (widthTransitionBuilder_ == null) {
            widthTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getWidthTransition(),
                    getParentForChildren(),
                    isClean());
            widthTransition_ = null;
          }
          return widthTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions gapWidthTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> gapWidthTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions gap_width_transition = 25;</code>
         */
        public boolean hasGapWidthTransition() {
          return gapWidthTransitionBuilder_ != null || gapWidthTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions gap_width_transition = 25;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getGapWidthTransition() {
          if (gapWidthTransitionBuilder_ == null) {
            return gapWidthTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : gapWidthTransition_;
          } else {
            return gapWidthTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions gap_width_transition = 25;</code>
         */
        public Builder setGapWidthTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (gapWidthTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            gapWidthTransition_ = value;
            onChanged();
          } else {
            gapWidthTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions gap_width_transition = 25;</code>
         */
        public Builder setGapWidthTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (gapWidthTransitionBuilder_ == null) {
            gapWidthTransition_ = builderForValue.build();
            onChanged();
          } else {
            gapWidthTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions gap_width_transition = 25;</code>
         */
        public Builder mergeGapWidthTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (gapWidthTransitionBuilder_ == null) {
            if (gapWidthTransition_ != null) {
              gapWidthTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(gapWidthTransition_).mergeFrom(value).buildPartial();
            } else {
              gapWidthTransition_ = value;
            }
            onChanged();
          } else {
            gapWidthTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions gap_width_transition = 25;</code>
         */
        public Builder clearGapWidthTransition() {
          if (gapWidthTransitionBuilder_ == null) {
            gapWidthTransition_ = null;
            onChanged();
          } else {
            gapWidthTransition_ = null;
            gapWidthTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions gap_width_transition = 25;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getGapWidthTransitionBuilder() {
          
          onChanged();
          return getGapWidthTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions gap_width_transition = 25;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getGapWidthTransitionOrBuilder() {
          if (gapWidthTransitionBuilder_ != null) {
            return gapWidthTransitionBuilder_.getMessageOrBuilder();
          } else {
            return gapWidthTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : gapWidthTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions gap_width_transition = 25;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getGapWidthTransitionFieldBuilder() {
          if (gapWidthTransitionBuilder_ == null) {
            gapWidthTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getGapWidthTransition(),
                    getParentForChildren(),
                    isClean());
            gapWidthTransition_ = null;
          }
          return gapWidthTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions offsetTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> offsetTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions offset_transition = 26;</code>
         */
        public boolean hasOffsetTransition() {
          return offsetTransitionBuilder_ != null || offsetTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions offset_transition = 26;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getOffsetTransition() {
          if (offsetTransitionBuilder_ == null) {
            return offsetTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : offsetTransition_;
          } else {
            return offsetTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions offset_transition = 26;</code>
         */
        public Builder setOffsetTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (offsetTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            offsetTransition_ = value;
            onChanged();
          } else {
            offsetTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions offset_transition = 26;</code>
         */
        public Builder setOffsetTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (offsetTransitionBuilder_ == null) {
            offsetTransition_ = builderForValue.build();
            onChanged();
          } else {
            offsetTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions offset_transition = 26;</code>
         */
        public Builder mergeOffsetTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (offsetTransitionBuilder_ == null) {
            if (offsetTransition_ != null) {
              offsetTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(offsetTransition_).mergeFrom(value).buildPartial();
            } else {
              offsetTransition_ = value;
            }
            onChanged();
          } else {
            offsetTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions offset_transition = 26;</code>
         */
        public Builder clearOffsetTransition() {
          if (offsetTransitionBuilder_ == null) {
            offsetTransition_ = null;
            onChanged();
          } else {
            offsetTransition_ = null;
            offsetTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions offset_transition = 26;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getOffsetTransitionBuilder() {
          
          onChanged();
          return getOffsetTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions offset_transition = 26;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getOffsetTransitionOrBuilder() {
          if (offsetTransitionBuilder_ != null) {
            return offsetTransitionBuilder_.getMessageOrBuilder();
          } else {
            return offsetTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : offsetTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions offset_transition = 26;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getOffsetTransitionFieldBuilder() {
          if (offsetTransitionBuilder_ == null) {
            offsetTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getOffsetTransition(),
                    getParentForChildren(),
                    isClean());
            offsetTransition_ = null;
          }
          return offsetTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions blurTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> blurTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions blur_transition = 27;</code>
         */
        public boolean hasBlurTransition() {
          return blurTransitionBuilder_ != null || blurTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions blur_transition = 27;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getBlurTransition() {
          if (blurTransitionBuilder_ == null) {
            return blurTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : blurTransition_;
          } else {
            return blurTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions blur_transition = 27;</code>
         */
        public Builder setBlurTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (blurTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            blurTransition_ = value;
            onChanged();
          } else {
            blurTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions blur_transition = 27;</code>
         */
        public Builder setBlurTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (blurTransitionBuilder_ == null) {
            blurTransition_ = builderForValue.build();
            onChanged();
          } else {
            blurTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions blur_transition = 27;</code>
         */
        public Builder mergeBlurTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (blurTransitionBuilder_ == null) {
            if (blurTransition_ != null) {
              blurTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(blurTransition_).mergeFrom(value).buildPartial();
            } else {
              blurTransition_ = value;
            }
            onChanged();
          } else {
            blurTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions blur_transition = 27;</code>
         */
        public Builder clearBlurTransition() {
          if (blurTransitionBuilder_ == null) {
            blurTransition_ = null;
            onChanged();
          } else {
            blurTransition_ = null;
            blurTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions blur_transition = 27;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getBlurTransitionBuilder() {
          
          onChanged();
          return getBlurTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions blur_transition = 27;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getBlurTransitionOrBuilder() {
          if (blurTransitionBuilder_ != null) {
            return blurTransitionBuilder_.getMessageOrBuilder();
          } else {
            return blurTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : blurTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions blur_transition = 27;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getBlurTransitionFieldBuilder() {
          if (blurTransitionBuilder_ == null) {
            blurTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getBlurTransition(),
                    getParentForChildren(),
                    isClean());
            blurTransition_ = null;
          }
          return blurTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions dasharrayTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> dasharrayTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions dasharray_transition = 28;</code>
         */
        public boolean hasDasharrayTransition() {
          return dasharrayTransitionBuilder_ != null || dasharrayTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions dasharray_transition = 28;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getDasharrayTransition() {
          if (dasharrayTransitionBuilder_ == null) {
            return dasharrayTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : dasharrayTransition_;
          } else {
            return dasharrayTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions dasharray_transition = 28;</code>
         */
        public Builder setDasharrayTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (dasharrayTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            dasharrayTransition_ = value;
            onChanged();
          } else {
            dasharrayTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions dasharray_transition = 28;</code>
         */
        public Builder setDasharrayTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (dasharrayTransitionBuilder_ == null) {
            dasharrayTransition_ = builderForValue.build();
            onChanged();
          } else {
            dasharrayTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions dasharray_transition = 28;</code>
         */
        public Builder mergeDasharrayTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (dasharrayTransitionBuilder_ == null) {
            if (dasharrayTransition_ != null) {
              dasharrayTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(dasharrayTransition_).mergeFrom(value).buildPartial();
            } else {
              dasharrayTransition_ = value;
            }
            onChanged();
          } else {
            dasharrayTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions dasharray_transition = 28;</code>
         */
        public Builder clearDasharrayTransition() {
          if (dasharrayTransitionBuilder_ == null) {
            dasharrayTransition_ = null;
            onChanged();
          } else {
            dasharrayTransition_ = null;
            dasharrayTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions dasharray_transition = 28;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getDasharrayTransitionBuilder() {
          
          onChanged();
          return getDasharrayTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions dasharray_transition = 28;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getDasharrayTransitionOrBuilder() {
          if (dasharrayTransitionBuilder_ != null) {
            return dasharrayTransitionBuilder_.getMessageOrBuilder();
          } else {
            return dasharrayTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : dasharrayTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions dasharray_transition = 28;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getDasharrayTransitionFieldBuilder() {
          if (dasharrayTransitionBuilder_ == null) {
            dasharrayTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getDasharrayTransition(),
                    getParentForChildren(),
                    isClean());
            dasharrayTransition_ = null;
          }
          return dasharrayTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions patternTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> patternTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 29;</code>
         */
        public boolean hasPatternTransition() {
          return patternTransitionBuilder_ != null || patternTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 29;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getPatternTransition() {
          if (patternTransitionBuilder_ == null) {
            return patternTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : patternTransition_;
          } else {
            return patternTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 29;</code>
         */
        public Builder setPatternTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (patternTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            patternTransition_ = value;
            onChanged();
          } else {
            patternTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 29;</code>
         */
        public Builder setPatternTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (patternTransitionBuilder_ == null) {
            patternTransition_ = builderForValue.build();
            onChanged();
          } else {
            patternTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 29;</code>
         */
        public Builder mergePatternTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (patternTransitionBuilder_ == null) {
            if (patternTransition_ != null) {
              patternTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(patternTransition_).mergeFrom(value).buildPartial();
            } else {
              patternTransition_ = value;
            }
            onChanged();
          } else {
            patternTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 29;</code>
         */
        public Builder clearPatternTransition() {
          if (patternTransitionBuilder_ == null) {
            patternTransition_ = null;
            onChanged();
          } else {
            patternTransition_ = null;
            patternTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 29;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getPatternTransitionBuilder() {
          
          onChanged();
          return getPatternTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 29;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getPatternTransitionOrBuilder() {
          if (patternTransitionBuilder_ != null) {
            return patternTransitionBuilder_.getMessageOrBuilder();
          } else {
            return patternTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : patternTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions pattern_transition = 29;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getPatternTransitionFieldBuilder() {
          if (patternTransitionBuilder_ == null) {
            patternTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getPatternTransition(),
                    getParentForChildren(),
                    isClean());
            patternTransition_ = null;
          }
          return patternTransitionBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:com.tophap.mapbox_gl.proto.Layer.Line)
      }

      // @@protoc_insertion_point(class_scope:com.tophap.mapbox_gl.proto.Layer.Line)
      private static final com.tophap.mapbox_gl.proto.Layers.Layer.Line DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.tophap.mapbox_gl.proto.Layers.Layer.Line();
      }

      public static com.tophap.mapbox_gl.proto.Layers.Layer.Line getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Line>
          PARSER = new com.google.protobuf.AbstractParser<Line>() {
        @java.lang.Override
        public Line parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Line(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Line> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Line> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.tophap.mapbox_gl.proto.Layers.Layer.Line getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public interface SymbolOrBuilder extends
        // @@protoc_insertion_point(interface_extends:com.tophap.mapbox_gl.proto.Layer.Symbol)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>string id = 1;</code>
       */
      java.lang.String getId();
      /**
       * <code>string id = 1;</code>
       */
      com.google.protobuf.ByteString
          getIdBytes();

      /**
       * <code>string source_id = 2;</code>
       */
      java.lang.String getSourceId();
      /**
       * <code>string source_id = 2;</code>
       */
      com.google.protobuf.ByteString
          getSourceIdBytes();

      /**
       * <code>bool visible = 3;</code>
       */
      boolean getVisible();

      /**
       * <code>float min_zoom = 4;</code>
       */
      float getMinZoom();

      /**
       * <code>float max_zoom = 5;</code>
       */
      float getMaxZoom();

      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Placement symbol_placement = 6;</code>
       */
      int getSymbolPlacementValue();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Placement symbol_placement = 6;</code>
       */
      com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Placement getSymbolPlacement();

      /**
       * <code>float symbol_spacing = 7;</code>
       */
      float getSymbolSpacing();

      /**
       * <code>bool symbol_avoid_edges = 8;</code>
       */
      boolean getSymbolAvoidEdges();

      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.ZOrder symbol_z_order = 9;</code>
       */
      int getSymbolZOrderValue();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.ZOrder symbol_z_order = 9;</code>
       */
      com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.ZOrder getSymbolZOrder();

      /**
       * <code>bool icon_allow_overlap = 10;</code>
       */
      boolean getIconAllowOverlap();

      /**
       * <code>bool icon_ignore_placement = 11;</code>
       */
      boolean getIconIgnorePlacement();

      /**
       * <code>bool icon_optional = 12;</code>
       */
      boolean getIconOptional();

      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Alignment icon_rotation_alignment = 13;</code>
       */
      int getIconRotationAlignmentValue();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Alignment icon_rotation_alignment = 13;</code>
       */
      com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment getIconRotationAlignment();

      /**
       * <code>float icon_size = 14;</code>
       */
      float getIconSize();

      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.TextFit icon_text_fit = 15;</code>
       */
      int getIconTextFitValue();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.TextFit icon_text_fit = 15;</code>
       */
      com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.TextFit getIconTextFit();

      /**
       * <code>repeated float icon_text_fit_padding = 16;</code>
       */
      java.util.List<java.lang.Float> getIconTextFitPaddingList();
      /**
       * <code>repeated float icon_text_fit_padding = 16;</code>
       */
      int getIconTextFitPaddingCount();
      /**
       * <code>repeated float icon_text_fit_padding = 16;</code>
       */
      float getIconTextFitPadding(int index);

      /**
       * <code>string icon_image = 17;</code>
       */
      java.lang.String getIconImage();
      /**
       * <code>string icon_image = 17;</code>
       */
      com.google.protobuf.ByteString
          getIconImageBytes();

      /**
       * <code>float icon_rotate = 18;</code>
       */
      float getIconRotate();

      /**
       * <code>float icon_padding = 19;</code>
       */
      float getIconPadding();

      /**
       * <code>bool icon_keep_upright = 20;</code>
       */
      boolean getIconKeepUpright();

      /**
       * <code>repeated float icon_offset = 21;</code>
       */
      java.util.List<java.lang.Float> getIconOffsetList();
      /**
       * <code>repeated float icon_offset = 21;</code>
       */
      int getIconOffsetCount();
      /**
       * <code>repeated float icon_offset = 21;</code>
       */
      float getIconOffset(int index);

      /**
       * <code>.com.tophap.mapbox_gl.proto.PositionAnchor icon_anchor = 22;</code>
       */
      int getIconAnchorValue();
      /**
       * <code>.com.tophap.mapbox_gl.proto.PositionAnchor icon_anchor = 22;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor getIconAnchor();

      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Alignment icon_pitch_alignment = 23;</code>
       */
      int getIconPitchAlignmentValue();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Alignment icon_pitch_alignment = 23;</code>
       */
      com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment getIconPitchAlignment();

      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Alignment text_pitch_alignment = 24;</code>
       */
      int getTextPitchAlignmentValue();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Alignment text_pitch_alignment = 24;</code>
       */
      com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment getTextPitchAlignment();

      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Alignment text_rotation_alignment = 25;</code>
       */
      int getTextRotationAlignmentValue();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Alignment text_rotation_alignment = 25;</code>
       */
      com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment getTextRotationAlignment();

      /**
       * <code>repeated .com.tophap.mapbox_gl.proto.FormattedSection text_field = 26;</code>
       */
      java.util.List<com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSection> 
          getTextFieldList();
      /**
       * <code>repeated .com.tophap.mapbox_gl.proto.FormattedSection text_field = 26;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSection getTextField(int index);
      /**
       * <code>repeated .com.tophap.mapbox_gl.proto.FormattedSection text_field = 26;</code>
       */
      int getTextFieldCount();
      /**
       * <code>repeated .com.tophap.mapbox_gl.proto.FormattedSection text_field = 26;</code>
       */
      java.util.List<? extends com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSectionOrBuilder> 
          getTextFieldOrBuilderList();
      /**
       * <code>repeated .com.tophap.mapbox_gl.proto.FormattedSection text_field = 26;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSectionOrBuilder getTextFieldOrBuilder(
          int index);

      /**
       * <code>repeated string text_font = 27;</code>
       */
      java.util.List<java.lang.String>
          getTextFontList();
      /**
       * <code>repeated string text_font = 27;</code>
       */
      int getTextFontCount();
      /**
       * <code>repeated string text_font = 27;</code>
       */
      java.lang.String getTextFont(int index);
      /**
       * <code>repeated string text_font = 27;</code>
       */
      com.google.protobuf.ByteString
          getTextFontBytes(int index);

      /**
       * <code>float text_size = 28;</code>
       */
      float getTextSize();

      /**
       * <code>float text_max_width = 29;</code>
       */
      float getTextMaxWidth();

      /**
       * <code>float text_line_height = 30;</code>
       */
      float getTextLineHeight();

      /**
       * <code>float text_letter_spacing = 31;</code>
       */
      float getTextLetterSpacing();

      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.TextJustify text_justify = 32;</code>
       */
      int getTextJustifyValue();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.TextJustify text_justify = 32;</code>
       */
      com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.TextJustify getTextJustify();

      /**
       * <code>float text_radial_offset = 33;</code>
       */
      float getTextRadialOffset();

      /**
       * <code>repeated .com.tophap.mapbox_gl.proto.PositionAnchor text_variable_anchor = 34;</code>
       */
      java.util.List<com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor> getTextVariableAnchorList();
      /**
       * <code>repeated .com.tophap.mapbox_gl.proto.PositionAnchor text_variable_anchor = 34;</code>
       */
      int getTextVariableAnchorCount();
      /**
       * <code>repeated .com.tophap.mapbox_gl.proto.PositionAnchor text_variable_anchor = 34;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor getTextVariableAnchor(int index);
      /**
       * <code>repeated .com.tophap.mapbox_gl.proto.PositionAnchor text_variable_anchor = 34;</code>
       */
      java.util.List<java.lang.Integer>
      getTextVariableAnchorValueList();
      /**
       * <code>repeated .com.tophap.mapbox_gl.proto.PositionAnchor text_variable_anchor = 34;</code>
       */
      int getTextVariableAnchorValue(int index);

      /**
       * <code>.com.tophap.mapbox_gl.proto.PositionAnchor text_anchor = 35;</code>
       */
      int getTextAnchorValue();
      /**
       * <code>.com.tophap.mapbox_gl.proto.PositionAnchor text_anchor = 35;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor getTextAnchor();

      /**
       * <code>float text_max_angle = 36;</code>
       */
      float getTextMaxAngle();

      /**
       * <code>float text_rotate = 37;</code>
       */
      float getTextRotate();

      /**
       * <code>float text_padding = 38;</code>
       */
      float getTextPadding();

      /**
       * <code>bool text_keep_upright = 39;</code>
       */
      boolean getTextKeepUpright();

      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.TextTransform text_transform = 40;</code>
       */
      int getTextTransformValue();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.TextTransform text_transform = 40;</code>
       */
      com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.TextTransform getTextTransform();

      /**
       * <code>repeated float text_offset = 41;</code>
       */
      java.util.List<java.lang.Float> getTextOffsetList();
      /**
       * <code>repeated float text_offset = 41;</code>
       */
      int getTextOffsetCount();
      /**
       * <code>repeated float text_offset = 41;</code>
       */
      float getTextOffset(int index);

      /**
       * <code>bool text_allow_overlap = 42;</code>
       */
      boolean getTextAllowOverlap();

      /**
       * <code>bool text_ignore_placement = 43;</code>
       */
      boolean getTextIgnorePlacement();

      /**
       * <code>bool text_optional = 44;</code>
       */
      boolean getTextOptional();

      /**
       * <code>.com.tophap.mapbox_gl.proto.Color icon_color = 46;</code>
       */
      boolean hasIconColor();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color icon_color = 46;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.Color getIconColor();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color icon_color = 46;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getIconColorOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.Color icon_halo_color = 47;</code>
       */
      boolean hasIconHaloColor();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color icon_halo_color = 47;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.Color getIconHaloColor();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color icon_halo_color = 47;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getIconHaloColorOrBuilder();

      /**
       * <code>float icon_halo_width = 48;</code>
       */
      float getIconHaloWidth();

      /**
       * <code>float icon_halo_blur = 49;</code>
       */
      float getIconHaloBlur();

      /**
       * <code>repeated float icon_translate = 50;</code>
       */
      java.util.List<java.lang.Float> getIconTranslateList();
      /**
       * <code>repeated float icon_translate = 50;</code>
       */
      int getIconTranslateCount();
      /**
       * <code>repeated float icon_translate = 50;</code>
       */
      float getIconTranslate(int index);

      /**
       * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor icon_translate_anchor = 51;</code>
       */
      int getIconTranslateAnchorValue();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor icon_translate_anchor = 51;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor getIconTranslateAnchor();

      /**
       * <code>.com.tophap.mapbox_gl.proto.Color text_color = 53;</code>
       */
      boolean hasTextColor();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color text_color = 53;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.Color getTextColor();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color text_color = 53;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getTextColorOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.Color text_halo_color = 54;</code>
       */
      boolean hasTextHaloColor();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color text_halo_color = 54;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.Color getTextHaloColor();
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color text_halo_color = 54;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getTextHaloColorOrBuilder();

      /**
       * <code>float text_halo_width = 55;</code>
       */
      float getTextHaloWidth();

      /**
       * <code>float text_halo_blur = 56;</code>
       */
      float getTextHaloBlur();

      /**
       * <code>repeated float text_translate = 57;</code>
       */
      java.util.List<java.lang.Float> getTextTranslateList();
      /**
       * <code>repeated float text_translate = 57;</code>
       */
      int getTextTranslateCount();
      /**
       * <code>repeated float text_translate = 57;</code>
       */
      float getTextTranslate(int index);

      /**
       * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor text_translate_anchor = 58;</code>
       */
      int getTextTranslateAnchorValue();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor text_translate_anchor = 58;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor getTextTranslateAnchor();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_opacity_transition = 59;</code>
       */
      boolean hasIconOpacityTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_opacity_transition = 59;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getIconOpacityTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_opacity_transition = 59;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getIconOpacityTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_color_transition = 60;</code>
       */
      boolean hasIconColorTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_color_transition = 60;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getIconColorTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_color_transition = 60;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getIconColorTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_color_transition = 61;</code>
       */
      boolean hasIconHaloColorTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_color_transition = 61;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getIconHaloColorTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_color_transition = 61;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getIconHaloColorTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_width_transition = 62;</code>
       */
      boolean hasIconHaloWidthTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_width_transition = 62;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getIconHaloWidthTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_width_transition = 62;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getIconHaloWidthTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_blur_transition = 63;</code>
       */
      boolean hasIconHaloBlurTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_blur_transition = 63;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getIconHaloBlurTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_blur_transition = 63;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getIconHaloBlurTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_translate_transition = 64;</code>
       */
      boolean hasIconTranslateTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_translate_transition = 64;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getIconTranslateTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_translate_transition = 64;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getIconTranslateTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_opacity_transition = 65;</code>
       */
      boolean hasTextOpacityTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_opacity_transition = 65;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getTextOpacityTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_opacity_transition = 65;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getTextOpacityTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_color_transition = 66;</code>
       */
      boolean hasTextColorTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_color_transition = 66;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getTextColorTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_color_transition = 66;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getTextColorTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_color_transition = 67;</code>
       */
      boolean hasTextHaloColorTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_color_transition = 67;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getTextHaloColorTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_color_transition = 67;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getTextHaloColorTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_width_transition = 68;</code>
       */
      boolean hasTextHaloWidthTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_width_transition = 68;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getTextHaloWidthTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_width_transition = 68;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getTextHaloWidthTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_blur_transition = 69;</code>
       */
      boolean hasTextHaloBlurTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_blur_transition = 69;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getTextHaloBlurTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_blur_transition = 69;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getTextHaloBlurTransitionOrBuilder();

      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_translate_transition = 70;</code>
       */
      boolean hasTextTranslateTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_translate_transition = 70;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getTextTranslateTransition();
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_translate_transition = 70;</code>
       */
      com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getTextTranslateTransitionOrBuilder();
    }
    /**
     * Protobuf type {@code com.tophap.mapbox_gl.proto.Layer.Symbol}
     */
    public  static final class Symbol extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:com.tophap.mapbox_gl.proto.Layer.Symbol)
        SymbolOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use Symbol.newBuilder() to construct.
      private Symbol(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private Symbol() {
        id_ = "";
        sourceId_ = "";
        symbolPlacement_ = 0;
        symbolZOrder_ = 0;
        iconRotationAlignment_ = 0;
        iconTextFit_ = 0;
        iconTextFitPadding_ = emptyFloatList();
        iconImage_ = "";
        iconOffset_ = emptyFloatList();
        iconAnchor_ = 0;
        iconPitchAlignment_ = 0;
        textPitchAlignment_ = 0;
        textRotationAlignment_ = 0;
        textField_ = java.util.Collections.emptyList();
        textFont_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        textJustify_ = 0;
        textVariableAnchor_ = java.util.Collections.emptyList();
        textAnchor_ = 0;
        textTransform_ = 0;
        textOffset_ = emptyFloatList();
        iconTranslate_ = emptyFloatList();
        iconTranslateAnchor_ = 0;
        textTranslate_ = emptyFloatList();
        textTranslateAnchor_ = 0;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private Symbol(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        int mutable_bitField1_ = 0;
        int mutable_bitField2_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();

                id_ = s;
                break;
              }
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();

                sourceId_ = s;
                break;
              }
              case 24: {

                visible_ = input.readBool();
                break;
              }
              case 37: {

                minZoom_ = input.readFloat();
                break;
              }
              case 45: {

                maxZoom_ = input.readFloat();
                break;
              }
              case 48: {
                int rawValue = input.readEnum();

                symbolPlacement_ = rawValue;
                break;
              }
              case 61: {

                symbolSpacing_ = input.readFloat();
                break;
              }
              case 64: {

                symbolAvoidEdges_ = input.readBool();
                break;
              }
              case 72: {
                int rawValue = input.readEnum();

                symbolZOrder_ = rawValue;
                break;
              }
              case 80: {

                iconAllowOverlap_ = input.readBool();
                break;
              }
              case 88: {

                iconIgnorePlacement_ = input.readBool();
                break;
              }
              case 96: {

                iconOptional_ = input.readBool();
                break;
              }
              case 104: {
                int rawValue = input.readEnum();

                iconRotationAlignment_ = rawValue;
                break;
              }
              case 117: {

                iconSize_ = input.readFloat();
                break;
              }
              case 120: {
                int rawValue = input.readEnum();

                iconTextFit_ = rawValue;
                break;
              }
              case 133: {
                if (!((mutable_bitField0_ & 0x00008000) != 0)) {
                  iconTextFitPadding_ = newFloatList();
                  mutable_bitField0_ |= 0x00008000;
                }
                iconTextFitPadding_.addFloat(input.readFloat());
                break;
              }
              case 130: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00008000) != 0) && input.getBytesUntilLimit() > 0) {
                  iconTextFitPadding_ = newFloatList();
                  mutable_bitField0_ |= 0x00008000;
                }
                while (input.getBytesUntilLimit() > 0) {
                  iconTextFitPadding_.addFloat(input.readFloat());
                }
                input.popLimit(limit);
                break;
              }
              case 138: {
                java.lang.String s = input.readStringRequireUtf8();

                iconImage_ = s;
                break;
              }
              case 149: {

                iconRotate_ = input.readFloat();
                break;
              }
              case 157: {

                iconPadding_ = input.readFloat();
                break;
              }
              case 160: {

                iconKeepUpright_ = input.readBool();
                break;
              }
              case 173: {
                if (!((mutable_bitField0_ & 0x00100000) != 0)) {
                  iconOffset_ = newFloatList();
                  mutable_bitField0_ |= 0x00100000;
                }
                iconOffset_.addFloat(input.readFloat());
                break;
              }
              case 170: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00100000) != 0) && input.getBytesUntilLimit() > 0) {
                  iconOffset_ = newFloatList();
                  mutable_bitField0_ |= 0x00100000;
                }
                while (input.getBytesUntilLimit() > 0) {
                  iconOffset_.addFloat(input.readFloat());
                }
                input.popLimit(limit);
                break;
              }
              case 176: {
                int rawValue = input.readEnum();

                iconAnchor_ = rawValue;
                break;
              }
              case 184: {
                int rawValue = input.readEnum();

                iconPitchAlignment_ = rawValue;
                break;
              }
              case 192: {
                int rawValue = input.readEnum();

                textPitchAlignment_ = rawValue;
                break;
              }
              case 200: {
                int rawValue = input.readEnum();

                textRotationAlignment_ = rawValue;
                break;
              }
              case 210: {
                if (!((mutable_bitField0_ & 0x02000000) != 0)) {
                  textField_ = new java.util.ArrayList<com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSection>();
                  mutable_bitField0_ |= 0x02000000;
                }
                textField_.add(
                    input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSection.parser(), extensionRegistry));
                break;
              }
              case 218: {
                java.lang.String s = input.readStringRequireUtf8();
                if (!((mutable_bitField0_ & 0x04000000) != 0)) {
                  textFont_ = new com.google.protobuf.LazyStringArrayList();
                  mutable_bitField0_ |= 0x04000000;
                }
                textFont_.add(s);
                break;
              }
              case 229: {

                textSize_ = input.readFloat();
                break;
              }
              case 237: {

                textMaxWidth_ = input.readFloat();
                break;
              }
              case 245: {

                textLineHeight_ = input.readFloat();
                break;
              }
              case 253: {

                textLetterSpacing_ = input.readFloat();
                break;
              }
              case 256: {
                int rawValue = input.readEnum();

                textJustify_ = rawValue;
                break;
              }
              case 269: {

                textRadialOffset_ = input.readFloat();
                break;
              }
              case 272: {
                int rawValue = input.readEnum();
                if (!((mutable_bitField1_ & 0x00000002) != 0)) {
                  textVariableAnchor_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField1_ |= 0x00000002;
                }
                textVariableAnchor_.add(rawValue);
                break;
              }
              case 274: {
                int length = input.readRawVarint32();
                int oldLimit = input.pushLimit(length);
                while(input.getBytesUntilLimit() > 0) {
                  int rawValue = input.readEnum();
                  if (!((mutable_bitField1_ & 0x00000002) != 0)) {
                    textVariableAnchor_ = new java.util.ArrayList<java.lang.Integer>();
                    mutable_bitField1_ |= 0x00000002;
                  }
                  textVariableAnchor_.add(rawValue);
                }
                input.popLimit(oldLimit);
                break;
              }
              case 280: {
                int rawValue = input.readEnum();

                textAnchor_ = rawValue;
                break;
              }
              case 293: {

                textMaxAngle_ = input.readFloat();
                break;
              }
              case 301: {

                textRotate_ = input.readFloat();
                break;
              }
              case 309: {

                textPadding_ = input.readFloat();
                break;
              }
              case 312: {

                textKeepUpright_ = input.readBool();
                break;
              }
              case 320: {
                int rawValue = input.readEnum();

                textTransform_ = rawValue;
                break;
              }
              case 333: {
                if (!((mutable_bitField1_ & 0x00000100) != 0)) {
                  textOffset_ = newFloatList();
                  mutable_bitField1_ |= 0x00000100;
                }
                textOffset_.addFloat(input.readFloat());
                break;
              }
              case 330: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField1_ & 0x00000100) != 0) && input.getBytesUntilLimit() > 0) {
                  textOffset_ = newFloatList();
                  mutable_bitField1_ |= 0x00000100;
                }
                while (input.getBytesUntilLimit() > 0) {
                  textOffset_.addFloat(input.readFloat());
                }
                input.popLimit(limit);
                break;
              }
              case 336: {

                textAllowOverlap_ = input.readBool();
                break;
              }
              case 344: {

                textIgnorePlacement_ = input.readBool();
                break;
              }
              case 352: {

                textOptional_ = input.readBool();
                break;
              }
              case 370: {
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder subBuilder = null;
                if (iconColor_ != null) {
                  subBuilder = iconColor_.toBuilder();
                }
                iconColor_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.Color.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(iconColor_);
                  iconColor_ = subBuilder.buildPartial();
                }

                break;
              }
              case 378: {
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder subBuilder = null;
                if (iconHaloColor_ != null) {
                  subBuilder = iconHaloColor_.toBuilder();
                }
                iconHaloColor_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.Color.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(iconHaloColor_);
                  iconHaloColor_ = subBuilder.buildPartial();
                }

                break;
              }
              case 389: {

                iconHaloWidth_ = input.readFloat();
                break;
              }
              case 397: {

                iconHaloBlur_ = input.readFloat();
                break;
              }
              case 405: {
                if (!((mutable_bitField1_ & 0x00010000) != 0)) {
                  iconTranslate_ = newFloatList();
                  mutable_bitField1_ |= 0x00010000;
                }
                iconTranslate_.addFloat(input.readFloat());
                break;
              }
              case 402: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField1_ & 0x00010000) != 0) && input.getBytesUntilLimit() > 0) {
                  iconTranslate_ = newFloatList();
                  mutable_bitField1_ |= 0x00010000;
                }
                while (input.getBytesUntilLimit() > 0) {
                  iconTranslate_.addFloat(input.readFloat());
                }
                input.popLimit(limit);
                break;
              }
              case 408: {
                int rawValue = input.readEnum();

                iconTranslateAnchor_ = rawValue;
                break;
              }
              case 426: {
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder subBuilder = null;
                if (textColor_ != null) {
                  subBuilder = textColor_.toBuilder();
                }
                textColor_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.Color.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(textColor_);
                  textColor_ = subBuilder.buildPartial();
                }

                break;
              }
              case 434: {
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder subBuilder = null;
                if (textHaloColor_ != null) {
                  subBuilder = textHaloColor_.toBuilder();
                }
                textHaloColor_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.Color.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(textHaloColor_);
                  textHaloColor_ = subBuilder.buildPartial();
                }

                break;
              }
              case 445: {

                textHaloWidth_ = input.readFloat();
                break;
              }
              case 453: {

                textHaloBlur_ = input.readFloat();
                break;
              }
              case 461: {
                if (!((mutable_bitField1_ & 0x00400000) != 0)) {
                  textTranslate_ = newFloatList();
                  mutable_bitField1_ |= 0x00400000;
                }
                textTranslate_.addFloat(input.readFloat());
                break;
              }
              case 458: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField1_ & 0x00400000) != 0) && input.getBytesUntilLimit() > 0) {
                  textTranslate_ = newFloatList();
                  mutable_bitField1_ |= 0x00400000;
                }
                while (input.getBytesUntilLimit() > 0) {
                  textTranslate_.addFloat(input.readFloat());
                }
                input.popLimit(limit);
                break;
              }
              case 464: {
                int rawValue = input.readEnum();

                textTranslateAnchor_ = rawValue;
                break;
              }
              case 474: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (iconOpacityTransition_ != null) {
                  subBuilder = iconOpacityTransition_.toBuilder();
                }
                iconOpacityTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(iconOpacityTransition_);
                  iconOpacityTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 482: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (iconColorTransition_ != null) {
                  subBuilder = iconColorTransition_.toBuilder();
                }
                iconColorTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(iconColorTransition_);
                  iconColorTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 490: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (iconHaloColorTransition_ != null) {
                  subBuilder = iconHaloColorTransition_.toBuilder();
                }
                iconHaloColorTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(iconHaloColorTransition_);
                  iconHaloColorTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 498: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (iconHaloWidthTransition_ != null) {
                  subBuilder = iconHaloWidthTransition_.toBuilder();
                }
                iconHaloWidthTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(iconHaloWidthTransition_);
                  iconHaloWidthTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 506: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (iconHaloBlurTransition_ != null) {
                  subBuilder = iconHaloBlurTransition_.toBuilder();
                }
                iconHaloBlurTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(iconHaloBlurTransition_);
                  iconHaloBlurTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 514: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (iconTranslateTransition_ != null) {
                  subBuilder = iconTranslateTransition_.toBuilder();
                }
                iconTranslateTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(iconTranslateTransition_);
                  iconTranslateTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 522: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (textOpacityTransition_ != null) {
                  subBuilder = textOpacityTransition_.toBuilder();
                }
                textOpacityTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(textOpacityTransition_);
                  textOpacityTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 530: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (textColorTransition_ != null) {
                  subBuilder = textColorTransition_.toBuilder();
                }
                textColorTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(textColorTransition_);
                  textColorTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 538: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (textHaloColorTransition_ != null) {
                  subBuilder = textHaloColorTransition_.toBuilder();
                }
                textHaloColorTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(textHaloColorTransition_);
                  textHaloColorTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 546: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (textHaloWidthTransition_ != null) {
                  subBuilder = textHaloWidthTransition_.toBuilder();
                }
                textHaloWidthTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(textHaloWidthTransition_);
                  textHaloWidthTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 554: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (textHaloBlurTransition_ != null) {
                  subBuilder = textHaloBlurTransition_.toBuilder();
                }
                textHaloBlurTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(textHaloBlurTransition_);
                  textHaloBlurTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              case 562: {
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder subBuilder = null;
                if (textTranslateTransition_ != null) {
                  subBuilder = textTranslateTransition_.toBuilder();
                }
                textTranslateTransition_ = input.readMessage(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(textTranslateTransition_);
                  textTranslateTransition_ = subBuilder.buildPartial();
                }

                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00008000) != 0)) {
            iconTextFitPadding_.makeImmutable(); // C
          }
          if (((mutable_bitField0_ & 0x00100000) != 0)) {
            iconOffset_.makeImmutable(); // C
          }
          if (((mutable_bitField0_ & 0x02000000) != 0)) {
            textField_ = java.util.Collections.unmodifiableList(textField_);
          }
          if (((mutable_bitField0_ & 0x04000000) != 0)) {
            textFont_ = textFont_.getUnmodifiableView();
          }
          if (((mutable_bitField1_ & 0x00000002) != 0)) {
            textVariableAnchor_ = java.util.Collections.unmodifiableList(textVariableAnchor_);
          }
          if (((mutable_bitField1_ & 0x00000100) != 0)) {
            textOffset_.makeImmutable(); // C
          }
          if (((mutable_bitField1_ & 0x00010000) != 0)) {
            iconTranslate_.makeImmutable(); // C
          }
          if (((mutable_bitField1_ & 0x00400000) != 0)) {
            textTranslate_.makeImmutable(); // C
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_Symbol_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_Symbol_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.class, com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Builder.class);
      }

      /**
       * Protobuf enum {@code com.tophap.mapbox_gl.proto.Layer.Symbol.Placement}
       */
      public enum Placement
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>PLACEMENT_POINT = 0;</code>
         */
        PLACEMENT_POINT(0),
        /**
         * <code>PLACEMENT_LINE = 1;</code>
         */
        PLACEMENT_LINE(1),
        /**
         * <code>PLACEMENT_LINE_CENTER = 2;</code>
         */
        PLACEMENT_LINE_CENTER(2),
        UNRECOGNIZED(-1),
        ;

        /**
         * <code>PLACEMENT_POINT = 0;</code>
         */
        public static final int PLACEMENT_POINT_VALUE = 0;
        /**
         * <code>PLACEMENT_LINE = 1;</code>
         */
        public static final int PLACEMENT_LINE_VALUE = 1;
        /**
         * <code>PLACEMENT_LINE_CENTER = 2;</code>
         */
        public static final int PLACEMENT_LINE_CENTER_VALUE = 2;


        public final int getNumber() {
          if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalArgumentException(
                "Can't get the number of an unknown enum value.");
          }
          return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static Placement valueOf(int value) {
          return forNumber(value);
        }

        public static Placement forNumber(int value) {
          switch (value) {
            case 0: return PLACEMENT_POINT;
            case 1: return PLACEMENT_LINE;
            case 2: return PLACEMENT_LINE_CENTER;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<Placement>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            Placement> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<Placement>() {
                public Placement findValueByNumber(int number) {
                  return Placement.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.getDescriptor().getEnumTypes().get(0);
        }

        private static final Placement[] VALUES = values();

        public static Placement valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          if (desc.getIndex() == -1) {
            return UNRECOGNIZED;
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private Placement(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:com.tophap.mapbox_gl.proto.Layer.Symbol.Placement)
      }

      /**
       * Protobuf enum {@code com.tophap.mapbox_gl.proto.Layer.Symbol.ZOrder}
       */
      public enum ZOrder
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>Z_ORDER_AUTO = 0;</code>
         */
        Z_ORDER_AUTO(0),
        /**
         * <code>Z_ORDER_VIEWPORT_Y = 1;</code>
         */
        Z_ORDER_VIEWPORT_Y(1),
        /**
         * <code>Z_ORDER_SOURCE = 2;</code>
         */
        Z_ORDER_SOURCE(2),
        UNRECOGNIZED(-1),
        ;

        /**
         * <code>Z_ORDER_AUTO = 0;</code>
         */
        public static final int Z_ORDER_AUTO_VALUE = 0;
        /**
         * <code>Z_ORDER_VIEWPORT_Y = 1;</code>
         */
        public static final int Z_ORDER_VIEWPORT_Y_VALUE = 1;
        /**
         * <code>Z_ORDER_SOURCE = 2;</code>
         */
        public static final int Z_ORDER_SOURCE_VALUE = 2;


        public final int getNumber() {
          if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalArgumentException(
                "Can't get the number of an unknown enum value.");
          }
          return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static ZOrder valueOf(int value) {
          return forNumber(value);
        }

        public static ZOrder forNumber(int value) {
          switch (value) {
            case 0: return Z_ORDER_AUTO;
            case 1: return Z_ORDER_VIEWPORT_Y;
            case 2: return Z_ORDER_SOURCE;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<ZOrder>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            ZOrder> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<ZOrder>() {
                public ZOrder findValueByNumber(int number) {
                  return ZOrder.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.getDescriptor().getEnumTypes().get(1);
        }

        private static final ZOrder[] VALUES = values();

        public static ZOrder valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          if (desc.getIndex() == -1) {
            return UNRECOGNIZED;
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private ZOrder(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:com.tophap.mapbox_gl.proto.Layer.Symbol.ZOrder)
      }

      /**
       * Protobuf enum {@code com.tophap.mapbox_gl.proto.Layer.Symbol.Alignment}
       */
      public enum Alignment
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>ALIGNMENT_AUTO = 0;</code>
         */
        ALIGNMENT_AUTO(0),
        /**
         * <code>ALIGNMENT_MAP = 1;</code>
         */
        ALIGNMENT_MAP(1),
        /**
         * <code>ALIGNMENT_VIEWPORT = 2;</code>
         */
        ALIGNMENT_VIEWPORT(2),
        UNRECOGNIZED(-1),
        ;

        /**
         * <code>ALIGNMENT_AUTO = 0;</code>
         */
        public static final int ALIGNMENT_AUTO_VALUE = 0;
        /**
         * <code>ALIGNMENT_MAP = 1;</code>
         */
        public static final int ALIGNMENT_MAP_VALUE = 1;
        /**
         * <code>ALIGNMENT_VIEWPORT = 2;</code>
         */
        public static final int ALIGNMENT_VIEWPORT_VALUE = 2;


        public final int getNumber() {
          if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalArgumentException(
                "Can't get the number of an unknown enum value.");
          }
          return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static Alignment valueOf(int value) {
          return forNumber(value);
        }

        public static Alignment forNumber(int value) {
          switch (value) {
            case 0: return ALIGNMENT_AUTO;
            case 1: return ALIGNMENT_MAP;
            case 2: return ALIGNMENT_VIEWPORT;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<Alignment>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            Alignment> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<Alignment>() {
                public Alignment findValueByNumber(int number) {
                  return Alignment.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.getDescriptor().getEnumTypes().get(2);
        }

        private static final Alignment[] VALUES = values();

        public static Alignment valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          if (desc.getIndex() == -1) {
            return UNRECOGNIZED;
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private Alignment(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:com.tophap.mapbox_gl.proto.Layer.Symbol.Alignment)
      }

      /**
       * Protobuf enum {@code com.tophap.mapbox_gl.proto.Layer.Symbol.TextFit}
       */
      public enum TextFit
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>TEXT_FIT_NONE = 0;</code>
         */
        TEXT_FIT_NONE(0),
        /**
         * <code>TEXT_FIT_WIDTH = 1;</code>
         */
        TEXT_FIT_WIDTH(1),
        /**
         * <code>TEXT_FIT_HEIGHT = 2;</code>
         */
        TEXT_FIT_HEIGHT(2),
        /**
         * <code>TEXT_FIT_BOTH = 3;</code>
         */
        TEXT_FIT_BOTH(3),
        UNRECOGNIZED(-1),
        ;

        /**
         * <code>TEXT_FIT_NONE = 0;</code>
         */
        public static final int TEXT_FIT_NONE_VALUE = 0;
        /**
         * <code>TEXT_FIT_WIDTH = 1;</code>
         */
        public static final int TEXT_FIT_WIDTH_VALUE = 1;
        /**
         * <code>TEXT_FIT_HEIGHT = 2;</code>
         */
        public static final int TEXT_FIT_HEIGHT_VALUE = 2;
        /**
         * <code>TEXT_FIT_BOTH = 3;</code>
         */
        public static final int TEXT_FIT_BOTH_VALUE = 3;


        public final int getNumber() {
          if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalArgumentException(
                "Can't get the number of an unknown enum value.");
          }
          return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static TextFit valueOf(int value) {
          return forNumber(value);
        }

        public static TextFit forNumber(int value) {
          switch (value) {
            case 0: return TEXT_FIT_NONE;
            case 1: return TEXT_FIT_WIDTH;
            case 2: return TEXT_FIT_HEIGHT;
            case 3: return TEXT_FIT_BOTH;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<TextFit>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            TextFit> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<TextFit>() {
                public TextFit findValueByNumber(int number) {
                  return TextFit.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.getDescriptor().getEnumTypes().get(3);
        }

        private static final TextFit[] VALUES = values();

        public static TextFit valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          if (desc.getIndex() == -1) {
            return UNRECOGNIZED;
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private TextFit(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:com.tophap.mapbox_gl.proto.Layer.Symbol.TextFit)
      }

      /**
       * Protobuf enum {@code com.tophap.mapbox_gl.proto.Layer.Symbol.TextJustify}
       */
      public enum TextJustify
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>JUSTIFY_AUTO = 0;</code>
         */
        JUSTIFY_AUTO(0),
        /**
         * <code>JUSTIFY_LEFT = 1;</code>
         */
        JUSTIFY_LEFT(1),
        /**
         * <code>JUSTIFY_CENTER = 2;</code>
         */
        JUSTIFY_CENTER(2),
        /**
         * <code>JUSTIFY_RIGHT = 3;</code>
         */
        JUSTIFY_RIGHT(3),
        UNRECOGNIZED(-1),
        ;

        /**
         * <code>JUSTIFY_AUTO = 0;</code>
         */
        public static final int JUSTIFY_AUTO_VALUE = 0;
        /**
         * <code>JUSTIFY_LEFT = 1;</code>
         */
        public static final int JUSTIFY_LEFT_VALUE = 1;
        /**
         * <code>JUSTIFY_CENTER = 2;</code>
         */
        public static final int JUSTIFY_CENTER_VALUE = 2;
        /**
         * <code>JUSTIFY_RIGHT = 3;</code>
         */
        public static final int JUSTIFY_RIGHT_VALUE = 3;


        public final int getNumber() {
          if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalArgumentException(
                "Can't get the number of an unknown enum value.");
          }
          return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static TextJustify valueOf(int value) {
          return forNumber(value);
        }

        public static TextJustify forNumber(int value) {
          switch (value) {
            case 0: return JUSTIFY_AUTO;
            case 1: return JUSTIFY_LEFT;
            case 2: return JUSTIFY_CENTER;
            case 3: return JUSTIFY_RIGHT;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<TextJustify>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            TextJustify> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<TextJustify>() {
                public TextJustify findValueByNumber(int number) {
                  return TextJustify.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.getDescriptor().getEnumTypes().get(4);
        }

        private static final TextJustify[] VALUES = values();

        public static TextJustify valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          if (desc.getIndex() == -1) {
            return UNRECOGNIZED;
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private TextJustify(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:com.tophap.mapbox_gl.proto.Layer.Symbol.TextJustify)
      }

      /**
       * Protobuf enum {@code com.tophap.mapbox_gl.proto.Layer.Symbol.TextTransform}
       */
      public enum TextTransform
          implements com.google.protobuf.ProtocolMessageEnum {
        /**
         * <code>TRANSFORM_NONE = 0;</code>
         */
        TRANSFORM_NONE(0),
        /**
         * <code>TRANSFORM_UPPERCASE = 1;</code>
         */
        TRANSFORM_UPPERCASE(1),
        /**
         * <code>TRANSFORM_LOWERCASE = 2;</code>
         */
        TRANSFORM_LOWERCASE(2),
        UNRECOGNIZED(-1),
        ;

        /**
         * <code>TRANSFORM_NONE = 0;</code>
         */
        public static final int TRANSFORM_NONE_VALUE = 0;
        /**
         * <code>TRANSFORM_UPPERCASE = 1;</code>
         */
        public static final int TRANSFORM_UPPERCASE_VALUE = 1;
        /**
         * <code>TRANSFORM_LOWERCASE = 2;</code>
         */
        public static final int TRANSFORM_LOWERCASE_VALUE = 2;


        public final int getNumber() {
          if (this == UNRECOGNIZED) {
            throw new java.lang.IllegalArgumentException(
                "Can't get the number of an unknown enum value.");
          }
          return value;
        }

        /**
         * @deprecated Use {@link #forNumber(int)} instead.
         */
        @java.lang.Deprecated
        public static TextTransform valueOf(int value) {
          return forNumber(value);
        }

        public static TextTransform forNumber(int value) {
          switch (value) {
            case 0: return TRANSFORM_NONE;
            case 1: return TRANSFORM_UPPERCASE;
            case 2: return TRANSFORM_LOWERCASE;
            default: return null;
          }
        }

        public static com.google.protobuf.Internal.EnumLiteMap<TextTransform>
            internalGetValueMap() {
          return internalValueMap;
        }
        private static final com.google.protobuf.Internal.EnumLiteMap<
            TextTransform> internalValueMap =
              new com.google.protobuf.Internal.EnumLiteMap<TextTransform>() {
                public TextTransform findValueByNumber(int number) {
                  return TextTransform.forNumber(number);
                }
              };

        public final com.google.protobuf.Descriptors.EnumValueDescriptor
            getValueDescriptor() {
          return getDescriptor().getValues().get(ordinal());
        }
        public final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }
        public static final com.google.protobuf.Descriptors.EnumDescriptor
            getDescriptor() {
          return com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.getDescriptor().getEnumTypes().get(5);
        }

        private static final TextTransform[] VALUES = values();

        public static TextTransform valueOf(
            com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
          if (desc.getType() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "EnumValueDescriptor is not for this type.");
          }
          if (desc.getIndex() == -1) {
            return UNRECOGNIZED;
          }
          return VALUES[desc.getIndex()];
        }

        private final int value;

        private TextTransform(int value) {
          this.value = value;
        }

        // @@protoc_insertion_point(enum_scope:com.tophap.mapbox_gl.proto.Layer.Symbol.TextTransform)
      }

      private int bitField0_;
      private int bitField1_;
      public static final int ID_FIELD_NUMBER = 1;
      private volatile java.lang.Object id_;
      /**
       * <code>string id = 1;</code>
       */
      public java.lang.String getId() {
        java.lang.Object ref = id_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          id_ = s;
          return s;
        }
      }
      /**
       * <code>string id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = id_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          id_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int SOURCE_ID_FIELD_NUMBER = 2;
      private volatile java.lang.Object sourceId_;
      /**
       * <code>string source_id = 2;</code>
       */
      public java.lang.String getSourceId() {
        java.lang.Object ref = sourceId_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          sourceId_ = s;
          return s;
        }
      }
      /**
       * <code>string source_id = 2;</code>
       */
      public com.google.protobuf.ByteString
          getSourceIdBytes() {
        java.lang.Object ref = sourceId_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          sourceId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int VISIBLE_FIELD_NUMBER = 3;
      private boolean visible_;
      /**
       * <code>bool visible = 3;</code>
       */
      public boolean getVisible() {
        return visible_;
      }

      public static final int MIN_ZOOM_FIELD_NUMBER = 4;
      private float minZoom_;
      /**
       * <code>float min_zoom = 4;</code>
       */
      public float getMinZoom() {
        return minZoom_;
      }

      public static final int MAX_ZOOM_FIELD_NUMBER = 5;
      private float maxZoom_;
      /**
       * <code>float max_zoom = 5;</code>
       */
      public float getMaxZoom() {
        return maxZoom_;
      }

      public static final int SYMBOL_PLACEMENT_FIELD_NUMBER = 6;
      private int symbolPlacement_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Placement symbol_placement = 6;</code>
       */
      public int getSymbolPlacementValue() {
        return symbolPlacement_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Placement symbol_placement = 6;</code>
       */
      public com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Placement getSymbolPlacement() {
        @SuppressWarnings("deprecation")
        com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Placement result = com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Placement.valueOf(symbolPlacement_);
        return result == null ? com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Placement.UNRECOGNIZED : result;
      }

      public static final int SYMBOL_SPACING_FIELD_NUMBER = 7;
      private float symbolSpacing_;
      /**
       * <code>float symbol_spacing = 7;</code>
       */
      public float getSymbolSpacing() {
        return symbolSpacing_;
      }

      public static final int SYMBOL_AVOID_EDGES_FIELD_NUMBER = 8;
      private boolean symbolAvoidEdges_;
      /**
       * <code>bool symbol_avoid_edges = 8;</code>
       */
      public boolean getSymbolAvoidEdges() {
        return symbolAvoidEdges_;
      }

      public static final int SYMBOL_Z_ORDER_FIELD_NUMBER = 9;
      private int symbolZOrder_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.ZOrder symbol_z_order = 9;</code>
       */
      public int getSymbolZOrderValue() {
        return symbolZOrder_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.ZOrder symbol_z_order = 9;</code>
       */
      public com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.ZOrder getSymbolZOrder() {
        @SuppressWarnings("deprecation")
        com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.ZOrder result = com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.ZOrder.valueOf(symbolZOrder_);
        return result == null ? com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.ZOrder.UNRECOGNIZED : result;
      }

      public static final int ICON_ALLOW_OVERLAP_FIELD_NUMBER = 10;
      private boolean iconAllowOverlap_;
      /**
       * <code>bool icon_allow_overlap = 10;</code>
       */
      public boolean getIconAllowOverlap() {
        return iconAllowOverlap_;
      }

      public static final int ICON_IGNORE_PLACEMENT_FIELD_NUMBER = 11;
      private boolean iconIgnorePlacement_;
      /**
       * <code>bool icon_ignore_placement = 11;</code>
       */
      public boolean getIconIgnorePlacement() {
        return iconIgnorePlacement_;
      }

      public static final int ICON_OPTIONAL_FIELD_NUMBER = 12;
      private boolean iconOptional_;
      /**
       * <code>bool icon_optional = 12;</code>
       */
      public boolean getIconOptional() {
        return iconOptional_;
      }

      public static final int ICON_ROTATION_ALIGNMENT_FIELD_NUMBER = 13;
      private int iconRotationAlignment_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Alignment icon_rotation_alignment = 13;</code>
       */
      public int getIconRotationAlignmentValue() {
        return iconRotationAlignment_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Alignment icon_rotation_alignment = 13;</code>
       */
      public com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment getIconRotationAlignment() {
        @SuppressWarnings("deprecation")
        com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment result = com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment.valueOf(iconRotationAlignment_);
        return result == null ? com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment.UNRECOGNIZED : result;
      }

      public static final int ICON_SIZE_FIELD_NUMBER = 14;
      private float iconSize_;
      /**
       * <code>float icon_size = 14;</code>
       */
      public float getIconSize() {
        return iconSize_;
      }

      public static final int ICON_TEXT_FIT_FIELD_NUMBER = 15;
      private int iconTextFit_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.TextFit icon_text_fit = 15;</code>
       */
      public int getIconTextFitValue() {
        return iconTextFit_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.TextFit icon_text_fit = 15;</code>
       */
      public com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.TextFit getIconTextFit() {
        @SuppressWarnings("deprecation")
        com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.TextFit result = com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.TextFit.valueOf(iconTextFit_);
        return result == null ? com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.TextFit.UNRECOGNIZED : result;
      }

      public static final int ICON_TEXT_FIT_PADDING_FIELD_NUMBER = 16;
      private com.google.protobuf.Internal.FloatList iconTextFitPadding_;
      /**
       * <code>repeated float icon_text_fit_padding = 16;</code>
       */
      public java.util.List<java.lang.Float>
          getIconTextFitPaddingList() {
        return iconTextFitPadding_;
      }
      /**
       * <code>repeated float icon_text_fit_padding = 16;</code>
       */
      public int getIconTextFitPaddingCount() {
        return iconTextFitPadding_.size();
      }
      /**
       * <code>repeated float icon_text_fit_padding = 16;</code>
       */
      public float getIconTextFitPadding(int index) {
        return iconTextFitPadding_.getFloat(index);
      }
      private int iconTextFitPaddingMemoizedSerializedSize = -1;

      public static final int ICON_IMAGE_FIELD_NUMBER = 17;
      private volatile java.lang.Object iconImage_;
      /**
       * <code>string icon_image = 17;</code>
       */
      public java.lang.String getIconImage() {
        java.lang.Object ref = iconImage_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          iconImage_ = s;
          return s;
        }
      }
      /**
       * <code>string icon_image = 17;</code>
       */
      public com.google.protobuf.ByteString
          getIconImageBytes() {
        java.lang.Object ref = iconImage_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          iconImage_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int ICON_ROTATE_FIELD_NUMBER = 18;
      private float iconRotate_;
      /**
       * <code>float icon_rotate = 18;</code>
       */
      public float getIconRotate() {
        return iconRotate_;
      }

      public static final int ICON_PADDING_FIELD_NUMBER = 19;
      private float iconPadding_;
      /**
       * <code>float icon_padding = 19;</code>
       */
      public float getIconPadding() {
        return iconPadding_;
      }

      public static final int ICON_KEEP_UPRIGHT_FIELD_NUMBER = 20;
      private boolean iconKeepUpright_;
      /**
       * <code>bool icon_keep_upright = 20;</code>
       */
      public boolean getIconKeepUpright() {
        return iconKeepUpright_;
      }

      public static final int ICON_OFFSET_FIELD_NUMBER = 21;
      private com.google.protobuf.Internal.FloatList iconOffset_;
      /**
       * <code>repeated float icon_offset = 21;</code>
       */
      public java.util.List<java.lang.Float>
          getIconOffsetList() {
        return iconOffset_;
      }
      /**
       * <code>repeated float icon_offset = 21;</code>
       */
      public int getIconOffsetCount() {
        return iconOffset_.size();
      }
      /**
       * <code>repeated float icon_offset = 21;</code>
       */
      public float getIconOffset(int index) {
        return iconOffset_.getFloat(index);
      }
      private int iconOffsetMemoizedSerializedSize = -1;

      public static final int ICON_ANCHOR_FIELD_NUMBER = 22;
      private int iconAnchor_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.PositionAnchor icon_anchor = 22;</code>
       */
      public int getIconAnchorValue() {
        return iconAnchor_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.PositionAnchor icon_anchor = 22;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor getIconAnchor() {
        @SuppressWarnings("deprecation")
        com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor result = com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor.valueOf(iconAnchor_);
        return result == null ? com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor.UNRECOGNIZED : result;
      }

      public static final int ICON_PITCH_ALIGNMENT_FIELD_NUMBER = 23;
      private int iconPitchAlignment_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Alignment icon_pitch_alignment = 23;</code>
       */
      public int getIconPitchAlignmentValue() {
        return iconPitchAlignment_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Alignment icon_pitch_alignment = 23;</code>
       */
      public com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment getIconPitchAlignment() {
        @SuppressWarnings("deprecation")
        com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment result = com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment.valueOf(iconPitchAlignment_);
        return result == null ? com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment.UNRECOGNIZED : result;
      }

      public static final int TEXT_PITCH_ALIGNMENT_FIELD_NUMBER = 24;
      private int textPitchAlignment_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Alignment text_pitch_alignment = 24;</code>
       */
      public int getTextPitchAlignmentValue() {
        return textPitchAlignment_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Alignment text_pitch_alignment = 24;</code>
       */
      public com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment getTextPitchAlignment() {
        @SuppressWarnings("deprecation")
        com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment result = com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment.valueOf(textPitchAlignment_);
        return result == null ? com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment.UNRECOGNIZED : result;
      }

      public static final int TEXT_ROTATION_ALIGNMENT_FIELD_NUMBER = 25;
      private int textRotationAlignment_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Alignment text_rotation_alignment = 25;</code>
       */
      public int getTextRotationAlignmentValue() {
        return textRotationAlignment_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Alignment text_rotation_alignment = 25;</code>
       */
      public com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment getTextRotationAlignment() {
        @SuppressWarnings("deprecation")
        com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment result = com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment.valueOf(textRotationAlignment_);
        return result == null ? com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment.UNRECOGNIZED : result;
      }

      public static final int TEXT_FIELD_FIELD_NUMBER = 26;
      private java.util.List<com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSection> textField_;
      /**
       * <code>repeated .com.tophap.mapbox_gl.proto.FormattedSection text_field = 26;</code>
       */
      public java.util.List<com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSection> getTextFieldList() {
        return textField_;
      }
      /**
       * <code>repeated .com.tophap.mapbox_gl.proto.FormattedSection text_field = 26;</code>
       */
      public java.util.List<? extends com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSectionOrBuilder> 
          getTextFieldOrBuilderList() {
        return textField_;
      }
      /**
       * <code>repeated .com.tophap.mapbox_gl.proto.FormattedSection text_field = 26;</code>
       */
      public int getTextFieldCount() {
        return textField_.size();
      }
      /**
       * <code>repeated .com.tophap.mapbox_gl.proto.FormattedSection text_field = 26;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSection getTextField(int index) {
        return textField_.get(index);
      }
      /**
       * <code>repeated .com.tophap.mapbox_gl.proto.FormattedSection text_field = 26;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSectionOrBuilder getTextFieldOrBuilder(
          int index) {
        return textField_.get(index);
      }

      public static final int TEXT_FONT_FIELD_NUMBER = 27;
      private com.google.protobuf.LazyStringList textFont_;
      /**
       * <code>repeated string text_font = 27;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getTextFontList() {
        return textFont_;
      }
      /**
       * <code>repeated string text_font = 27;</code>
       */
      public int getTextFontCount() {
        return textFont_.size();
      }
      /**
       * <code>repeated string text_font = 27;</code>
       */
      public java.lang.String getTextFont(int index) {
        return textFont_.get(index);
      }
      /**
       * <code>repeated string text_font = 27;</code>
       */
      public com.google.protobuf.ByteString
          getTextFontBytes(int index) {
        return textFont_.getByteString(index);
      }

      public static final int TEXT_SIZE_FIELD_NUMBER = 28;
      private float textSize_;
      /**
       * <code>float text_size = 28;</code>
       */
      public float getTextSize() {
        return textSize_;
      }

      public static final int TEXT_MAX_WIDTH_FIELD_NUMBER = 29;
      private float textMaxWidth_;
      /**
       * <code>float text_max_width = 29;</code>
       */
      public float getTextMaxWidth() {
        return textMaxWidth_;
      }

      public static final int TEXT_LINE_HEIGHT_FIELD_NUMBER = 30;
      private float textLineHeight_;
      /**
       * <code>float text_line_height = 30;</code>
       */
      public float getTextLineHeight() {
        return textLineHeight_;
      }

      public static final int TEXT_LETTER_SPACING_FIELD_NUMBER = 31;
      private float textLetterSpacing_;
      /**
       * <code>float text_letter_spacing = 31;</code>
       */
      public float getTextLetterSpacing() {
        return textLetterSpacing_;
      }

      public static final int TEXT_JUSTIFY_FIELD_NUMBER = 32;
      private int textJustify_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.TextJustify text_justify = 32;</code>
       */
      public int getTextJustifyValue() {
        return textJustify_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.TextJustify text_justify = 32;</code>
       */
      public com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.TextJustify getTextJustify() {
        @SuppressWarnings("deprecation")
        com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.TextJustify result = com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.TextJustify.valueOf(textJustify_);
        return result == null ? com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.TextJustify.UNRECOGNIZED : result;
      }

      public static final int TEXT_RADIAL_OFFSET_FIELD_NUMBER = 33;
      private float textRadialOffset_;
      /**
       * <code>float text_radial_offset = 33;</code>
       */
      public float getTextRadialOffset() {
        return textRadialOffset_;
      }

      public static final int TEXT_VARIABLE_ANCHOR_FIELD_NUMBER = 34;
      private java.util.List<java.lang.Integer> textVariableAnchor_;
      private static final com.google.protobuf.Internal.ListAdapter.Converter<
          java.lang.Integer, com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor> textVariableAnchor_converter_ =
              new com.google.protobuf.Internal.ListAdapter.Converter<
                  java.lang.Integer, com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor>() {
                public com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor convert(java.lang.Integer from) {
                  @SuppressWarnings("deprecation")
                  com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor result = com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor.valueOf(from);
                  return result == null ? com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor.UNRECOGNIZED : result;
                }
              };
      /**
       * <code>repeated .com.tophap.mapbox_gl.proto.PositionAnchor text_variable_anchor = 34;</code>
       */
      public java.util.List<com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor> getTextVariableAnchorList() {
        return new com.google.protobuf.Internal.ListAdapter<
            java.lang.Integer, com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor>(textVariableAnchor_, textVariableAnchor_converter_);
      }
      /**
       * <code>repeated .com.tophap.mapbox_gl.proto.PositionAnchor text_variable_anchor = 34;</code>
       */
      public int getTextVariableAnchorCount() {
        return textVariableAnchor_.size();
      }
      /**
       * <code>repeated .com.tophap.mapbox_gl.proto.PositionAnchor text_variable_anchor = 34;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor getTextVariableAnchor(int index) {
        return textVariableAnchor_converter_.convert(textVariableAnchor_.get(index));
      }
      /**
       * <code>repeated .com.tophap.mapbox_gl.proto.PositionAnchor text_variable_anchor = 34;</code>
       */
      public java.util.List<java.lang.Integer>
      getTextVariableAnchorValueList() {
        return textVariableAnchor_;
      }
      /**
       * <code>repeated .com.tophap.mapbox_gl.proto.PositionAnchor text_variable_anchor = 34;</code>
       */
      public int getTextVariableAnchorValue(int index) {
        return textVariableAnchor_.get(index);
      }
      private int textVariableAnchorMemoizedSerializedSize;

      public static final int TEXT_ANCHOR_FIELD_NUMBER = 35;
      private int textAnchor_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.PositionAnchor text_anchor = 35;</code>
       */
      public int getTextAnchorValue() {
        return textAnchor_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.PositionAnchor text_anchor = 35;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor getTextAnchor() {
        @SuppressWarnings("deprecation")
        com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor result = com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor.valueOf(textAnchor_);
        return result == null ? com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor.UNRECOGNIZED : result;
      }

      public static final int TEXT_MAX_ANGLE_FIELD_NUMBER = 36;
      private float textMaxAngle_;
      /**
       * <code>float text_max_angle = 36;</code>
       */
      public float getTextMaxAngle() {
        return textMaxAngle_;
      }

      public static final int TEXT_ROTATE_FIELD_NUMBER = 37;
      private float textRotate_;
      /**
       * <code>float text_rotate = 37;</code>
       */
      public float getTextRotate() {
        return textRotate_;
      }

      public static final int TEXT_PADDING_FIELD_NUMBER = 38;
      private float textPadding_;
      /**
       * <code>float text_padding = 38;</code>
       */
      public float getTextPadding() {
        return textPadding_;
      }

      public static final int TEXT_KEEP_UPRIGHT_FIELD_NUMBER = 39;
      private boolean textKeepUpright_;
      /**
       * <code>bool text_keep_upright = 39;</code>
       */
      public boolean getTextKeepUpright() {
        return textKeepUpright_;
      }

      public static final int TEXT_TRANSFORM_FIELD_NUMBER = 40;
      private int textTransform_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.TextTransform text_transform = 40;</code>
       */
      public int getTextTransformValue() {
        return textTransform_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.TextTransform text_transform = 40;</code>
       */
      public com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.TextTransform getTextTransform() {
        @SuppressWarnings("deprecation")
        com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.TextTransform result = com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.TextTransform.valueOf(textTransform_);
        return result == null ? com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.TextTransform.UNRECOGNIZED : result;
      }

      public static final int TEXT_OFFSET_FIELD_NUMBER = 41;
      private com.google.protobuf.Internal.FloatList textOffset_;
      /**
       * <code>repeated float text_offset = 41;</code>
       */
      public java.util.List<java.lang.Float>
          getTextOffsetList() {
        return textOffset_;
      }
      /**
       * <code>repeated float text_offset = 41;</code>
       */
      public int getTextOffsetCount() {
        return textOffset_.size();
      }
      /**
       * <code>repeated float text_offset = 41;</code>
       */
      public float getTextOffset(int index) {
        return textOffset_.getFloat(index);
      }
      private int textOffsetMemoizedSerializedSize = -1;

      public static final int TEXT_ALLOW_OVERLAP_FIELD_NUMBER = 42;
      private boolean textAllowOverlap_;
      /**
       * <code>bool text_allow_overlap = 42;</code>
       */
      public boolean getTextAllowOverlap() {
        return textAllowOverlap_;
      }

      public static final int TEXT_IGNORE_PLACEMENT_FIELD_NUMBER = 43;
      private boolean textIgnorePlacement_;
      /**
       * <code>bool text_ignore_placement = 43;</code>
       */
      public boolean getTextIgnorePlacement() {
        return textIgnorePlacement_;
      }

      public static final int TEXT_OPTIONAL_FIELD_NUMBER = 44;
      private boolean textOptional_;
      /**
       * <code>bool text_optional = 44;</code>
       */
      public boolean getTextOptional() {
        return textOptional_;
      }

      public static final int ICON_COLOR_FIELD_NUMBER = 46;
      private com.tophap.mapbox_gl.proto.MapboxUtil.Color iconColor_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color icon_color = 46;</code>
       */
      public boolean hasIconColor() {
        return iconColor_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color icon_color = 46;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.Color getIconColor() {
        return iconColor_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : iconColor_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color icon_color = 46;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getIconColorOrBuilder() {
        return getIconColor();
      }

      public static final int ICON_HALO_COLOR_FIELD_NUMBER = 47;
      private com.tophap.mapbox_gl.proto.MapboxUtil.Color iconHaloColor_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color icon_halo_color = 47;</code>
       */
      public boolean hasIconHaloColor() {
        return iconHaloColor_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color icon_halo_color = 47;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.Color getIconHaloColor() {
        return iconHaloColor_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : iconHaloColor_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color icon_halo_color = 47;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getIconHaloColorOrBuilder() {
        return getIconHaloColor();
      }

      public static final int ICON_HALO_WIDTH_FIELD_NUMBER = 48;
      private float iconHaloWidth_;
      /**
       * <code>float icon_halo_width = 48;</code>
       */
      public float getIconHaloWidth() {
        return iconHaloWidth_;
      }

      public static final int ICON_HALO_BLUR_FIELD_NUMBER = 49;
      private float iconHaloBlur_;
      /**
       * <code>float icon_halo_blur = 49;</code>
       */
      public float getIconHaloBlur() {
        return iconHaloBlur_;
      }

      public static final int ICON_TRANSLATE_FIELD_NUMBER = 50;
      private com.google.protobuf.Internal.FloatList iconTranslate_;
      /**
       * <code>repeated float icon_translate = 50;</code>
       */
      public java.util.List<java.lang.Float>
          getIconTranslateList() {
        return iconTranslate_;
      }
      /**
       * <code>repeated float icon_translate = 50;</code>
       */
      public int getIconTranslateCount() {
        return iconTranslate_.size();
      }
      /**
       * <code>repeated float icon_translate = 50;</code>
       */
      public float getIconTranslate(int index) {
        return iconTranslate_.getFloat(index);
      }
      private int iconTranslateMemoizedSerializedSize = -1;

      public static final int ICON_TRANSLATE_ANCHOR_FIELD_NUMBER = 51;
      private int iconTranslateAnchor_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor icon_translate_anchor = 51;</code>
       */
      public int getIconTranslateAnchorValue() {
        return iconTranslateAnchor_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor icon_translate_anchor = 51;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor getIconTranslateAnchor() {
        @SuppressWarnings("deprecation")
        com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor result = com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.valueOf(iconTranslateAnchor_);
        return result == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.UNRECOGNIZED : result;
      }

      public static final int TEXT_COLOR_FIELD_NUMBER = 53;
      private com.tophap.mapbox_gl.proto.MapboxUtil.Color textColor_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color text_color = 53;</code>
       */
      public boolean hasTextColor() {
        return textColor_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color text_color = 53;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.Color getTextColor() {
        return textColor_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : textColor_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color text_color = 53;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getTextColorOrBuilder() {
        return getTextColor();
      }

      public static final int TEXT_HALO_COLOR_FIELD_NUMBER = 54;
      private com.tophap.mapbox_gl.proto.MapboxUtil.Color textHaloColor_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color text_halo_color = 54;</code>
       */
      public boolean hasTextHaloColor() {
        return textHaloColor_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color text_halo_color = 54;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.Color getTextHaloColor() {
        return textHaloColor_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : textHaloColor_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Color text_halo_color = 54;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getTextHaloColorOrBuilder() {
        return getTextHaloColor();
      }

      public static final int TEXT_HALO_WIDTH_FIELD_NUMBER = 55;
      private float textHaloWidth_;
      /**
       * <code>float text_halo_width = 55;</code>
       */
      public float getTextHaloWidth() {
        return textHaloWidth_;
      }

      public static final int TEXT_HALO_BLUR_FIELD_NUMBER = 56;
      private float textHaloBlur_;
      /**
       * <code>float text_halo_blur = 56;</code>
       */
      public float getTextHaloBlur() {
        return textHaloBlur_;
      }

      public static final int TEXT_TRANSLATE_FIELD_NUMBER = 57;
      private com.google.protobuf.Internal.FloatList textTranslate_;
      /**
       * <code>repeated float text_translate = 57;</code>
       */
      public java.util.List<java.lang.Float>
          getTextTranslateList() {
        return textTranslate_;
      }
      /**
       * <code>repeated float text_translate = 57;</code>
       */
      public int getTextTranslateCount() {
        return textTranslate_.size();
      }
      /**
       * <code>repeated float text_translate = 57;</code>
       */
      public float getTextTranslate(int index) {
        return textTranslate_.getFloat(index);
      }
      private int textTranslateMemoizedSerializedSize = -1;

      public static final int TEXT_TRANSLATE_ANCHOR_FIELD_NUMBER = 58;
      private int textTranslateAnchor_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor text_translate_anchor = 58;</code>
       */
      public int getTextTranslateAnchorValue() {
        return textTranslateAnchor_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor text_translate_anchor = 58;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor getTextTranslateAnchor() {
        @SuppressWarnings("deprecation")
        com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor result = com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.valueOf(textTranslateAnchor_);
        return result == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.UNRECOGNIZED : result;
      }

      public static final int ICON_OPACITY_TRANSITION_FIELD_NUMBER = 59;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions iconOpacityTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_opacity_transition = 59;</code>
       */
      public boolean hasIconOpacityTransition() {
        return iconOpacityTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_opacity_transition = 59;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getIconOpacityTransition() {
        return iconOpacityTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : iconOpacityTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_opacity_transition = 59;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getIconOpacityTransitionOrBuilder() {
        return getIconOpacityTransition();
      }

      public static final int ICON_COLOR_TRANSITION_FIELD_NUMBER = 60;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions iconColorTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_color_transition = 60;</code>
       */
      public boolean hasIconColorTransition() {
        return iconColorTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_color_transition = 60;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getIconColorTransition() {
        return iconColorTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : iconColorTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_color_transition = 60;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getIconColorTransitionOrBuilder() {
        return getIconColorTransition();
      }

      public static final int ICON_HALO_COLOR_TRANSITION_FIELD_NUMBER = 61;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions iconHaloColorTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_color_transition = 61;</code>
       */
      public boolean hasIconHaloColorTransition() {
        return iconHaloColorTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_color_transition = 61;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getIconHaloColorTransition() {
        return iconHaloColorTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : iconHaloColorTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_color_transition = 61;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getIconHaloColorTransitionOrBuilder() {
        return getIconHaloColorTransition();
      }

      public static final int ICON_HALO_WIDTH_TRANSITION_FIELD_NUMBER = 62;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions iconHaloWidthTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_width_transition = 62;</code>
       */
      public boolean hasIconHaloWidthTransition() {
        return iconHaloWidthTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_width_transition = 62;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getIconHaloWidthTransition() {
        return iconHaloWidthTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : iconHaloWidthTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_width_transition = 62;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getIconHaloWidthTransitionOrBuilder() {
        return getIconHaloWidthTransition();
      }

      public static final int ICON_HALO_BLUR_TRANSITION_FIELD_NUMBER = 63;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions iconHaloBlurTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_blur_transition = 63;</code>
       */
      public boolean hasIconHaloBlurTransition() {
        return iconHaloBlurTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_blur_transition = 63;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getIconHaloBlurTransition() {
        return iconHaloBlurTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : iconHaloBlurTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_blur_transition = 63;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getIconHaloBlurTransitionOrBuilder() {
        return getIconHaloBlurTransition();
      }

      public static final int ICON_TRANSLATE_TRANSITION_FIELD_NUMBER = 64;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions iconTranslateTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_translate_transition = 64;</code>
       */
      public boolean hasIconTranslateTransition() {
        return iconTranslateTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_translate_transition = 64;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getIconTranslateTransition() {
        return iconTranslateTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : iconTranslateTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_translate_transition = 64;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getIconTranslateTransitionOrBuilder() {
        return getIconTranslateTransition();
      }

      public static final int TEXT_OPACITY_TRANSITION_FIELD_NUMBER = 65;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions textOpacityTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_opacity_transition = 65;</code>
       */
      public boolean hasTextOpacityTransition() {
        return textOpacityTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_opacity_transition = 65;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getTextOpacityTransition() {
        return textOpacityTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : textOpacityTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_opacity_transition = 65;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getTextOpacityTransitionOrBuilder() {
        return getTextOpacityTransition();
      }

      public static final int TEXT_COLOR_TRANSITION_FIELD_NUMBER = 66;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions textColorTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_color_transition = 66;</code>
       */
      public boolean hasTextColorTransition() {
        return textColorTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_color_transition = 66;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getTextColorTransition() {
        return textColorTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : textColorTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_color_transition = 66;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getTextColorTransitionOrBuilder() {
        return getTextColorTransition();
      }

      public static final int TEXT_HALO_COLOR_TRANSITION_FIELD_NUMBER = 67;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions textHaloColorTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_color_transition = 67;</code>
       */
      public boolean hasTextHaloColorTransition() {
        return textHaloColorTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_color_transition = 67;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getTextHaloColorTransition() {
        return textHaloColorTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : textHaloColorTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_color_transition = 67;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getTextHaloColorTransitionOrBuilder() {
        return getTextHaloColorTransition();
      }

      public static final int TEXT_HALO_WIDTH_TRANSITION_FIELD_NUMBER = 68;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions textHaloWidthTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_width_transition = 68;</code>
       */
      public boolean hasTextHaloWidthTransition() {
        return textHaloWidthTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_width_transition = 68;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getTextHaloWidthTransition() {
        return textHaloWidthTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : textHaloWidthTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_width_transition = 68;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getTextHaloWidthTransitionOrBuilder() {
        return getTextHaloWidthTransition();
      }

      public static final int TEXT_HALO_BLUR_TRANSITION_FIELD_NUMBER = 69;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions textHaloBlurTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_blur_transition = 69;</code>
       */
      public boolean hasTextHaloBlurTransition() {
        return textHaloBlurTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_blur_transition = 69;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getTextHaloBlurTransition() {
        return textHaloBlurTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : textHaloBlurTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_blur_transition = 69;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getTextHaloBlurTransitionOrBuilder() {
        return getTextHaloBlurTransition();
      }

      public static final int TEXT_TRANSLATE_TRANSITION_FIELD_NUMBER = 70;
      private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions textTranslateTransition_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_translate_transition = 70;</code>
       */
      public boolean hasTextTranslateTransition() {
        return textTranslateTransition_ != null;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_translate_transition = 70;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getTextTranslateTransition() {
        return textTranslateTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : textTranslateTransition_;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_translate_transition = 70;</code>
       */
      public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getTextTranslateTransitionOrBuilder() {
        return getTextTranslateTransition();
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (!getIdBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, id_);
        }
        if (!getSourceIdBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, sourceId_);
        }
        if (visible_ != false) {
          output.writeBool(3, visible_);
        }
        if (minZoom_ != 0F) {
          output.writeFloat(4, minZoom_);
        }
        if (maxZoom_ != 0F) {
          output.writeFloat(5, maxZoom_);
        }
        if (symbolPlacement_ != com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Placement.PLACEMENT_POINT.getNumber()) {
          output.writeEnum(6, symbolPlacement_);
        }
        if (symbolSpacing_ != 0F) {
          output.writeFloat(7, symbolSpacing_);
        }
        if (symbolAvoidEdges_ != false) {
          output.writeBool(8, symbolAvoidEdges_);
        }
        if (symbolZOrder_ != com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.ZOrder.Z_ORDER_AUTO.getNumber()) {
          output.writeEnum(9, symbolZOrder_);
        }
        if (iconAllowOverlap_ != false) {
          output.writeBool(10, iconAllowOverlap_);
        }
        if (iconIgnorePlacement_ != false) {
          output.writeBool(11, iconIgnorePlacement_);
        }
        if (iconOptional_ != false) {
          output.writeBool(12, iconOptional_);
        }
        if (iconRotationAlignment_ != com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment.ALIGNMENT_AUTO.getNumber()) {
          output.writeEnum(13, iconRotationAlignment_);
        }
        if (iconSize_ != 0F) {
          output.writeFloat(14, iconSize_);
        }
        if (iconTextFit_ != com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.TextFit.TEXT_FIT_NONE.getNumber()) {
          output.writeEnum(15, iconTextFit_);
        }
        if (getIconTextFitPaddingList().size() > 0) {
          output.writeUInt32NoTag(130);
          output.writeUInt32NoTag(iconTextFitPaddingMemoizedSerializedSize);
        }
        for (int i = 0; i < iconTextFitPadding_.size(); i++) {
          output.writeFloatNoTag(iconTextFitPadding_.getFloat(i));
        }
        if (!getIconImageBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 17, iconImage_);
        }
        if (iconRotate_ != 0F) {
          output.writeFloat(18, iconRotate_);
        }
        if (iconPadding_ != 0F) {
          output.writeFloat(19, iconPadding_);
        }
        if (iconKeepUpright_ != false) {
          output.writeBool(20, iconKeepUpright_);
        }
        if (getIconOffsetList().size() > 0) {
          output.writeUInt32NoTag(170);
          output.writeUInt32NoTag(iconOffsetMemoizedSerializedSize);
        }
        for (int i = 0; i < iconOffset_.size(); i++) {
          output.writeFloatNoTag(iconOffset_.getFloat(i));
        }
        if (iconAnchor_ != com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor.POSITION_CENTER.getNumber()) {
          output.writeEnum(22, iconAnchor_);
        }
        if (iconPitchAlignment_ != com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment.ALIGNMENT_AUTO.getNumber()) {
          output.writeEnum(23, iconPitchAlignment_);
        }
        if (textPitchAlignment_ != com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment.ALIGNMENT_AUTO.getNumber()) {
          output.writeEnum(24, textPitchAlignment_);
        }
        if (textRotationAlignment_ != com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment.ALIGNMENT_AUTO.getNumber()) {
          output.writeEnum(25, textRotationAlignment_);
        }
        for (int i = 0; i < textField_.size(); i++) {
          output.writeMessage(26, textField_.get(i));
        }
        for (int i = 0; i < textFont_.size(); i++) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 27, textFont_.getRaw(i));
        }
        if (textSize_ != 0F) {
          output.writeFloat(28, textSize_);
        }
        if (textMaxWidth_ != 0F) {
          output.writeFloat(29, textMaxWidth_);
        }
        if (textLineHeight_ != 0F) {
          output.writeFloat(30, textLineHeight_);
        }
        if (textLetterSpacing_ != 0F) {
          output.writeFloat(31, textLetterSpacing_);
        }
        if (textJustify_ != com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.TextJustify.JUSTIFY_AUTO.getNumber()) {
          output.writeEnum(32, textJustify_);
        }
        if (textRadialOffset_ != 0F) {
          output.writeFloat(33, textRadialOffset_);
        }
        if (getTextVariableAnchorList().size() > 0) {
          output.writeUInt32NoTag(274);
          output.writeUInt32NoTag(textVariableAnchorMemoizedSerializedSize);
        }
        for (int i = 0; i < textVariableAnchor_.size(); i++) {
          output.writeEnumNoTag(textVariableAnchor_.get(i));
        }
        if (textAnchor_ != com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor.POSITION_CENTER.getNumber()) {
          output.writeEnum(35, textAnchor_);
        }
        if (textMaxAngle_ != 0F) {
          output.writeFloat(36, textMaxAngle_);
        }
        if (textRotate_ != 0F) {
          output.writeFloat(37, textRotate_);
        }
        if (textPadding_ != 0F) {
          output.writeFloat(38, textPadding_);
        }
        if (textKeepUpright_ != false) {
          output.writeBool(39, textKeepUpright_);
        }
        if (textTransform_ != com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.TextTransform.TRANSFORM_NONE.getNumber()) {
          output.writeEnum(40, textTransform_);
        }
        if (getTextOffsetList().size() > 0) {
          output.writeUInt32NoTag(330);
          output.writeUInt32NoTag(textOffsetMemoizedSerializedSize);
        }
        for (int i = 0; i < textOffset_.size(); i++) {
          output.writeFloatNoTag(textOffset_.getFloat(i));
        }
        if (textAllowOverlap_ != false) {
          output.writeBool(42, textAllowOverlap_);
        }
        if (textIgnorePlacement_ != false) {
          output.writeBool(43, textIgnorePlacement_);
        }
        if (textOptional_ != false) {
          output.writeBool(44, textOptional_);
        }
        if (iconColor_ != null) {
          output.writeMessage(46, getIconColor());
        }
        if (iconHaloColor_ != null) {
          output.writeMessage(47, getIconHaloColor());
        }
        if (iconHaloWidth_ != 0F) {
          output.writeFloat(48, iconHaloWidth_);
        }
        if (iconHaloBlur_ != 0F) {
          output.writeFloat(49, iconHaloBlur_);
        }
        if (getIconTranslateList().size() > 0) {
          output.writeUInt32NoTag(402);
          output.writeUInt32NoTag(iconTranslateMemoizedSerializedSize);
        }
        for (int i = 0; i < iconTranslate_.size(); i++) {
          output.writeFloatNoTag(iconTranslate_.getFloat(i));
        }
        if (iconTranslateAnchor_ != com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.MAP.getNumber()) {
          output.writeEnum(51, iconTranslateAnchor_);
        }
        if (textColor_ != null) {
          output.writeMessage(53, getTextColor());
        }
        if (textHaloColor_ != null) {
          output.writeMessage(54, getTextHaloColor());
        }
        if (textHaloWidth_ != 0F) {
          output.writeFloat(55, textHaloWidth_);
        }
        if (textHaloBlur_ != 0F) {
          output.writeFloat(56, textHaloBlur_);
        }
        if (getTextTranslateList().size() > 0) {
          output.writeUInt32NoTag(458);
          output.writeUInt32NoTag(textTranslateMemoizedSerializedSize);
        }
        for (int i = 0; i < textTranslate_.size(); i++) {
          output.writeFloatNoTag(textTranslate_.getFloat(i));
        }
        if (textTranslateAnchor_ != com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.MAP.getNumber()) {
          output.writeEnum(58, textTranslateAnchor_);
        }
        if (iconOpacityTransition_ != null) {
          output.writeMessage(59, getIconOpacityTransition());
        }
        if (iconColorTransition_ != null) {
          output.writeMessage(60, getIconColorTransition());
        }
        if (iconHaloColorTransition_ != null) {
          output.writeMessage(61, getIconHaloColorTransition());
        }
        if (iconHaloWidthTransition_ != null) {
          output.writeMessage(62, getIconHaloWidthTransition());
        }
        if (iconHaloBlurTransition_ != null) {
          output.writeMessage(63, getIconHaloBlurTransition());
        }
        if (iconTranslateTransition_ != null) {
          output.writeMessage(64, getIconTranslateTransition());
        }
        if (textOpacityTransition_ != null) {
          output.writeMessage(65, getTextOpacityTransition());
        }
        if (textColorTransition_ != null) {
          output.writeMessage(66, getTextColorTransition());
        }
        if (textHaloColorTransition_ != null) {
          output.writeMessage(67, getTextHaloColorTransition());
        }
        if (textHaloWidthTransition_ != null) {
          output.writeMessage(68, getTextHaloWidthTransition());
        }
        if (textHaloBlurTransition_ != null) {
          output.writeMessage(69, getTextHaloBlurTransition());
        }
        if (textTranslateTransition_ != null) {
          output.writeMessage(70, getTextTranslateTransition());
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!getIdBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, id_);
        }
        if (!getSourceIdBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, sourceId_);
        }
        if (visible_ != false) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(3, visible_);
        }
        if (minZoom_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(4, minZoom_);
        }
        if (maxZoom_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(5, maxZoom_);
        }
        if (symbolPlacement_ != com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Placement.PLACEMENT_POINT.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(6, symbolPlacement_);
        }
        if (symbolSpacing_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(7, symbolSpacing_);
        }
        if (symbolAvoidEdges_ != false) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(8, symbolAvoidEdges_);
        }
        if (symbolZOrder_ != com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.ZOrder.Z_ORDER_AUTO.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(9, symbolZOrder_);
        }
        if (iconAllowOverlap_ != false) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(10, iconAllowOverlap_);
        }
        if (iconIgnorePlacement_ != false) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(11, iconIgnorePlacement_);
        }
        if (iconOptional_ != false) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(12, iconOptional_);
        }
        if (iconRotationAlignment_ != com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment.ALIGNMENT_AUTO.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(13, iconRotationAlignment_);
        }
        if (iconSize_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(14, iconSize_);
        }
        if (iconTextFit_ != com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.TextFit.TEXT_FIT_NONE.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(15, iconTextFit_);
        }
        {
          int dataSize = 0;
          dataSize = 4 * getIconTextFitPaddingList().size();
          size += dataSize;
          if (!getIconTextFitPaddingList().isEmpty()) {
            size += 2;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          iconTextFitPaddingMemoizedSerializedSize = dataSize;
        }
        if (!getIconImageBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(17, iconImage_);
        }
        if (iconRotate_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(18, iconRotate_);
        }
        if (iconPadding_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(19, iconPadding_);
        }
        if (iconKeepUpright_ != false) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(20, iconKeepUpright_);
        }
        {
          int dataSize = 0;
          dataSize = 4 * getIconOffsetList().size();
          size += dataSize;
          if (!getIconOffsetList().isEmpty()) {
            size += 2;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          iconOffsetMemoizedSerializedSize = dataSize;
        }
        if (iconAnchor_ != com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor.POSITION_CENTER.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(22, iconAnchor_);
        }
        if (iconPitchAlignment_ != com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment.ALIGNMENT_AUTO.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(23, iconPitchAlignment_);
        }
        if (textPitchAlignment_ != com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment.ALIGNMENT_AUTO.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(24, textPitchAlignment_);
        }
        if (textRotationAlignment_ != com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment.ALIGNMENT_AUTO.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(25, textRotationAlignment_);
        }
        for (int i = 0; i < textField_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(26, textField_.get(i));
        }
        {
          int dataSize = 0;
          for (int i = 0; i < textFont_.size(); i++) {
            dataSize += computeStringSizeNoTag(textFont_.getRaw(i));
          }
          size += dataSize;
          size += 2 * getTextFontList().size();
        }
        if (textSize_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(28, textSize_);
        }
        if (textMaxWidth_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(29, textMaxWidth_);
        }
        if (textLineHeight_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(30, textLineHeight_);
        }
        if (textLetterSpacing_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(31, textLetterSpacing_);
        }
        if (textJustify_ != com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.TextJustify.JUSTIFY_AUTO.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(32, textJustify_);
        }
        if (textRadialOffset_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(33, textRadialOffset_);
        }
        {
          int dataSize = 0;
          for (int i = 0; i < textVariableAnchor_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeEnumSizeNoTag(textVariableAnchor_.get(i));
          }
          size += dataSize;
          if (!getTextVariableAnchorList().isEmpty()) {  size += 2;
            size += com.google.protobuf.CodedOutputStream
              .computeUInt32SizeNoTag(dataSize);
          }textVariableAnchorMemoizedSerializedSize = dataSize;
        }
        if (textAnchor_ != com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor.POSITION_CENTER.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(35, textAnchor_);
        }
        if (textMaxAngle_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(36, textMaxAngle_);
        }
        if (textRotate_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(37, textRotate_);
        }
        if (textPadding_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(38, textPadding_);
        }
        if (textKeepUpright_ != false) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(39, textKeepUpright_);
        }
        if (textTransform_ != com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.TextTransform.TRANSFORM_NONE.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(40, textTransform_);
        }
        {
          int dataSize = 0;
          dataSize = 4 * getTextOffsetList().size();
          size += dataSize;
          if (!getTextOffsetList().isEmpty()) {
            size += 2;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          textOffsetMemoizedSerializedSize = dataSize;
        }
        if (textAllowOverlap_ != false) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(42, textAllowOverlap_);
        }
        if (textIgnorePlacement_ != false) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(43, textIgnorePlacement_);
        }
        if (textOptional_ != false) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(44, textOptional_);
        }
        if (iconColor_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(46, getIconColor());
        }
        if (iconHaloColor_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(47, getIconHaloColor());
        }
        if (iconHaloWidth_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(48, iconHaloWidth_);
        }
        if (iconHaloBlur_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(49, iconHaloBlur_);
        }
        {
          int dataSize = 0;
          dataSize = 4 * getIconTranslateList().size();
          size += dataSize;
          if (!getIconTranslateList().isEmpty()) {
            size += 2;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          iconTranslateMemoizedSerializedSize = dataSize;
        }
        if (iconTranslateAnchor_ != com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.MAP.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(51, iconTranslateAnchor_);
        }
        if (textColor_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(53, getTextColor());
        }
        if (textHaloColor_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(54, getTextHaloColor());
        }
        if (textHaloWidth_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(55, textHaloWidth_);
        }
        if (textHaloBlur_ != 0F) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(56, textHaloBlur_);
        }
        {
          int dataSize = 0;
          dataSize = 4 * getTextTranslateList().size();
          size += dataSize;
          if (!getTextTranslateList().isEmpty()) {
            size += 2;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          textTranslateMemoizedSerializedSize = dataSize;
        }
        if (textTranslateAnchor_ != com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.MAP.getNumber()) {
          size += com.google.protobuf.CodedOutputStream
            .computeEnumSize(58, textTranslateAnchor_);
        }
        if (iconOpacityTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(59, getIconOpacityTransition());
        }
        if (iconColorTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(60, getIconColorTransition());
        }
        if (iconHaloColorTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(61, getIconHaloColorTransition());
        }
        if (iconHaloWidthTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(62, getIconHaloWidthTransition());
        }
        if (iconHaloBlurTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(63, getIconHaloBlurTransition());
        }
        if (iconTranslateTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(64, getIconTranslateTransition());
        }
        if (textOpacityTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(65, getTextOpacityTransition());
        }
        if (textColorTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(66, getTextColorTransition());
        }
        if (textHaloColorTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(67, getTextHaloColorTransition());
        }
        if (textHaloWidthTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(68, getTextHaloWidthTransition());
        }
        if (textHaloBlurTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(69, getTextHaloBlurTransition());
        }
        if (textTranslateTransition_ != null) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(70, getTextTranslateTransition());
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.tophap.mapbox_gl.proto.Layers.Layer.Symbol)) {
          return super.equals(obj);
        }
        com.tophap.mapbox_gl.proto.Layers.Layer.Symbol other = (com.tophap.mapbox_gl.proto.Layers.Layer.Symbol) obj;

        if (!getId()
            .equals(other.getId())) return false;
        if (!getSourceId()
            .equals(other.getSourceId())) return false;
        if (getVisible()
            != other.getVisible()) return false;
        if (java.lang.Float.floatToIntBits(getMinZoom())
            != java.lang.Float.floatToIntBits(
                other.getMinZoom())) return false;
        if (java.lang.Float.floatToIntBits(getMaxZoom())
            != java.lang.Float.floatToIntBits(
                other.getMaxZoom())) return false;
        if (symbolPlacement_ != other.symbolPlacement_) return false;
        if (java.lang.Float.floatToIntBits(getSymbolSpacing())
            != java.lang.Float.floatToIntBits(
                other.getSymbolSpacing())) return false;
        if (getSymbolAvoidEdges()
            != other.getSymbolAvoidEdges()) return false;
        if (symbolZOrder_ != other.symbolZOrder_) return false;
        if (getIconAllowOverlap()
            != other.getIconAllowOverlap()) return false;
        if (getIconIgnorePlacement()
            != other.getIconIgnorePlacement()) return false;
        if (getIconOptional()
            != other.getIconOptional()) return false;
        if (iconRotationAlignment_ != other.iconRotationAlignment_) return false;
        if (java.lang.Float.floatToIntBits(getIconSize())
            != java.lang.Float.floatToIntBits(
                other.getIconSize())) return false;
        if (iconTextFit_ != other.iconTextFit_) return false;
        if (!getIconTextFitPaddingList()
            .equals(other.getIconTextFitPaddingList())) return false;
        if (!getIconImage()
            .equals(other.getIconImage())) return false;
        if (java.lang.Float.floatToIntBits(getIconRotate())
            != java.lang.Float.floatToIntBits(
                other.getIconRotate())) return false;
        if (java.lang.Float.floatToIntBits(getIconPadding())
            != java.lang.Float.floatToIntBits(
                other.getIconPadding())) return false;
        if (getIconKeepUpright()
            != other.getIconKeepUpright()) return false;
        if (!getIconOffsetList()
            .equals(other.getIconOffsetList())) return false;
        if (iconAnchor_ != other.iconAnchor_) return false;
        if (iconPitchAlignment_ != other.iconPitchAlignment_) return false;
        if (textPitchAlignment_ != other.textPitchAlignment_) return false;
        if (textRotationAlignment_ != other.textRotationAlignment_) return false;
        if (!getTextFieldList()
            .equals(other.getTextFieldList())) return false;
        if (!getTextFontList()
            .equals(other.getTextFontList())) return false;
        if (java.lang.Float.floatToIntBits(getTextSize())
            != java.lang.Float.floatToIntBits(
                other.getTextSize())) return false;
        if (java.lang.Float.floatToIntBits(getTextMaxWidth())
            != java.lang.Float.floatToIntBits(
                other.getTextMaxWidth())) return false;
        if (java.lang.Float.floatToIntBits(getTextLineHeight())
            != java.lang.Float.floatToIntBits(
                other.getTextLineHeight())) return false;
        if (java.lang.Float.floatToIntBits(getTextLetterSpacing())
            != java.lang.Float.floatToIntBits(
                other.getTextLetterSpacing())) return false;
        if (textJustify_ != other.textJustify_) return false;
        if (java.lang.Float.floatToIntBits(getTextRadialOffset())
            != java.lang.Float.floatToIntBits(
                other.getTextRadialOffset())) return false;
        if (!textVariableAnchor_.equals(other.textVariableAnchor_)) return false;
        if (textAnchor_ != other.textAnchor_) return false;
        if (java.lang.Float.floatToIntBits(getTextMaxAngle())
            != java.lang.Float.floatToIntBits(
                other.getTextMaxAngle())) return false;
        if (java.lang.Float.floatToIntBits(getTextRotate())
            != java.lang.Float.floatToIntBits(
                other.getTextRotate())) return false;
        if (java.lang.Float.floatToIntBits(getTextPadding())
            != java.lang.Float.floatToIntBits(
                other.getTextPadding())) return false;
        if (getTextKeepUpright()
            != other.getTextKeepUpright()) return false;
        if (textTransform_ != other.textTransform_) return false;
        if (!getTextOffsetList()
            .equals(other.getTextOffsetList())) return false;
        if (getTextAllowOverlap()
            != other.getTextAllowOverlap()) return false;
        if (getTextIgnorePlacement()
            != other.getTextIgnorePlacement()) return false;
        if (getTextOptional()
            != other.getTextOptional()) return false;
        if (hasIconColor() != other.hasIconColor()) return false;
        if (hasIconColor()) {
          if (!getIconColor()
              .equals(other.getIconColor())) return false;
        }
        if (hasIconHaloColor() != other.hasIconHaloColor()) return false;
        if (hasIconHaloColor()) {
          if (!getIconHaloColor()
              .equals(other.getIconHaloColor())) return false;
        }
        if (java.lang.Float.floatToIntBits(getIconHaloWidth())
            != java.lang.Float.floatToIntBits(
                other.getIconHaloWidth())) return false;
        if (java.lang.Float.floatToIntBits(getIconHaloBlur())
            != java.lang.Float.floatToIntBits(
                other.getIconHaloBlur())) return false;
        if (!getIconTranslateList()
            .equals(other.getIconTranslateList())) return false;
        if (iconTranslateAnchor_ != other.iconTranslateAnchor_) return false;
        if (hasTextColor() != other.hasTextColor()) return false;
        if (hasTextColor()) {
          if (!getTextColor()
              .equals(other.getTextColor())) return false;
        }
        if (hasTextHaloColor() != other.hasTextHaloColor()) return false;
        if (hasTextHaloColor()) {
          if (!getTextHaloColor()
              .equals(other.getTextHaloColor())) return false;
        }
        if (java.lang.Float.floatToIntBits(getTextHaloWidth())
            != java.lang.Float.floatToIntBits(
                other.getTextHaloWidth())) return false;
        if (java.lang.Float.floatToIntBits(getTextHaloBlur())
            != java.lang.Float.floatToIntBits(
                other.getTextHaloBlur())) return false;
        if (!getTextTranslateList()
            .equals(other.getTextTranslateList())) return false;
        if (textTranslateAnchor_ != other.textTranslateAnchor_) return false;
        if (hasIconOpacityTransition() != other.hasIconOpacityTransition()) return false;
        if (hasIconOpacityTransition()) {
          if (!getIconOpacityTransition()
              .equals(other.getIconOpacityTransition())) return false;
        }
        if (hasIconColorTransition() != other.hasIconColorTransition()) return false;
        if (hasIconColorTransition()) {
          if (!getIconColorTransition()
              .equals(other.getIconColorTransition())) return false;
        }
        if (hasIconHaloColorTransition() != other.hasIconHaloColorTransition()) return false;
        if (hasIconHaloColorTransition()) {
          if (!getIconHaloColorTransition()
              .equals(other.getIconHaloColorTransition())) return false;
        }
        if (hasIconHaloWidthTransition() != other.hasIconHaloWidthTransition()) return false;
        if (hasIconHaloWidthTransition()) {
          if (!getIconHaloWidthTransition()
              .equals(other.getIconHaloWidthTransition())) return false;
        }
        if (hasIconHaloBlurTransition() != other.hasIconHaloBlurTransition()) return false;
        if (hasIconHaloBlurTransition()) {
          if (!getIconHaloBlurTransition()
              .equals(other.getIconHaloBlurTransition())) return false;
        }
        if (hasIconTranslateTransition() != other.hasIconTranslateTransition()) return false;
        if (hasIconTranslateTransition()) {
          if (!getIconTranslateTransition()
              .equals(other.getIconTranslateTransition())) return false;
        }
        if (hasTextOpacityTransition() != other.hasTextOpacityTransition()) return false;
        if (hasTextOpacityTransition()) {
          if (!getTextOpacityTransition()
              .equals(other.getTextOpacityTransition())) return false;
        }
        if (hasTextColorTransition() != other.hasTextColorTransition()) return false;
        if (hasTextColorTransition()) {
          if (!getTextColorTransition()
              .equals(other.getTextColorTransition())) return false;
        }
        if (hasTextHaloColorTransition() != other.hasTextHaloColorTransition()) return false;
        if (hasTextHaloColorTransition()) {
          if (!getTextHaloColorTransition()
              .equals(other.getTextHaloColorTransition())) return false;
        }
        if (hasTextHaloWidthTransition() != other.hasTextHaloWidthTransition()) return false;
        if (hasTextHaloWidthTransition()) {
          if (!getTextHaloWidthTransition()
              .equals(other.getTextHaloWidthTransition())) return false;
        }
        if (hasTextHaloBlurTransition() != other.hasTextHaloBlurTransition()) return false;
        if (hasTextHaloBlurTransition()) {
          if (!getTextHaloBlurTransition()
              .equals(other.getTextHaloBlurTransition())) return false;
        }
        if (hasTextTranslateTransition() != other.hasTextTranslateTransition()) return false;
        if (hasTextTranslateTransition()) {
          if (!getTextTranslateTransition()
              .equals(other.getTextTranslateTransition())) return false;
        }
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + ID_FIELD_NUMBER;
        hash = (53 * hash) + getId().hashCode();
        hash = (37 * hash) + SOURCE_ID_FIELD_NUMBER;
        hash = (53 * hash) + getSourceId().hashCode();
        hash = (37 * hash) + VISIBLE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getVisible());
        hash = (37 * hash) + MIN_ZOOM_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMinZoom());
        hash = (37 * hash) + MAX_ZOOM_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getMaxZoom());
        hash = (37 * hash) + SYMBOL_PLACEMENT_FIELD_NUMBER;
        hash = (53 * hash) + symbolPlacement_;
        hash = (37 * hash) + SYMBOL_SPACING_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getSymbolSpacing());
        hash = (37 * hash) + SYMBOL_AVOID_EDGES_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getSymbolAvoidEdges());
        hash = (37 * hash) + SYMBOL_Z_ORDER_FIELD_NUMBER;
        hash = (53 * hash) + symbolZOrder_;
        hash = (37 * hash) + ICON_ALLOW_OVERLAP_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIconAllowOverlap());
        hash = (37 * hash) + ICON_IGNORE_PLACEMENT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIconIgnorePlacement());
        hash = (37 * hash) + ICON_OPTIONAL_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIconOptional());
        hash = (37 * hash) + ICON_ROTATION_ALIGNMENT_FIELD_NUMBER;
        hash = (53 * hash) + iconRotationAlignment_;
        hash = (37 * hash) + ICON_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getIconSize());
        hash = (37 * hash) + ICON_TEXT_FIT_FIELD_NUMBER;
        hash = (53 * hash) + iconTextFit_;
        if (getIconTextFitPaddingCount() > 0) {
          hash = (37 * hash) + ICON_TEXT_FIT_PADDING_FIELD_NUMBER;
          hash = (53 * hash) + getIconTextFitPaddingList().hashCode();
        }
        hash = (37 * hash) + ICON_IMAGE_FIELD_NUMBER;
        hash = (53 * hash) + getIconImage().hashCode();
        hash = (37 * hash) + ICON_ROTATE_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getIconRotate());
        hash = (37 * hash) + ICON_PADDING_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getIconPadding());
        hash = (37 * hash) + ICON_KEEP_UPRIGHT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIconKeepUpright());
        if (getIconOffsetCount() > 0) {
          hash = (37 * hash) + ICON_OFFSET_FIELD_NUMBER;
          hash = (53 * hash) + getIconOffsetList().hashCode();
        }
        hash = (37 * hash) + ICON_ANCHOR_FIELD_NUMBER;
        hash = (53 * hash) + iconAnchor_;
        hash = (37 * hash) + ICON_PITCH_ALIGNMENT_FIELD_NUMBER;
        hash = (53 * hash) + iconPitchAlignment_;
        hash = (37 * hash) + TEXT_PITCH_ALIGNMENT_FIELD_NUMBER;
        hash = (53 * hash) + textPitchAlignment_;
        hash = (37 * hash) + TEXT_ROTATION_ALIGNMENT_FIELD_NUMBER;
        hash = (53 * hash) + textRotationAlignment_;
        if (getTextFieldCount() > 0) {
          hash = (37 * hash) + TEXT_FIELD_FIELD_NUMBER;
          hash = (53 * hash) + getTextFieldList().hashCode();
        }
        if (getTextFontCount() > 0) {
          hash = (37 * hash) + TEXT_FONT_FIELD_NUMBER;
          hash = (53 * hash) + getTextFontList().hashCode();
        }
        hash = (37 * hash) + TEXT_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getTextSize());
        hash = (37 * hash) + TEXT_MAX_WIDTH_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getTextMaxWidth());
        hash = (37 * hash) + TEXT_LINE_HEIGHT_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getTextLineHeight());
        hash = (37 * hash) + TEXT_LETTER_SPACING_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getTextLetterSpacing());
        hash = (37 * hash) + TEXT_JUSTIFY_FIELD_NUMBER;
        hash = (53 * hash) + textJustify_;
        hash = (37 * hash) + TEXT_RADIAL_OFFSET_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getTextRadialOffset());
        if (getTextVariableAnchorCount() > 0) {
          hash = (37 * hash) + TEXT_VARIABLE_ANCHOR_FIELD_NUMBER;
          hash = (53 * hash) + textVariableAnchor_.hashCode();
        }
        hash = (37 * hash) + TEXT_ANCHOR_FIELD_NUMBER;
        hash = (53 * hash) + textAnchor_;
        hash = (37 * hash) + TEXT_MAX_ANGLE_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getTextMaxAngle());
        hash = (37 * hash) + TEXT_ROTATE_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getTextRotate());
        hash = (37 * hash) + TEXT_PADDING_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getTextPadding());
        hash = (37 * hash) + TEXT_KEEP_UPRIGHT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getTextKeepUpright());
        hash = (37 * hash) + TEXT_TRANSFORM_FIELD_NUMBER;
        hash = (53 * hash) + textTransform_;
        if (getTextOffsetCount() > 0) {
          hash = (37 * hash) + TEXT_OFFSET_FIELD_NUMBER;
          hash = (53 * hash) + getTextOffsetList().hashCode();
        }
        hash = (37 * hash) + TEXT_ALLOW_OVERLAP_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getTextAllowOverlap());
        hash = (37 * hash) + TEXT_IGNORE_PLACEMENT_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getTextIgnorePlacement());
        hash = (37 * hash) + TEXT_OPTIONAL_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getTextOptional());
        if (hasIconColor()) {
          hash = (37 * hash) + ICON_COLOR_FIELD_NUMBER;
          hash = (53 * hash) + getIconColor().hashCode();
        }
        if (hasIconHaloColor()) {
          hash = (37 * hash) + ICON_HALO_COLOR_FIELD_NUMBER;
          hash = (53 * hash) + getIconHaloColor().hashCode();
        }
        hash = (37 * hash) + ICON_HALO_WIDTH_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getIconHaloWidth());
        hash = (37 * hash) + ICON_HALO_BLUR_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getIconHaloBlur());
        if (getIconTranslateCount() > 0) {
          hash = (37 * hash) + ICON_TRANSLATE_FIELD_NUMBER;
          hash = (53 * hash) + getIconTranslateList().hashCode();
        }
        hash = (37 * hash) + ICON_TRANSLATE_ANCHOR_FIELD_NUMBER;
        hash = (53 * hash) + iconTranslateAnchor_;
        if (hasTextColor()) {
          hash = (37 * hash) + TEXT_COLOR_FIELD_NUMBER;
          hash = (53 * hash) + getTextColor().hashCode();
        }
        if (hasTextHaloColor()) {
          hash = (37 * hash) + TEXT_HALO_COLOR_FIELD_NUMBER;
          hash = (53 * hash) + getTextHaloColor().hashCode();
        }
        hash = (37 * hash) + TEXT_HALO_WIDTH_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getTextHaloWidth());
        hash = (37 * hash) + TEXT_HALO_BLUR_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getTextHaloBlur());
        if (getTextTranslateCount() > 0) {
          hash = (37 * hash) + TEXT_TRANSLATE_FIELD_NUMBER;
          hash = (53 * hash) + getTextTranslateList().hashCode();
        }
        hash = (37 * hash) + TEXT_TRANSLATE_ANCHOR_FIELD_NUMBER;
        hash = (53 * hash) + textTranslateAnchor_;
        if (hasIconOpacityTransition()) {
          hash = (37 * hash) + ICON_OPACITY_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getIconOpacityTransition().hashCode();
        }
        if (hasIconColorTransition()) {
          hash = (37 * hash) + ICON_COLOR_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getIconColorTransition().hashCode();
        }
        if (hasIconHaloColorTransition()) {
          hash = (37 * hash) + ICON_HALO_COLOR_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getIconHaloColorTransition().hashCode();
        }
        if (hasIconHaloWidthTransition()) {
          hash = (37 * hash) + ICON_HALO_WIDTH_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getIconHaloWidthTransition().hashCode();
        }
        if (hasIconHaloBlurTransition()) {
          hash = (37 * hash) + ICON_HALO_BLUR_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getIconHaloBlurTransition().hashCode();
        }
        if (hasIconTranslateTransition()) {
          hash = (37 * hash) + ICON_TRANSLATE_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getIconTranslateTransition().hashCode();
        }
        if (hasTextOpacityTransition()) {
          hash = (37 * hash) + TEXT_OPACITY_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getTextOpacityTransition().hashCode();
        }
        if (hasTextColorTransition()) {
          hash = (37 * hash) + TEXT_COLOR_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getTextColorTransition().hashCode();
        }
        if (hasTextHaloColorTransition()) {
          hash = (37 * hash) + TEXT_HALO_COLOR_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getTextHaloColorTransition().hashCode();
        }
        if (hasTextHaloWidthTransition()) {
          hash = (37 * hash) + TEXT_HALO_WIDTH_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getTextHaloWidthTransition().hashCode();
        }
        if (hasTextHaloBlurTransition()) {
          hash = (37 * hash) + TEXT_HALO_BLUR_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getTextHaloBlurTransition().hashCode();
        }
        if (hasTextTranslateTransition()) {
          hash = (37 * hash) + TEXT_TRANSLATE_TRANSITION_FIELD_NUMBER;
          hash = (53 * hash) + getTextTranslateTransition().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.tophap.mapbox_gl.proto.Layers.Layer.Symbol parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Symbol parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Symbol parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Symbol parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Symbol parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Symbol parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Symbol parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Symbol parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Symbol parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Symbol parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Symbol parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.tophap.mapbox_gl.proto.Layers.Layer.Symbol parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.tophap.mapbox_gl.proto.Layers.Layer.Symbol prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code com.tophap.mapbox_gl.proto.Layer.Symbol}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:com.tophap.mapbox_gl.proto.Layer.Symbol)
          com.tophap.mapbox_gl.proto.Layers.Layer.SymbolOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_Symbol_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_Symbol_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.class, com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Builder.class);
        }

        // Construct using com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
            getTextFieldFieldBuilder();
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          id_ = "";

          sourceId_ = "";

          visible_ = false;

          minZoom_ = 0F;

          maxZoom_ = 0F;

          symbolPlacement_ = 0;

          symbolSpacing_ = 0F;

          symbolAvoidEdges_ = false;

          symbolZOrder_ = 0;

          iconAllowOverlap_ = false;

          iconIgnorePlacement_ = false;

          iconOptional_ = false;

          iconRotationAlignment_ = 0;

          iconSize_ = 0F;

          iconTextFit_ = 0;

          iconTextFitPadding_ = emptyFloatList();
          bitField0_ = (bitField0_ & ~0x00008000);
          iconImage_ = "";

          iconRotate_ = 0F;

          iconPadding_ = 0F;

          iconKeepUpright_ = false;

          iconOffset_ = emptyFloatList();
          bitField0_ = (bitField0_ & ~0x00100000);
          iconAnchor_ = 0;

          iconPitchAlignment_ = 0;

          textPitchAlignment_ = 0;

          textRotationAlignment_ = 0;

          if (textFieldBuilder_ == null) {
            textField_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x02000000);
          } else {
            textFieldBuilder_.clear();
          }
          textFont_ = com.google.protobuf.LazyStringArrayList.EMPTY;
          bitField0_ = (bitField0_ & ~0x04000000);
          textSize_ = 0F;

          textMaxWidth_ = 0F;

          textLineHeight_ = 0F;

          textLetterSpacing_ = 0F;

          textJustify_ = 0;

          textRadialOffset_ = 0F;

          textVariableAnchor_ = java.util.Collections.emptyList();
          bitField1_ = (bitField1_ & ~0x00000002);
          textAnchor_ = 0;

          textMaxAngle_ = 0F;

          textRotate_ = 0F;

          textPadding_ = 0F;

          textKeepUpright_ = false;

          textTransform_ = 0;

          textOffset_ = emptyFloatList();
          bitField1_ = (bitField1_ & ~0x00000100);
          textAllowOverlap_ = false;

          textIgnorePlacement_ = false;

          textOptional_ = false;

          if (iconColorBuilder_ == null) {
            iconColor_ = null;
          } else {
            iconColor_ = null;
            iconColorBuilder_ = null;
          }
          if (iconHaloColorBuilder_ == null) {
            iconHaloColor_ = null;
          } else {
            iconHaloColor_ = null;
            iconHaloColorBuilder_ = null;
          }
          iconHaloWidth_ = 0F;

          iconHaloBlur_ = 0F;

          iconTranslate_ = emptyFloatList();
          bitField1_ = (bitField1_ & ~0x00010000);
          iconTranslateAnchor_ = 0;

          if (textColorBuilder_ == null) {
            textColor_ = null;
          } else {
            textColor_ = null;
            textColorBuilder_ = null;
          }
          if (textHaloColorBuilder_ == null) {
            textHaloColor_ = null;
          } else {
            textHaloColor_ = null;
            textHaloColorBuilder_ = null;
          }
          textHaloWidth_ = 0F;

          textHaloBlur_ = 0F;

          textTranslate_ = emptyFloatList();
          bitField1_ = (bitField1_ & ~0x00400000);
          textTranslateAnchor_ = 0;

          if (iconOpacityTransitionBuilder_ == null) {
            iconOpacityTransition_ = null;
          } else {
            iconOpacityTransition_ = null;
            iconOpacityTransitionBuilder_ = null;
          }
          if (iconColorTransitionBuilder_ == null) {
            iconColorTransition_ = null;
          } else {
            iconColorTransition_ = null;
            iconColorTransitionBuilder_ = null;
          }
          if (iconHaloColorTransitionBuilder_ == null) {
            iconHaloColorTransition_ = null;
          } else {
            iconHaloColorTransition_ = null;
            iconHaloColorTransitionBuilder_ = null;
          }
          if (iconHaloWidthTransitionBuilder_ == null) {
            iconHaloWidthTransition_ = null;
          } else {
            iconHaloWidthTransition_ = null;
            iconHaloWidthTransitionBuilder_ = null;
          }
          if (iconHaloBlurTransitionBuilder_ == null) {
            iconHaloBlurTransition_ = null;
          } else {
            iconHaloBlurTransition_ = null;
            iconHaloBlurTransitionBuilder_ = null;
          }
          if (iconTranslateTransitionBuilder_ == null) {
            iconTranslateTransition_ = null;
          } else {
            iconTranslateTransition_ = null;
            iconTranslateTransitionBuilder_ = null;
          }
          if (textOpacityTransitionBuilder_ == null) {
            textOpacityTransition_ = null;
          } else {
            textOpacityTransition_ = null;
            textOpacityTransitionBuilder_ = null;
          }
          if (textColorTransitionBuilder_ == null) {
            textColorTransition_ = null;
          } else {
            textColorTransition_ = null;
            textColorTransitionBuilder_ = null;
          }
          if (textHaloColorTransitionBuilder_ == null) {
            textHaloColorTransition_ = null;
          } else {
            textHaloColorTransition_ = null;
            textHaloColorTransitionBuilder_ = null;
          }
          if (textHaloWidthTransitionBuilder_ == null) {
            textHaloWidthTransition_ = null;
          } else {
            textHaloWidthTransition_ = null;
            textHaloWidthTransitionBuilder_ = null;
          }
          if (textHaloBlurTransitionBuilder_ == null) {
            textHaloBlurTransition_ = null;
          } else {
            textHaloBlurTransition_ = null;
            textHaloBlurTransitionBuilder_ = null;
          }
          if (textTranslateTransitionBuilder_ == null) {
            textTranslateTransition_ = null;
          } else {
            textTranslateTransition_ = null;
            textTranslateTransitionBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_Symbol_descriptor;
        }

        @java.lang.Override
        public com.tophap.mapbox_gl.proto.Layers.Layer.Symbol getDefaultInstanceForType() {
          return com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.getDefaultInstance();
        }

        @java.lang.Override
        public com.tophap.mapbox_gl.proto.Layers.Layer.Symbol build() {
          com.tophap.mapbox_gl.proto.Layers.Layer.Symbol result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public com.tophap.mapbox_gl.proto.Layers.Layer.Symbol buildPartial() {
          com.tophap.mapbox_gl.proto.Layers.Layer.Symbol result = new com.tophap.mapbox_gl.proto.Layers.Layer.Symbol(this);
          int from_bitField0_ = bitField0_;
          int from_bitField1_ = bitField1_;
          int from_bitField2_ = bitField2_;
          int to_bitField0_ = 0;
          int to_bitField1_ = 0;
          result.id_ = id_;
          result.sourceId_ = sourceId_;
          result.visible_ = visible_;
          result.minZoom_ = minZoom_;
          result.maxZoom_ = maxZoom_;
          result.symbolPlacement_ = symbolPlacement_;
          result.symbolSpacing_ = symbolSpacing_;
          result.symbolAvoidEdges_ = symbolAvoidEdges_;
          result.symbolZOrder_ = symbolZOrder_;
          result.iconAllowOverlap_ = iconAllowOverlap_;
          result.iconIgnorePlacement_ = iconIgnorePlacement_;
          result.iconOptional_ = iconOptional_;
          result.iconRotationAlignment_ = iconRotationAlignment_;
          result.iconSize_ = iconSize_;
          result.iconTextFit_ = iconTextFit_;
          if (((bitField0_ & 0x00008000) != 0)) {
            iconTextFitPadding_.makeImmutable();
            bitField0_ = (bitField0_ & ~0x00008000);
          }
          result.iconTextFitPadding_ = iconTextFitPadding_;
          result.iconImage_ = iconImage_;
          result.iconRotate_ = iconRotate_;
          result.iconPadding_ = iconPadding_;
          result.iconKeepUpright_ = iconKeepUpright_;
          if (((bitField0_ & 0x00100000) != 0)) {
            iconOffset_.makeImmutable();
            bitField0_ = (bitField0_ & ~0x00100000);
          }
          result.iconOffset_ = iconOffset_;
          result.iconAnchor_ = iconAnchor_;
          result.iconPitchAlignment_ = iconPitchAlignment_;
          result.textPitchAlignment_ = textPitchAlignment_;
          result.textRotationAlignment_ = textRotationAlignment_;
          if (textFieldBuilder_ == null) {
            if (((bitField0_ & 0x02000000) != 0)) {
              textField_ = java.util.Collections.unmodifiableList(textField_);
              bitField0_ = (bitField0_ & ~0x02000000);
            }
            result.textField_ = textField_;
          } else {
            result.textField_ = textFieldBuilder_.build();
          }
          if (((bitField0_ & 0x04000000) != 0)) {
            textFont_ = textFont_.getUnmodifiableView();
            bitField0_ = (bitField0_ & ~0x04000000);
          }
          result.textFont_ = textFont_;
          result.textSize_ = textSize_;
          result.textMaxWidth_ = textMaxWidth_;
          result.textLineHeight_ = textLineHeight_;
          result.textLetterSpacing_ = textLetterSpacing_;
          result.textJustify_ = textJustify_;
          result.textRadialOffset_ = textRadialOffset_;
          if (((bitField1_ & 0x00000002) != 0)) {
            textVariableAnchor_ = java.util.Collections.unmodifiableList(textVariableAnchor_);
            bitField1_ = (bitField1_ & ~0x00000002);
          }
          result.textVariableAnchor_ = textVariableAnchor_;
          result.textAnchor_ = textAnchor_;
          result.textMaxAngle_ = textMaxAngle_;
          result.textRotate_ = textRotate_;
          result.textPadding_ = textPadding_;
          result.textKeepUpright_ = textKeepUpright_;
          result.textTransform_ = textTransform_;
          if (((bitField1_ & 0x00000100) != 0)) {
            textOffset_.makeImmutable();
            bitField1_ = (bitField1_ & ~0x00000100);
          }
          result.textOffset_ = textOffset_;
          result.textAllowOverlap_ = textAllowOverlap_;
          result.textIgnorePlacement_ = textIgnorePlacement_;
          result.textOptional_ = textOptional_;
          if (iconColorBuilder_ == null) {
            result.iconColor_ = iconColor_;
          } else {
            result.iconColor_ = iconColorBuilder_.build();
          }
          if (iconHaloColorBuilder_ == null) {
            result.iconHaloColor_ = iconHaloColor_;
          } else {
            result.iconHaloColor_ = iconHaloColorBuilder_.build();
          }
          result.iconHaloWidth_ = iconHaloWidth_;
          result.iconHaloBlur_ = iconHaloBlur_;
          if (((bitField1_ & 0x00010000) != 0)) {
            iconTranslate_.makeImmutable();
            bitField1_ = (bitField1_ & ~0x00010000);
          }
          result.iconTranslate_ = iconTranslate_;
          result.iconTranslateAnchor_ = iconTranslateAnchor_;
          if (textColorBuilder_ == null) {
            result.textColor_ = textColor_;
          } else {
            result.textColor_ = textColorBuilder_.build();
          }
          if (textHaloColorBuilder_ == null) {
            result.textHaloColor_ = textHaloColor_;
          } else {
            result.textHaloColor_ = textHaloColorBuilder_.build();
          }
          result.textHaloWidth_ = textHaloWidth_;
          result.textHaloBlur_ = textHaloBlur_;
          if (((bitField1_ & 0x00400000) != 0)) {
            textTranslate_.makeImmutable();
            bitField1_ = (bitField1_ & ~0x00400000);
          }
          result.textTranslate_ = textTranslate_;
          result.textTranslateAnchor_ = textTranslateAnchor_;
          if (iconOpacityTransitionBuilder_ == null) {
            result.iconOpacityTransition_ = iconOpacityTransition_;
          } else {
            result.iconOpacityTransition_ = iconOpacityTransitionBuilder_.build();
          }
          if (iconColorTransitionBuilder_ == null) {
            result.iconColorTransition_ = iconColorTransition_;
          } else {
            result.iconColorTransition_ = iconColorTransitionBuilder_.build();
          }
          if (iconHaloColorTransitionBuilder_ == null) {
            result.iconHaloColorTransition_ = iconHaloColorTransition_;
          } else {
            result.iconHaloColorTransition_ = iconHaloColorTransitionBuilder_.build();
          }
          if (iconHaloWidthTransitionBuilder_ == null) {
            result.iconHaloWidthTransition_ = iconHaloWidthTransition_;
          } else {
            result.iconHaloWidthTransition_ = iconHaloWidthTransitionBuilder_.build();
          }
          if (iconHaloBlurTransitionBuilder_ == null) {
            result.iconHaloBlurTransition_ = iconHaloBlurTransition_;
          } else {
            result.iconHaloBlurTransition_ = iconHaloBlurTransitionBuilder_.build();
          }
          if (iconTranslateTransitionBuilder_ == null) {
            result.iconTranslateTransition_ = iconTranslateTransition_;
          } else {
            result.iconTranslateTransition_ = iconTranslateTransitionBuilder_.build();
          }
          if (textOpacityTransitionBuilder_ == null) {
            result.textOpacityTransition_ = textOpacityTransition_;
          } else {
            result.textOpacityTransition_ = textOpacityTransitionBuilder_.build();
          }
          if (textColorTransitionBuilder_ == null) {
            result.textColorTransition_ = textColorTransition_;
          } else {
            result.textColorTransition_ = textColorTransitionBuilder_.build();
          }
          if (textHaloColorTransitionBuilder_ == null) {
            result.textHaloColorTransition_ = textHaloColorTransition_;
          } else {
            result.textHaloColorTransition_ = textHaloColorTransitionBuilder_.build();
          }
          if (textHaloWidthTransitionBuilder_ == null) {
            result.textHaloWidthTransition_ = textHaloWidthTransition_;
          } else {
            result.textHaloWidthTransition_ = textHaloWidthTransitionBuilder_.build();
          }
          if (textHaloBlurTransitionBuilder_ == null) {
            result.textHaloBlurTransition_ = textHaloBlurTransition_;
          } else {
            result.textHaloBlurTransition_ = textHaloBlurTransitionBuilder_.build();
          }
          if (textTranslateTransitionBuilder_ == null) {
            result.textTranslateTransition_ = textTranslateTransition_;
          } else {
            result.textTranslateTransition_ = textTranslateTransitionBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          result.bitField1_ = to_bitField1_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.tophap.mapbox_gl.proto.Layers.Layer.Symbol) {
            return mergeFrom((com.tophap.mapbox_gl.proto.Layers.Layer.Symbol)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.tophap.mapbox_gl.proto.Layers.Layer.Symbol other) {
          if (other == com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.getDefaultInstance()) return this;
          if (!other.getId().isEmpty()) {
            id_ = other.id_;
            onChanged();
          }
          if (!other.getSourceId().isEmpty()) {
            sourceId_ = other.sourceId_;
            onChanged();
          }
          if (other.getVisible() != false) {
            setVisible(other.getVisible());
          }
          if (other.getMinZoom() != 0F) {
            setMinZoom(other.getMinZoom());
          }
          if (other.getMaxZoom() != 0F) {
            setMaxZoom(other.getMaxZoom());
          }
          if (other.symbolPlacement_ != 0) {
            setSymbolPlacementValue(other.getSymbolPlacementValue());
          }
          if (other.getSymbolSpacing() != 0F) {
            setSymbolSpacing(other.getSymbolSpacing());
          }
          if (other.getSymbolAvoidEdges() != false) {
            setSymbolAvoidEdges(other.getSymbolAvoidEdges());
          }
          if (other.symbolZOrder_ != 0) {
            setSymbolZOrderValue(other.getSymbolZOrderValue());
          }
          if (other.getIconAllowOverlap() != false) {
            setIconAllowOverlap(other.getIconAllowOverlap());
          }
          if (other.getIconIgnorePlacement() != false) {
            setIconIgnorePlacement(other.getIconIgnorePlacement());
          }
          if (other.getIconOptional() != false) {
            setIconOptional(other.getIconOptional());
          }
          if (other.iconRotationAlignment_ != 0) {
            setIconRotationAlignmentValue(other.getIconRotationAlignmentValue());
          }
          if (other.getIconSize() != 0F) {
            setIconSize(other.getIconSize());
          }
          if (other.iconTextFit_ != 0) {
            setIconTextFitValue(other.getIconTextFitValue());
          }
          if (!other.iconTextFitPadding_.isEmpty()) {
            if (iconTextFitPadding_.isEmpty()) {
              iconTextFitPadding_ = other.iconTextFitPadding_;
              bitField0_ = (bitField0_ & ~0x00008000);
            } else {
              ensureIconTextFitPaddingIsMutable();
              iconTextFitPadding_.addAll(other.iconTextFitPadding_);
            }
            onChanged();
          }
          if (!other.getIconImage().isEmpty()) {
            iconImage_ = other.iconImage_;
            onChanged();
          }
          if (other.getIconRotate() != 0F) {
            setIconRotate(other.getIconRotate());
          }
          if (other.getIconPadding() != 0F) {
            setIconPadding(other.getIconPadding());
          }
          if (other.getIconKeepUpright() != false) {
            setIconKeepUpright(other.getIconKeepUpright());
          }
          if (!other.iconOffset_.isEmpty()) {
            if (iconOffset_.isEmpty()) {
              iconOffset_ = other.iconOffset_;
              bitField0_ = (bitField0_ & ~0x00100000);
            } else {
              ensureIconOffsetIsMutable();
              iconOffset_.addAll(other.iconOffset_);
            }
            onChanged();
          }
          if (other.iconAnchor_ != 0) {
            setIconAnchorValue(other.getIconAnchorValue());
          }
          if (other.iconPitchAlignment_ != 0) {
            setIconPitchAlignmentValue(other.getIconPitchAlignmentValue());
          }
          if (other.textPitchAlignment_ != 0) {
            setTextPitchAlignmentValue(other.getTextPitchAlignmentValue());
          }
          if (other.textRotationAlignment_ != 0) {
            setTextRotationAlignmentValue(other.getTextRotationAlignmentValue());
          }
          if (textFieldBuilder_ == null) {
            if (!other.textField_.isEmpty()) {
              if (textField_.isEmpty()) {
                textField_ = other.textField_;
                bitField0_ = (bitField0_ & ~0x02000000);
              } else {
                ensureTextFieldIsMutable();
                textField_.addAll(other.textField_);
              }
              onChanged();
            }
          } else {
            if (!other.textField_.isEmpty()) {
              if (textFieldBuilder_.isEmpty()) {
                textFieldBuilder_.dispose();
                textFieldBuilder_ = null;
                textField_ = other.textField_;
                bitField0_ = (bitField0_ & ~0x02000000);
                textFieldBuilder_ = 
                  com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                     getTextFieldFieldBuilder() : null;
              } else {
                textFieldBuilder_.addAllMessages(other.textField_);
              }
            }
          }
          if (!other.textFont_.isEmpty()) {
            if (textFont_.isEmpty()) {
              textFont_ = other.textFont_;
              bitField0_ = (bitField0_ & ~0x04000000);
            } else {
              ensureTextFontIsMutable();
              textFont_.addAll(other.textFont_);
            }
            onChanged();
          }
          if (other.getTextSize() != 0F) {
            setTextSize(other.getTextSize());
          }
          if (other.getTextMaxWidth() != 0F) {
            setTextMaxWidth(other.getTextMaxWidth());
          }
          if (other.getTextLineHeight() != 0F) {
            setTextLineHeight(other.getTextLineHeight());
          }
          if (other.getTextLetterSpacing() != 0F) {
            setTextLetterSpacing(other.getTextLetterSpacing());
          }
          if (other.textJustify_ != 0) {
            setTextJustifyValue(other.getTextJustifyValue());
          }
          if (other.getTextRadialOffset() != 0F) {
            setTextRadialOffset(other.getTextRadialOffset());
          }
          if (!other.textVariableAnchor_.isEmpty()) {
            if (textVariableAnchor_.isEmpty()) {
              textVariableAnchor_ = other.textVariableAnchor_;
              bitField1_ = (bitField1_ & ~0x00000002);
            } else {
              ensureTextVariableAnchorIsMutable();
              textVariableAnchor_.addAll(other.textVariableAnchor_);
            }
            onChanged();
          }
          if (other.textAnchor_ != 0) {
            setTextAnchorValue(other.getTextAnchorValue());
          }
          if (other.getTextMaxAngle() != 0F) {
            setTextMaxAngle(other.getTextMaxAngle());
          }
          if (other.getTextRotate() != 0F) {
            setTextRotate(other.getTextRotate());
          }
          if (other.getTextPadding() != 0F) {
            setTextPadding(other.getTextPadding());
          }
          if (other.getTextKeepUpright() != false) {
            setTextKeepUpright(other.getTextKeepUpright());
          }
          if (other.textTransform_ != 0) {
            setTextTransformValue(other.getTextTransformValue());
          }
          if (!other.textOffset_.isEmpty()) {
            if (textOffset_.isEmpty()) {
              textOffset_ = other.textOffset_;
              bitField1_ = (bitField1_ & ~0x00000100);
            } else {
              ensureTextOffsetIsMutable();
              textOffset_.addAll(other.textOffset_);
            }
            onChanged();
          }
          if (other.getTextAllowOverlap() != false) {
            setTextAllowOverlap(other.getTextAllowOverlap());
          }
          if (other.getTextIgnorePlacement() != false) {
            setTextIgnorePlacement(other.getTextIgnorePlacement());
          }
          if (other.getTextOptional() != false) {
            setTextOptional(other.getTextOptional());
          }
          if (other.hasIconColor()) {
            mergeIconColor(other.getIconColor());
          }
          if (other.hasIconHaloColor()) {
            mergeIconHaloColor(other.getIconHaloColor());
          }
          if (other.getIconHaloWidth() != 0F) {
            setIconHaloWidth(other.getIconHaloWidth());
          }
          if (other.getIconHaloBlur() != 0F) {
            setIconHaloBlur(other.getIconHaloBlur());
          }
          if (!other.iconTranslate_.isEmpty()) {
            if (iconTranslate_.isEmpty()) {
              iconTranslate_ = other.iconTranslate_;
              bitField1_ = (bitField1_ & ~0x00010000);
            } else {
              ensureIconTranslateIsMutable();
              iconTranslate_.addAll(other.iconTranslate_);
            }
            onChanged();
          }
          if (other.iconTranslateAnchor_ != 0) {
            setIconTranslateAnchorValue(other.getIconTranslateAnchorValue());
          }
          if (other.hasTextColor()) {
            mergeTextColor(other.getTextColor());
          }
          if (other.hasTextHaloColor()) {
            mergeTextHaloColor(other.getTextHaloColor());
          }
          if (other.getTextHaloWidth() != 0F) {
            setTextHaloWidth(other.getTextHaloWidth());
          }
          if (other.getTextHaloBlur() != 0F) {
            setTextHaloBlur(other.getTextHaloBlur());
          }
          if (!other.textTranslate_.isEmpty()) {
            if (textTranslate_.isEmpty()) {
              textTranslate_ = other.textTranslate_;
              bitField1_ = (bitField1_ & ~0x00400000);
            } else {
              ensureTextTranslateIsMutable();
              textTranslate_.addAll(other.textTranslate_);
            }
            onChanged();
          }
          if (other.textTranslateAnchor_ != 0) {
            setTextTranslateAnchorValue(other.getTextTranslateAnchorValue());
          }
          if (other.hasIconOpacityTransition()) {
            mergeIconOpacityTransition(other.getIconOpacityTransition());
          }
          if (other.hasIconColorTransition()) {
            mergeIconColorTransition(other.getIconColorTransition());
          }
          if (other.hasIconHaloColorTransition()) {
            mergeIconHaloColorTransition(other.getIconHaloColorTransition());
          }
          if (other.hasIconHaloWidthTransition()) {
            mergeIconHaloWidthTransition(other.getIconHaloWidthTransition());
          }
          if (other.hasIconHaloBlurTransition()) {
            mergeIconHaloBlurTransition(other.getIconHaloBlurTransition());
          }
          if (other.hasIconTranslateTransition()) {
            mergeIconTranslateTransition(other.getIconTranslateTransition());
          }
          if (other.hasTextOpacityTransition()) {
            mergeTextOpacityTransition(other.getTextOpacityTransition());
          }
          if (other.hasTextColorTransition()) {
            mergeTextColorTransition(other.getTextColorTransition());
          }
          if (other.hasTextHaloColorTransition()) {
            mergeTextHaloColorTransition(other.getTextHaloColorTransition());
          }
          if (other.hasTextHaloWidthTransition()) {
            mergeTextHaloWidthTransition(other.getTextHaloWidthTransition());
          }
          if (other.hasTextHaloBlurTransition()) {
            mergeTextHaloBlurTransition(other.getTextHaloBlurTransition());
          }
          if (other.hasTextTranslateTransition()) {
            mergeTextTranslateTransition(other.getTextTranslateTransition());
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.tophap.mapbox_gl.proto.Layers.Layer.Symbol parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.tophap.mapbox_gl.proto.Layers.Layer.Symbol) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;
        private int bitField1_;
        private int bitField2_;

        private java.lang.Object id_ = "";
        /**
         * <code>string id = 1;</code>
         */
        public java.lang.String getId() {
          java.lang.Object ref = id_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            id_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string id = 1;</code>
         */
        public com.google.protobuf.ByteString
            getIdBytes() {
          java.lang.Object ref = id_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            id_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string id = 1;</code>
         */
        public Builder setId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          id_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string id = 1;</code>
         */
        public Builder clearId() {
          
          id_ = getDefaultInstance().getId();
          onChanged();
          return this;
        }
        /**
         * <code>string id = 1;</code>
         */
        public Builder setIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          id_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object sourceId_ = "";
        /**
         * <code>string source_id = 2;</code>
         */
        public java.lang.String getSourceId() {
          java.lang.Object ref = sourceId_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            sourceId_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string source_id = 2;</code>
         */
        public com.google.protobuf.ByteString
            getSourceIdBytes() {
          java.lang.Object ref = sourceId_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            sourceId_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string source_id = 2;</code>
         */
        public Builder setSourceId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          sourceId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string source_id = 2;</code>
         */
        public Builder clearSourceId() {
          
          sourceId_ = getDefaultInstance().getSourceId();
          onChanged();
          return this;
        }
        /**
         * <code>string source_id = 2;</code>
         */
        public Builder setSourceIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          sourceId_ = value;
          onChanged();
          return this;
        }

        private boolean visible_ ;
        /**
         * <code>bool visible = 3;</code>
         */
        public boolean getVisible() {
          return visible_;
        }
        /**
         * <code>bool visible = 3;</code>
         */
        public Builder setVisible(boolean value) {
          
          visible_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>bool visible = 3;</code>
         */
        public Builder clearVisible() {
          
          visible_ = false;
          onChanged();
          return this;
        }

        private float minZoom_ ;
        /**
         * <code>float min_zoom = 4;</code>
         */
        public float getMinZoom() {
          return minZoom_;
        }
        /**
         * <code>float min_zoom = 4;</code>
         */
        public Builder setMinZoom(float value) {
          
          minZoom_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float min_zoom = 4;</code>
         */
        public Builder clearMinZoom() {
          
          minZoom_ = 0F;
          onChanged();
          return this;
        }

        private float maxZoom_ ;
        /**
         * <code>float max_zoom = 5;</code>
         */
        public float getMaxZoom() {
          return maxZoom_;
        }
        /**
         * <code>float max_zoom = 5;</code>
         */
        public Builder setMaxZoom(float value) {
          
          maxZoom_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float max_zoom = 5;</code>
         */
        public Builder clearMaxZoom() {
          
          maxZoom_ = 0F;
          onChanged();
          return this;
        }

        private int symbolPlacement_ = 0;
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Placement symbol_placement = 6;</code>
         */
        public int getSymbolPlacementValue() {
          return symbolPlacement_;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Placement symbol_placement = 6;</code>
         */
        public Builder setSymbolPlacementValue(int value) {
          symbolPlacement_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Placement symbol_placement = 6;</code>
         */
        public com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Placement getSymbolPlacement() {
          @SuppressWarnings("deprecation")
          com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Placement result = com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Placement.valueOf(symbolPlacement_);
          return result == null ? com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Placement.UNRECOGNIZED : result;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Placement symbol_placement = 6;</code>
         */
        public Builder setSymbolPlacement(com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Placement value) {
          if (value == null) {
            throw new NullPointerException();
          }
          
          symbolPlacement_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Placement symbol_placement = 6;</code>
         */
        public Builder clearSymbolPlacement() {
          
          symbolPlacement_ = 0;
          onChanged();
          return this;
        }

        private float symbolSpacing_ ;
        /**
         * <code>float symbol_spacing = 7;</code>
         */
        public float getSymbolSpacing() {
          return symbolSpacing_;
        }
        /**
         * <code>float symbol_spacing = 7;</code>
         */
        public Builder setSymbolSpacing(float value) {
          
          symbolSpacing_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float symbol_spacing = 7;</code>
         */
        public Builder clearSymbolSpacing() {
          
          symbolSpacing_ = 0F;
          onChanged();
          return this;
        }

        private boolean symbolAvoidEdges_ ;
        /**
         * <code>bool symbol_avoid_edges = 8;</code>
         */
        public boolean getSymbolAvoidEdges() {
          return symbolAvoidEdges_;
        }
        /**
         * <code>bool symbol_avoid_edges = 8;</code>
         */
        public Builder setSymbolAvoidEdges(boolean value) {
          
          symbolAvoidEdges_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>bool symbol_avoid_edges = 8;</code>
         */
        public Builder clearSymbolAvoidEdges() {
          
          symbolAvoidEdges_ = false;
          onChanged();
          return this;
        }

        private int symbolZOrder_ = 0;
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.ZOrder symbol_z_order = 9;</code>
         */
        public int getSymbolZOrderValue() {
          return symbolZOrder_;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.ZOrder symbol_z_order = 9;</code>
         */
        public Builder setSymbolZOrderValue(int value) {
          symbolZOrder_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.ZOrder symbol_z_order = 9;</code>
         */
        public com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.ZOrder getSymbolZOrder() {
          @SuppressWarnings("deprecation")
          com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.ZOrder result = com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.ZOrder.valueOf(symbolZOrder_);
          return result == null ? com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.ZOrder.UNRECOGNIZED : result;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.ZOrder symbol_z_order = 9;</code>
         */
        public Builder setSymbolZOrder(com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.ZOrder value) {
          if (value == null) {
            throw new NullPointerException();
          }
          
          symbolZOrder_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.ZOrder symbol_z_order = 9;</code>
         */
        public Builder clearSymbolZOrder() {
          
          symbolZOrder_ = 0;
          onChanged();
          return this;
        }

        private boolean iconAllowOverlap_ ;
        /**
         * <code>bool icon_allow_overlap = 10;</code>
         */
        public boolean getIconAllowOverlap() {
          return iconAllowOverlap_;
        }
        /**
         * <code>bool icon_allow_overlap = 10;</code>
         */
        public Builder setIconAllowOverlap(boolean value) {
          
          iconAllowOverlap_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>bool icon_allow_overlap = 10;</code>
         */
        public Builder clearIconAllowOverlap() {
          
          iconAllowOverlap_ = false;
          onChanged();
          return this;
        }

        private boolean iconIgnorePlacement_ ;
        /**
         * <code>bool icon_ignore_placement = 11;</code>
         */
        public boolean getIconIgnorePlacement() {
          return iconIgnorePlacement_;
        }
        /**
         * <code>bool icon_ignore_placement = 11;</code>
         */
        public Builder setIconIgnorePlacement(boolean value) {
          
          iconIgnorePlacement_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>bool icon_ignore_placement = 11;</code>
         */
        public Builder clearIconIgnorePlacement() {
          
          iconIgnorePlacement_ = false;
          onChanged();
          return this;
        }

        private boolean iconOptional_ ;
        /**
         * <code>bool icon_optional = 12;</code>
         */
        public boolean getIconOptional() {
          return iconOptional_;
        }
        /**
         * <code>bool icon_optional = 12;</code>
         */
        public Builder setIconOptional(boolean value) {
          
          iconOptional_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>bool icon_optional = 12;</code>
         */
        public Builder clearIconOptional() {
          
          iconOptional_ = false;
          onChanged();
          return this;
        }

        private int iconRotationAlignment_ = 0;
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Alignment icon_rotation_alignment = 13;</code>
         */
        public int getIconRotationAlignmentValue() {
          return iconRotationAlignment_;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Alignment icon_rotation_alignment = 13;</code>
         */
        public Builder setIconRotationAlignmentValue(int value) {
          iconRotationAlignment_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Alignment icon_rotation_alignment = 13;</code>
         */
        public com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment getIconRotationAlignment() {
          @SuppressWarnings("deprecation")
          com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment result = com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment.valueOf(iconRotationAlignment_);
          return result == null ? com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment.UNRECOGNIZED : result;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Alignment icon_rotation_alignment = 13;</code>
         */
        public Builder setIconRotationAlignment(com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment value) {
          if (value == null) {
            throw new NullPointerException();
          }
          
          iconRotationAlignment_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Alignment icon_rotation_alignment = 13;</code>
         */
        public Builder clearIconRotationAlignment() {
          
          iconRotationAlignment_ = 0;
          onChanged();
          return this;
        }

        private float iconSize_ ;
        /**
         * <code>float icon_size = 14;</code>
         */
        public float getIconSize() {
          return iconSize_;
        }
        /**
         * <code>float icon_size = 14;</code>
         */
        public Builder setIconSize(float value) {
          
          iconSize_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float icon_size = 14;</code>
         */
        public Builder clearIconSize() {
          
          iconSize_ = 0F;
          onChanged();
          return this;
        }

        private int iconTextFit_ = 0;
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.TextFit icon_text_fit = 15;</code>
         */
        public int getIconTextFitValue() {
          return iconTextFit_;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.TextFit icon_text_fit = 15;</code>
         */
        public Builder setIconTextFitValue(int value) {
          iconTextFit_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.TextFit icon_text_fit = 15;</code>
         */
        public com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.TextFit getIconTextFit() {
          @SuppressWarnings("deprecation")
          com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.TextFit result = com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.TextFit.valueOf(iconTextFit_);
          return result == null ? com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.TextFit.UNRECOGNIZED : result;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.TextFit icon_text_fit = 15;</code>
         */
        public Builder setIconTextFit(com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.TextFit value) {
          if (value == null) {
            throw new NullPointerException();
          }
          
          iconTextFit_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.TextFit icon_text_fit = 15;</code>
         */
        public Builder clearIconTextFit() {
          
          iconTextFit_ = 0;
          onChanged();
          return this;
        }

        private com.google.protobuf.Internal.FloatList iconTextFitPadding_ = emptyFloatList();
        private void ensureIconTextFitPaddingIsMutable() {
          if (!((bitField0_ & 0x00008000) != 0)) {
            iconTextFitPadding_ = mutableCopy(iconTextFitPadding_);
            bitField0_ |= 0x00008000;
           }
        }
        /**
         * <code>repeated float icon_text_fit_padding = 16;</code>
         */
        public java.util.List<java.lang.Float>
            getIconTextFitPaddingList() {
          return ((bitField0_ & 0x00008000) != 0) ?
                   java.util.Collections.unmodifiableList(iconTextFitPadding_) : iconTextFitPadding_;
        }
        /**
         * <code>repeated float icon_text_fit_padding = 16;</code>
         */
        public int getIconTextFitPaddingCount() {
          return iconTextFitPadding_.size();
        }
        /**
         * <code>repeated float icon_text_fit_padding = 16;</code>
         */
        public float getIconTextFitPadding(int index) {
          return iconTextFitPadding_.getFloat(index);
        }
        /**
         * <code>repeated float icon_text_fit_padding = 16;</code>
         */
        public Builder setIconTextFitPadding(
            int index, float value) {
          ensureIconTextFitPaddingIsMutable();
          iconTextFitPadding_.setFloat(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float icon_text_fit_padding = 16;</code>
         */
        public Builder addIconTextFitPadding(float value) {
          ensureIconTextFitPaddingIsMutable();
          iconTextFitPadding_.addFloat(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float icon_text_fit_padding = 16;</code>
         */
        public Builder addAllIconTextFitPadding(
            java.lang.Iterable<? extends java.lang.Float> values) {
          ensureIconTextFitPaddingIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, iconTextFitPadding_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float icon_text_fit_padding = 16;</code>
         */
        public Builder clearIconTextFitPadding() {
          iconTextFitPadding_ = emptyFloatList();
          bitField0_ = (bitField0_ & ~0x00008000);
          onChanged();
          return this;
        }

        private java.lang.Object iconImage_ = "";
        /**
         * <code>string icon_image = 17;</code>
         */
        public java.lang.String getIconImage() {
          java.lang.Object ref = iconImage_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            iconImage_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>string icon_image = 17;</code>
         */
        public com.google.protobuf.ByteString
            getIconImageBytes() {
          java.lang.Object ref = iconImage_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            iconImage_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>string icon_image = 17;</code>
         */
        public Builder setIconImage(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          iconImage_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>string icon_image = 17;</code>
         */
        public Builder clearIconImage() {
          
          iconImage_ = getDefaultInstance().getIconImage();
          onChanged();
          return this;
        }
        /**
         * <code>string icon_image = 17;</code>
         */
        public Builder setIconImageBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          iconImage_ = value;
          onChanged();
          return this;
        }

        private float iconRotate_ ;
        /**
         * <code>float icon_rotate = 18;</code>
         */
        public float getIconRotate() {
          return iconRotate_;
        }
        /**
         * <code>float icon_rotate = 18;</code>
         */
        public Builder setIconRotate(float value) {
          
          iconRotate_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float icon_rotate = 18;</code>
         */
        public Builder clearIconRotate() {
          
          iconRotate_ = 0F;
          onChanged();
          return this;
        }

        private float iconPadding_ ;
        /**
         * <code>float icon_padding = 19;</code>
         */
        public float getIconPadding() {
          return iconPadding_;
        }
        /**
         * <code>float icon_padding = 19;</code>
         */
        public Builder setIconPadding(float value) {
          
          iconPadding_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float icon_padding = 19;</code>
         */
        public Builder clearIconPadding() {
          
          iconPadding_ = 0F;
          onChanged();
          return this;
        }

        private boolean iconKeepUpright_ ;
        /**
         * <code>bool icon_keep_upright = 20;</code>
         */
        public boolean getIconKeepUpright() {
          return iconKeepUpright_;
        }
        /**
         * <code>bool icon_keep_upright = 20;</code>
         */
        public Builder setIconKeepUpright(boolean value) {
          
          iconKeepUpright_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>bool icon_keep_upright = 20;</code>
         */
        public Builder clearIconKeepUpright() {
          
          iconKeepUpright_ = false;
          onChanged();
          return this;
        }

        private com.google.protobuf.Internal.FloatList iconOffset_ = emptyFloatList();
        private void ensureIconOffsetIsMutable() {
          if (!((bitField0_ & 0x00100000) != 0)) {
            iconOffset_ = mutableCopy(iconOffset_);
            bitField0_ |= 0x00100000;
           }
        }
        /**
         * <code>repeated float icon_offset = 21;</code>
         */
        public java.util.List<java.lang.Float>
            getIconOffsetList() {
          return ((bitField0_ & 0x00100000) != 0) ?
                   java.util.Collections.unmodifiableList(iconOffset_) : iconOffset_;
        }
        /**
         * <code>repeated float icon_offset = 21;</code>
         */
        public int getIconOffsetCount() {
          return iconOffset_.size();
        }
        /**
         * <code>repeated float icon_offset = 21;</code>
         */
        public float getIconOffset(int index) {
          return iconOffset_.getFloat(index);
        }
        /**
         * <code>repeated float icon_offset = 21;</code>
         */
        public Builder setIconOffset(
            int index, float value) {
          ensureIconOffsetIsMutable();
          iconOffset_.setFloat(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float icon_offset = 21;</code>
         */
        public Builder addIconOffset(float value) {
          ensureIconOffsetIsMutable();
          iconOffset_.addFloat(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float icon_offset = 21;</code>
         */
        public Builder addAllIconOffset(
            java.lang.Iterable<? extends java.lang.Float> values) {
          ensureIconOffsetIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, iconOffset_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float icon_offset = 21;</code>
         */
        public Builder clearIconOffset() {
          iconOffset_ = emptyFloatList();
          bitField0_ = (bitField0_ & ~0x00100000);
          onChanged();
          return this;
        }

        private int iconAnchor_ = 0;
        /**
         * <code>.com.tophap.mapbox_gl.proto.PositionAnchor icon_anchor = 22;</code>
         */
        public int getIconAnchorValue() {
          return iconAnchor_;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.PositionAnchor icon_anchor = 22;</code>
         */
        public Builder setIconAnchorValue(int value) {
          iconAnchor_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.PositionAnchor icon_anchor = 22;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor getIconAnchor() {
          @SuppressWarnings("deprecation")
          com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor result = com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor.valueOf(iconAnchor_);
          return result == null ? com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor.UNRECOGNIZED : result;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.PositionAnchor icon_anchor = 22;</code>
         */
        public Builder setIconAnchor(com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor value) {
          if (value == null) {
            throw new NullPointerException();
          }
          
          iconAnchor_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.PositionAnchor icon_anchor = 22;</code>
         */
        public Builder clearIconAnchor() {
          
          iconAnchor_ = 0;
          onChanged();
          return this;
        }

        private int iconPitchAlignment_ = 0;
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Alignment icon_pitch_alignment = 23;</code>
         */
        public int getIconPitchAlignmentValue() {
          return iconPitchAlignment_;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Alignment icon_pitch_alignment = 23;</code>
         */
        public Builder setIconPitchAlignmentValue(int value) {
          iconPitchAlignment_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Alignment icon_pitch_alignment = 23;</code>
         */
        public com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment getIconPitchAlignment() {
          @SuppressWarnings("deprecation")
          com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment result = com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment.valueOf(iconPitchAlignment_);
          return result == null ? com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment.UNRECOGNIZED : result;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Alignment icon_pitch_alignment = 23;</code>
         */
        public Builder setIconPitchAlignment(com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment value) {
          if (value == null) {
            throw new NullPointerException();
          }
          
          iconPitchAlignment_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Alignment icon_pitch_alignment = 23;</code>
         */
        public Builder clearIconPitchAlignment() {
          
          iconPitchAlignment_ = 0;
          onChanged();
          return this;
        }

        private int textPitchAlignment_ = 0;
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Alignment text_pitch_alignment = 24;</code>
         */
        public int getTextPitchAlignmentValue() {
          return textPitchAlignment_;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Alignment text_pitch_alignment = 24;</code>
         */
        public Builder setTextPitchAlignmentValue(int value) {
          textPitchAlignment_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Alignment text_pitch_alignment = 24;</code>
         */
        public com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment getTextPitchAlignment() {
          @SuppressWarnings("deprecation")
          com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment result = com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment.valueOf(textPitchAlignment_);
          return result == null ? com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment.UNRECOGNIZED : result;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Alignment text_pitch_alignment = 24;</code>
         */
        public Builder setTextPitchAlignment(com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment value) {
          if (value == null) {
            throw new NullPointerException();
          }
          
          textPitchAlignment_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Alignment text_pitch_alignment = 24;</code>
         */
        public Builder clearTextPitchAlignment() {
          
          textPitchAlignment_ = 0;
          onChanged();
          return this;
        }

        private int textRotationAlignment_ = 0;
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Alignment text_rotation_alignment = 25;</code>
         */
        public int getTextRotationAlignmentValue() {
          return textRotationAlignment_;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Alignment text_rotation_alignment = 25;</code>
         */
        public Builder setTextRotationAlignmentValue(int value) {
          textRotationAlignment_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Alignment text_rotation_alignment = 25;</code>
         */
        public com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment getTextRotationAlignment() {
          @SuppressWarnings("deprecation")
          com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment result = com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment.valueOf(textRotationAlignment_);
          return result == null ? com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment.UNRECOGNIZED : result;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Alignment text_rotation_alignment = 25;</code>
         */
        public Builder setTextRotationAlignment(com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Alignment value) {
          if (value == null) {
            throw new NullPointerException();
          }
          
          textRotationAlignment_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.Alignment text_rotation_alignment = 25;</code>
         */
        public Builder clearTextRotationAlignment() {
          
          textRotationAlignment_ = 0;
          onChanged();
          return this;
        }

        private java.util.List<com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSection> textField_ =
          java.util.Collections.emptyList();
        private void ensureTextFieldIsMutable() {
          if (!((bitField0_ & 0x02000000) != 0)) {
            textField_ = new java.util.ArrayList<com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSection>(textField_);
            bitField0_ |= 0x02000000;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSection, com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSection.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSectionOrBuilder> textFieldBuilder_;

        /**
         * <code>repeated .com.tophap.mapbox_gl.proto.FormattedSection text_field = 26;</code>
         */
        public java.util.List<com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSection> getTextFieldList() {
          if (textFieldBuilder_ == null) {
            return java.util.Collections.unmodifiableList(textField_);
          } else {
            return textFieldBuilder_.getMessageList();
          }
        }
        /**
         * <code>repeated .com.tophap.mapbox_gl.proto.FormattedSection text_field = 26;</code>
         */
        public int getTextFieldCount() {
          if (textFieldBuilder_ == null) {
            return textField_.size();
          } else {
            return textFieldBuilder_.getCount();
          }
        }
        /**
         * <code>repeated .com.tophap.mapbox_gl.proto.FormattedSection text_field = 26;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSection getTextField(int index) {
          if (textFieldBuilder_ == null) {
            return textField_.get(index);
          } else {
            return textFieldBuilder_.getMessage(index);
          }
        }
        /**
         * <code>repeated .com.tophap.mapbox_gl.proto.FormattedSection text_field = 26;</code>
         */
        public Builder setTextField(
            int index, com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSection value) {
          if (textFieldBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureTextFieldIsMutable();
            textField_.set(index, value);
            onChanged();
          } else {
            textFieldBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .com.tophap.mapbox_gl.proto.FormattedSection text_field = 26;</code>
         */
        public Builder setTextField(
            int index, com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSection.Builder builderForValue) {
          if (textFieldBuilder_ == null) {
            ensureTextFieldIsMutable();
            textField_.set(index, builderForValue.build());
            onChanged();
          } else {
            textFieldBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .com.tophap.mapbox_gl.proto.FormattedSection text_field = 26;</code>
         */
        public Builder addTextField(com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSection value) {
          if (textFieldBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureTextFieldIsMutable();
            textField_.add(value);
            onChanged();
          } else {
            textFieldBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <code>repeated .com.tophap.mapbox_gl.proto.FormattedSection text_field = 26;</code>
         */
        public Builder addTextField(
            int index, com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSection value) {
          if (textFieldBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureTextFieldIsMutable();
            textField_.add(index, value);
            onChanged();
          } else {
            textFieldBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .com.tophap.mapbox_gl.proto.FormattedSection text_field = 26;</code>
         */
        public Builder addTextField(
            com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSection.Builder builderForValue) {
          if (textFieldBuilder_ == null) {
            ensureTextFieldIsMutable();
            textField_.add(builderForValue.build());
            onChanged();
          } else {
            textFieldBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .com.tophap.mapbox_gl.proto.FormattedSection text_field = 26;</code>
         */
        public Builder addTextField(
            int index, com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSection.Builder builderForValue) {
          if (textFieldBuilder_ == null) {
            ensureTextFieldIsMutable();
            textField_.add(index, builderForValue.build());
            onChanged();
          } else {
            textFieldBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .com.tophap.mapbox_gl.proto.FormattedSection text_field = 26;</code>
         */
        public Builder addAllTextField(
            java.lang.Iterable<? extends com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSection> values) {
          if (textFieldBuilder_ == null) {
            ensureTextFieldIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, textField_);
            onChanged();
          } else {
            textFieldBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <code>repeated .com.tophap.mapbox_gl.proto.FormattedSection text_field = 26;</code>
         */
        public Builder clearTextField() {
          if (textFieldBuilder_ == null) {
            textField_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x02000000);
            onChanged();
          } else {
            textFieldBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>repeated .com.tophap.mapbox_gl.proto.FormattedSection text_field = 26;</code>
         */
        public Builder removeTextField(int index) {
          if (textFieldBuilder_ == null) {
            ensureTextFieldIsMutable();
            textField_.remove(index);
            onChanged();
          } else {
            textFieldBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <code>repeated .com.tophap.mapbox_gl.proto.FormattedSection text_field = 26;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSection.Builder getTextFieldBuilder(
            int index) {
          return getTextFieldFieldBuilder().getBuilder(index);
        }
        /**
         * <code>repeated .com.tophap.mapbox_gl.proto.FormattedSection text_field = 26;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSectionOrBuilder getTextFieldOrBuilder(
            int index) {
          if (textFieldBuilder_ == null) {
            return textField_.get(index);  } else {
            return textFieldBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <code>repeated .com.tophap.mapbox_gl.proto.FormattedSection text_field = 26;</code>
         */
        public java.util.List<? extends com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSectionOrBuilder> 
             getTextFieldOrBuilderList() {
          if (textFieldBuilder_ != null) {
            return textFieldBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(textField_);
          }
        }
        /**
         * <code>repeated .com.tophap.mapbox_gl.proto.FormattedSection text_field = 26;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSection.Builder addTextFieldBuilder() {
          return getTextFieldFieldBuilder().addBuilder(
              com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSection.getDefaultInstance());
        }
        /**
         * <code>repeated .com.tophap.mapbox_gl.proto.FormattedSection text_field = 26;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSection.Builder addTextFieldBuilder(
            int index) {
          return getTextFieldFieldBuilder().addBuilder(
              index, com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSection.getDefaultInstance());
        }
        /**
         * <code>repeated .com.tophap.mapbox_gl.proto.FormattedSection text_field = 26;</code>
         */
        public java.util.List<com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSection.Builder> 
             getTextFieldBuilderList() {
          return getTextFieldFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSection, com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSection.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSectionOrBuilder> 
            getTextFieldFieldBuilder() {
          if (textFieldBuilder_ == null) {
            textFieldBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSection, com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSection.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.FormattedSectionOrBuilder>(
                    textField_,
                    ((bitField0_ & 0x02000000) != 0),
                    getParentForChildren(),
                    isClean());
            textField_ = null;
          }
          return textFieldBuilder_;
        }

        private com.google.protobuf.LazyStringList textFont_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        private void ensureTextFontIsMutable() {
          if (!((bitField0_ & 0x04000000) != 0)) {
            textFont_ = new com.google.protobuf.LazyStringArrayList(textFont_);
            bitField0_ |= 0x04000000;
           }
        }
        /**
         * <code>repeated string text_font = 27;</code>
         */
        public com.google.protobuf.ProtocolStringList
            getTextFontList() {
          return textFont_.getUnmodifiableView();
        }
        /**
         * <code>repeated string text_font = 27;</code>
         */
        public int getTextFontCount() {
          return textFont_.size();
        }
        /**
         * <code>repeated string text_font = 27;</code>
         */
        public java.lang.String getTextFont(int index) {
          return textFont_.get(index);
        }
        /**
         * <code>repeated string text_font = 27;</code>
         */
        public com.google.protobuf.ByteString
            getTextFontBytes(int index) {
          return textFont_.getByteString(index);
        }
        /**
         * <code>repeated string text_font = 27;</code>
         */
        public Builder setTextFont(
            int index, java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  ensureTextFontIsMutable();
          textFont_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated string text_font = 27;</code>
         */
        public Builder addTextFont(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  ensureTextFontIsMutable();
          textFont_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated string text_font = 27;</code>
         */
        public Builder addAllTextFont(
            java.lang.Iterable<java.lang.String> values) {
          ensureTextFontIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, textFont_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated string text_font = 27;</code>
         */
        public Builder clearTextFont() {
          textFont_ = com.google.protobuf.LazyStringArrayList.EMPTY;
          bitField0_ = (bitField0_ & ~0x04000000);
          onChanged();
          return this;
        }
        /**
         * <code>repeated string text_font = 27;</code>
         */
        public Builder addTextFontBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          ensureTextFontIsMutable();
          textFont_.add(value);
          onChanged();
          return this;
        }

        private float textSize_ ;
        /**
         * <code>float text_size = 28;</code>
         */
        public float getTextSize() {
          return textSize_;
        }
        /**
         * <code>float text_size = 28;</code>
         */
        public Builder setTextSize(float value) {
          
          textSize_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float text_size = 28;</code>
         */
        public Builder clearTextSize() {
          
          textSize_ = 0F;
          onChanged();
          return this;
        }

        private float textMaxWidth_ ;
        /**
         * <code>float text_max_width = 29;</code>
         */
        public float getTextMaxWidth() {
          return textMaxWidth_;
        }
        /**
         * <code>float text_max_width = 29;</code>
         */
        public Builder setTextMaxWidth(float value) {
          
          textMaxWidth_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float text_max_width = 29;</code>
         */
        public Builder clearTextMaxWidth() {
          
          textMaxWidth_ = 0F;
          onChanged();
          return this;
        }

        private float textLineHeight_ ;
        /**
         * <code>float text_line_height = 30;</code>
         */
        public float getTextLineHeight() {
          return textLineHeight_;
        }
        /**
         * <code>float text_line_height = 30;</code>
         */
        public Builder setTextLineHeight(float value) {
          
          textLineHeight_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float text_line_height = 30;</code>
         */
        public Builder clearTextLineHeight() {
          
          textLineHeight_ = 0F;
          onChanged();
          return this;
        }

        private float textLetterSpacing_ ;
        /**
         * <code>float text_letter_spacing = 31;</code>
         */
        public float getTextLetterSpacing() {
          return textLetterSpacing_;
        }
        /**
         * <code>float text_letter_spacing = 31;</code>
         */
        public Builder setTextLetterSpacing(float value) {
          
          textLetterSpacing_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float text_letter_spacing = 31;</code>
         */
        public Builder clearTextLetterSpacing() {
          
          textLetterSpacing_ = 0F;
          onChanged();
          return this;
        }

        private int textJustify_ = 0;
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.TextJustify text_justify = 32;</code>
         */
        public int getTextJustifyValue() {
          return textJustify_;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.TextJustify text_justify = 32;</code>
         */
        public Builder setTextJustifyValue(int value) {
          textJustify_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.TextJustify text_justify = 32;</code>
         */
        public com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.TextJustify getTextJustify() {
          @SuppressWarnings("deprecation")
          com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.TextJustify result = com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.TextJustify.valueOf(textJustify_);
          return result == null ? com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.TextJustify.UNRECOGNIZED : result;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.TextJustify text_justify = 32;</code>
         */
        public Builder setTextJustify(com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.TextJustify value) {
          if (value == null) {
            throw new NullPointerException();
          }
          
          textJustify_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.TextJustify text_justify = 32;</code>
         */
        public Builder clearTextJustify() {
          
          textJustify_ = 0;
          onChanged();
          return this;
        }

        private float textRadialOffset_ ;
        /**
         * <code>float text_radial_offset = 33;</code>
         */
        public float getTextRadialOffset() {
          return textRadialOffset_;
        }
        /**
         * <code>float text_radial_offset = 33;</code>
         */
        public Builder setTextRadialOffset(float value) {
          
          textRadialOffset_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float text_radial_offset = 33;</code>
         */
        public Builder clearTextRadialOffset() {
          
          textRadialOffset_ = 0F;
          onChanged();
          return this;
        }

        private java.util.List<java.lang.Integer> textVariableAnchor_ =
          java.util.Collections.emptyList();
        private void ensureTextVariableAnchorIsMutable() {
          if (!((bitField1_ & 0x00000002) != 0)) {
            textVariableAnchor_ = new java.util.ArrayList<java.lang.Integer>(textVariableAnchor_);
            bitField1_ |= 0x00000002;
          }
        }
        /**
         * <code>repeated .com.tophap.mapbox_gl.proto.PositionAnchor text_variable_anchor = 34;</code>
         */
        public java.util.List<com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor> getTextVariableAnchorList() {
          return new com.google.protobuf.Internal.ListAdapter<
              java.lang.Integer, com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor>(textVariableAnchor_, textVariableAnchor_converter_);
        }
        /**
         * <code>repeated .com.tophap.mapbox_gl.proto.PositionAnchor text_variable_anchor = 34;</code>
         */
        public int getTextVariableAnchorCount() {
          return textVariableAnchor_.size();
        }
        /**
         * <code>repeated .com.tophap.mapbox_gl.proto.PositionAnchor text_variable_anchor = 34;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor getTextVariableAnchor(int index) {
          return textVariableAnchor_converter_.convert(textVariableAnchor_.get(index));
        }
        /**
         * <code>repeated .com.tophap.mapbox_gl.proto.PositionAnchor text_variable_anchor = 34;</code>
         */
        public Builder setTextVariableAnchor(
            int index, com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor value) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTextVariableAnchorIsMutable();
          textVariableAnchor_.set(index, value.getNumber());
          onChanged();
          return this;
        }
        /**
         * <code>repeated .com.tophap.mapbox_gl.proto.PositionAnchor text_variable_anchor = 34;</code>
         */
        public Builder addTextVariableAnchor(com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor value) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTextVariableAnchorIsMutable();
          textVariableAnchor_.add(value.getNumber());
          onChanged();
          return this;
        }
        /**
         * <code>repeated .com.tophap.mapbox_gl.proto.PositionAnchor text_variable_anchor = 34;</code>
         */
        public Builder addAllTextVariableAnchor(
            java.lang.Iterable<? extends com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor> values) {
          ensureTextVariableAnchorIsMutable();
          for (com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor value : values) {
            textVariableAnchor_.add(value.getNumber());
          }
          onChanged();
          return this;
        }
        /**
         * <code>repeated .com.tophap.mapbox_gl.proto.PositionAnchor text_variable_anchor = 34;</code>
         */
        public Builder clearTextVariableAnchor() {
          textVariableAnchor_ = java.util.Collections.emptyList();
          bitField1_ = (bitField1_ & ~0x00000002);
          onChanged();
          return this;
        }
        /**
         * <code>repeated .com.tophap.mapbox_gl.proto.PositionAnchor text_variable_anchor = 34;</code>
         */
        public java.util.List<java.lang.Integer>
        getTextVariableAnchorValueList() {
          return java.util.Collections.unmodifiableList(textVariableAnchor_);
        }
        /**
         * <code>repeated .com.tophap.mapbox_gl.proto.PositionAnchor text_variable_anchor = 34;</code>
         */
        public int getTextVariableAnchorValue(int index) {
          return textVariableAnchor_.get(index);
        }
        /**
         * <code>repeated .com.tophap.mapbox_gl.proto.PositionAnchor text_variable_anchor = 34;</code>
         */
        public Builder setTextVariableAnchorValue(
            int index, int value) {
          ensureTextVariableAnchorIsMutable();
          textVariableAnchor_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated .com.tophap.mapbox_gl.proto.PositionAnchor text_variable_anchor = 34;</code>
         */
        public Builder addTextVariableAnchorValue(int value) {
          ensureTextVariableAnchorIsMutable();
          textVariableAnchor_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated .com.tophap.mapbox_gl.proto.PositionAnchor text_variable_anchor = 34;</code>
         */
        public Builder addAllTextVariableAnchorValue(
            java.lang.Iterable<java.lang.Integer> values) {
          ensureTextVariableAnchorIsMutable();
          for (int value : values) {
            textVariableAnchor_.add(value);
          }
          onChanged();
          return this;
        }

        private int textAnchor_ = 0;
        /**
         * <code>.com.tophap.mapbox_gl.proto.PositionAnchor text_anchor = 35;</code>
         */
        public int getTextAnchorValue() {
          return textAnchor_;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.PositionAnchor text_anchor = 35;</code>
         */
        public Builder setTextAnchorValue(int value) {
          textAnchor_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.PositionAnchor text_anchor = 35;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor getTextAnchor() {
          @SuppressWarnings("deprecation")
          com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor result = com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor.valueOf(textAnchor_);
          return result == null ? com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor.UNRECOGNIZED : result;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.PositionAnchor text_anchor = 35;</code>
         */
        public Builder setTextAnchor(com.tophap.mapbox_gl.proto.MapboxUtil.PositionAnchor value) {
          if (value == null) {
            throw new NullPointerException();
          }
          
          textAnchor_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.PositionAnchor text_anchor = 35;</code>
         */
        public Builder clearTextAnchor() {
          
          textAnchor_ = 0;
          onChanged();
          return this;
        }

        private float textMaxAngle_ ;
        /**
         * <code>float text_max_angle = 36;</code>
         */
        public float getTextMaxAngle() {
          return textMaxAngle_;
        }
        /**
         * <code>float text_max_angle = 36;</code>
         */
        public Builder setTextMaxAngle(float value) {
          
          textMaxAngle_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float text_max_angle = 36;</code>
         */
        public Builder clearTextMaxAngle() {
          
          textMaxAngle_ = 0F;
          onChanged();
          return this;
        }

        private float textRotate_ ;
        /**
         * <code>float text_rotate = 37;</code>
         */
        public float getTextRotate() {
          return textRotate_;
        }
        /**
         * <code>float text_rotate = 37;</code>
         */
        public Builder setTextRotate(float value) {
          
          textRotate_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float text_rotate = 37;</code>
         */
        public Builder clearTextRotate() {
          
          textRotate_ = 0F;
          onChanged();
          return this;
        }

        private float textPadding_ ;
        /**
         * <code>float text_padding = 38;</code>
         */
        public float getTextPadding() {
          return textPadding_;
        }
        /**
         * <code>float text_padding = 38;</code>
         */
        public Builder setTextPadding(float value) {
          
          textPadding_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float text_padding = 38;</code>
         */
        public Builder clearTextPadding() {
          
          textPadding_ = 0F;
          onChanged();
          return this;
        }

        private boolean textKeepUpright_ ;
        /**
         * <code>bool text_keep_upright = 39;</code>
         */
        public boolean getTextKeepUpright() {
          return textKeepUpright_;
        }
        /**
         * <code>bool text_keep_upright = 39;</code>
         */
        public Builder setTextKeepUpright(boolean value) {
          
          textKeepUpright_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>bool text_keep_upright = 39;</code>
         */
        public Builder clearTextKeepUpright() {
          
          textKeepUpright_ = false;
          onChanged();
          return this;
        }

        private int textTransform_ = 0;
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.TextTransform text_transform = 40;</code>
         */
        public int getTextTransformValue() {
          return textTransform_;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.TextTransform text_transform = 40;</code>
         */
        public Builder setTextTransformValue(int value) {
          textTransform_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.TextTransform text_transform = 40;</code>
         */
        public com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.TextTransform getTextTransform() {
          @SuppressWarnings("deprecation")
          com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.TextTransform result = com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.TextTransform.valueOf(textTransform_);
          return result == null ? com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.TextTransform.UNRECOGNIZED : result;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.TextTransform text_transform = 40;</code>
         */
        public Builder setTextTransform(com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.TextTransform value) {
          if (value == null) {
            throw new NullPointerException();
          }
          
          textTransform_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol.TextTransform text_transform = 40;</code>
         */
        public Builder clearTextTransform() {
          
          textTransform_ = 0;
          onChanged();
          return this;
        }

        private com.google.protobuf.Internal.FloatList textOffset_ = emptyFloatList();
        private void ensureTextOffsetIsMutable() {
          if (!((bitField1_ & 0x00000100) != 0)) {
            textOffset_ = mutableCopy(textOffset_);
            bitField1_ |= 0x00000100;
           }
        }
        /**
         * <code>repeated float text_offset = 41;</code>
         */
        public java.util.List<java.lang.Float>
            getTextOffsetList() {
          return ((bitField1_ & 0x00000100) != 0) ?
                   java.util.Collections.unmodifiableList(textOffset_) : textOffset_;
        }
        /**
         * <code>repeated float text_offset = 41;</code>
         */
        public int getTextOffsetCount() {
          return textOffset_.size();
        }
        /**
         * <code>repeated float text_offset = 41;</code>
         */
        public float getTextOffset(int index) {
          return textOffset_.getFloat(index);
        }
        /**
         * <code>repeated float text_offset = 41;</code>
         */
        public Builder setTextOffset(
            int index, float value) {
          ensureTextOffsetIsMutable();
          textOffset_.setFloat(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float text_offset = 41;</code>
         */
        public Builder addTextOffset(float value) {
          ensureTextOffsetIsMutable();
          textOffset_.addFloat(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float text_offset = 41;</code>
         */
        public Builder addAllTextOffset(
            java.lang.Iterable<? extends java.lang.Float> values) {
          ensureTextOffsetIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, textOffset_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float text_offset = 41;</code>
         */
        public Builder clearTextOffset() {
          textOffset_ = emptyFloatList();
          bitField1_ = (bitField1_ & ~0x00000100);
          onChanged();
          return this;
        }

        private boolean textAllowOverlap_ ;
        /**
         * <code>bool text_allow_overlap = 42;</code>
         */
        public boolean getTextAllowOverlap() {
          return textAllowOverlap_;
        }
        /**
         * <code>bool text_allow_overlap = 42;</code>
         */
        public Builder setTextAllowOverlap(boolean value) {
          
          textAllowOverlap_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>bool text_allow_overlap = 42;</code>
         */
        public Builder clearTextAllowOverlap() {
          
          textAllowOverlap_ = false;
          onChanged();
          return this;
        }

        private boolean textIgnorePlacement_ ;
        /**
         * <code>bool text_ignore_placement = 43;</code>
         */
        public boolean getTextIgnorePlacement() {
          return textIgnorePlacement_;
        }
        /**
         * <code>bool text_ignore_placement = 43;</code>
         */
        public Builder setTextIgnorePlacement(boolean value) {
          
          textIgnorePlacement_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>bool text_ignore_placement = 43;</code>
         */
        public Builder clearTextIgnorePlacement() {
          
          textIgnorePlacement_ = false;
          onChanged();
          return this;
        }

        private boolean textOptional_ ;
        /**
         * <code>bool text_optional = 44;</code>
         */
        public boolean getTextOptional() {
          return textOptional_;
        }
        /**
         * <code>bool text_optional = 44;</code>
         */
        public Builder setTextOptional(boolean value) {
          
          textOptional_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>bool text_optional = 44;</code>
         */
        public Builder clearTextOptional() {
          
          textOptional_ = false;
          onChanged();
          return this;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.Color iconColor_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder> iconColorBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color icon_color = 46;</code>
         */
        public boolean hasIconColor() {
          return iconColorBuilder_ != null || iconColor_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color icon_color = 46;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.Color getIconColor() {
          if (iconColorBuilder_ == null) {
            return iconColor_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : iconColor_;
          } else {
            return iconColorBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color icon_color = 46;</code>
         */
        public Builder setIconColor(com.tophap.mapbox_gl.proto.MapboxUtil.Color value) {
          if (iconColorBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            iconColor_ = value;
            onChanged();
          } else {
            iconColorBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color icon_color = 46;</code>
         */
        public Builder setIconColor(
            com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder builderForValue) {
          if (iconColorBuilder_ == null) {
            iconColor_ = builderForValue.build();
            onChanged();
          } else {
            iconColorBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color icon_color = 46;</code>
         */
        public Builder mergeIconColor(com.tophap.mapbox_gl.proto.MapboxUtil.Color value) {
          if (iconColorBuilder_ == null) {
            if (iconColor_ != null) {
              iconColor_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.newBuilder(iconColor_).mergeFrom(value).buildPartial();
            } else {
              iconColor_ = value;
            }
            onChanged();
          } else {
            iconColorBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color icon_color = 46;</code>
         */
        public Builder clearIconColor() {
          if (iconColorBuilder_ == null) {
            iconColor_ = null;
            onChanged();
          } else {
            iconColor_ = null;
            iconColorBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color icon_color = 46;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder getIconColorBuilder() {
          
          onChanged();
          return getIconColorFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color icon_color = 46;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getIconColorOrBuilder() {
          if (iconColorBuilder_ != null) {
            return iconColorBuilder_.getMessageOrBuilder();
          } else {
            return iconColor_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : iconColor_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color icon_color = 46;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder> 
            getIconColorFieldBuilder() {
          if (iconColorBuilder_ == null) {
            iconColorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder>(
                    getIconColor(),
                    getParentForChildren(),
                    isClean());
            iconColor_ = null;
          }
          return iconColorBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.Color iconHaloColor_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder> iconHaloColorBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color icon_halo_color = 47;</code>
         */
        public boolean hasIconHaloColor() {
          return iconHaloColorBuilder_ != null || iconHaloColor_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color icon_halo_color = 47;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.Color getIconHaloColor() {
          if (iconHaloColorBuilder_ == null) {
            return iconHaloColor_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : iconHaloColor_;
          } else {
            return iconHaloColorBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color icon_halo_color = 47;</code>
         */
        public Builder setIconHaloColor(com.tophap.mapbox_gl.proto.MapboxUtil.Color value) {
          if (iconHaloColorBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            iconHaloColor_ = value;
            onChanged();
          } else {
            iconHaloColorBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color icon_halo_color = 47;</code>
         */
        public Builder setIconHaloColor(
            com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder builderForValue) {
          if (iconHaloColorBuilder_ == null) {
            iconHaloColor_ = builderForValue.build();
            onChanged();
          } else {
            iconHaloColorBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color icon_halo_color = 47;</code>
         */
        public Builder mergeIconHaloColor(com.tophap.mapbox_gl.proto.MapboxUtil.Color value) {
          if (iconHaloColorBuilder_ == null) {
            if (iconHaloColor_ != null) {
              iconHaloColor_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.newBuilder(iconHaloColor_).mergeFrom(value).buildPartial();
            } else {
              iconHaloColor_ = value;
            }
            onChanged();
          } else {
            iconHaloColorBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color icon_halo_color = 47;</code>
         */
        public Builder clearIconHaloColor() {
          if (iconHaloColorBuilder_ == null) {
            iconHaloColor_ = null;
            onChanged();
          } else {
            iconHaloColor_ = null;
            iconHaloColorBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color icon_halo_color = 47;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder getIconHaloColorBuilder() {
          
          onChanged();
          return getIconHaloColorFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color icon_halo_color = 47;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getIconHaloColorOrBuilder() {
          if (iconHaloColorBuilder_ != null) {
            return iconHaloColorBuilder_.getMessageOrBuilder();
          } else {
            return iconHaloColor_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : iconHaloColor_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color icon_halo_color = 47;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder> 
            getIconHaloColorFieldBuilder() {
          if (iconHaloColorBuilder_ == null) {
            iconHaloColorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder>(
                    getIconHaloColor(),
                    getParentForChildren(),
                    isClean());
            iconHaloColor_ = null;
          }
          return iconHaloColorBuilder_;
        }

        private float iconHaloWidth_ ;
        /**
         * <code>float icon_halo_width = 48;</code>
         */
        public float getIconHaloWidth() {
          return iconHaloWidth_;
        }
        /**
         * <code>float icon_halo_width = 48;</code>
         */
        public Builder setIconHaloWidth(float value) {
          
          iconHaloWidth_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float icon_halo_width = 48;</code>
         */
        public Builder clearIconHaloWidth() {
          
          iconHaloWidth_ = 0F;
          onChanged();
          return this;
        }

        private float iconHaloBlur_ ;
        /**
         * <code>float icon_halo_blur = 49;</code>
         */
        public float getIconHaloBlur() {
          return iconHaloBlur_;
        }
        /**
         * <code>float icon_halo_blur = 49;</code>
         */
        public Builder setIconHaloBlur(float value) {
          
          iconHaloBlur_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float icon_halo_blur = 49;</code>
         */
        public Builder clearIconHaloBlur() {
          
          iconHaloBlur_ = 0F;
          onChanged();
          return this;
        }

        private com.google.protobuf.Internal.FloatList iconTranslate_ = emptyFloatList();
        private void ensureIconTranslateIsMutable() {
          if (!((bitField1_ & 0x00010000) != 0)) {
            iconTranslate_ = mutableCopy(iconTranslate_);
            bitField1_ |= 0x00010000;
           }
        }
        /**
         * <code>repeated float icon_translate = 50;</code>
         */
        public java.util.List<java.lang.Float>
            getIconTranslateList() {
          return ((bitField1_ & 0x00010000) != 0) ?
                   java.util.Collections.unmodifiableList(iconTranslate_) : iconTranslate_;
        }
        /**
         * <code>repeated float icon_translate = 50;</code>
         */
        public int getIconTranslateCount() {
          return iconTranslate_.size();
        }
        /**
         * <code>repeated float icon_translate = 50;</code>
         */
        public float getIconTranslate(int index) {
          return iconTranslate_.getFloat(index);
        }
        /**
         * <code>repeated float icon_translate = 50;</code>
         */
        public Builder setIconTranslate(
            int index, float value) {
          ensureIconTranslateIsMutable();
          iconTranslate_.setFloat(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float icon_translate = 50;</code>
         */
        public Builder addIconTranslate(float value) {
          ensureIconTranslateIsMutable();
          iconTranslate_.addFloat(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float icon_translate = 50;</code>
         */
        public Builder addAllIconTranslate(
            java.lang.Iterable<? extends java.lang.Float> values) {
          ensureIconTranslateIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, iconTranslate_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float icon_translate = 50;</code>
         */
        public Builder clearIconTranslate() {
          iconTranslate_ = emptyFloatList();
          bitField1_ = (bitField1_ & ~0x00010000);
          onChanged();
          return this;
        }

        private int iconTranslateAnchor_ = 0;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor icon_translate_anchor = 51;</code>
         */
        public int getIconTranslateAnchorValue() {
          return iconTranslateAnchor_;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor icon_translate_anchor = 51;</code>
         */
        public Builder setIconTranslateAnchorValue(int value) {
          iconTranslateAnchor_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor icon_translate_anchor = 51;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor getIconTranslateAnchor() {
          @SuppressWarnings("deprecation")
          com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor result = com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.valueOf(iconTranslateAnchor_);
          return result == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.UNRECOGNIZED : result;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor icon_translate_anchor = 51;</code>
         */
        public Builder setIconTranslateAnchor(com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor value) {
          if (value == null) {
            throw new NullPointerException();
          }
          
          iconTranslateAnchor_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor icon_translate_anchor = 51;</code>
         */
        public Builder clearIconTranslateAnchor() {
          
          iconTranslateAnchor_ = 0;
          onChanged();
          return this;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.Color textColor_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder> textColorBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color text_color = 53;</code>
         */
        public boolean hasTextColor() {
          return textColorBuilder_ != null || textColor_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color text_color = 53;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.Color getTextColor() {
          if (textColorBuilder_ == null) {
            return textColor_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : textColor_;
          } else {
            return textColorBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color text_color = 53;</code>
         */
        public Builder setTextColor(com.tophap.mapbox_gl.proto.MapboxUtil.Color value) {
          if (textColorBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            textColor_ = value;
            onChanged();
          } else {
            textColorBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color text_color = 53;</code>
         */
        public Builder setTextColor(
            com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder builderForValue) {
          if (textColorBuilder_ == null) {
            textColor_ = builderForValue.build();
            onChanged();
          } else {
            textColorBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color text_color = 53;</code>
         */
        public Builder mergeTextColor(com.tophap.mapbox_gl.proto.MapboxUtil.Color value) {
          if (textColorBuilder_ == null) {
            if (textColor_ != null) {
              textColor_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.newBuilder(textColor_).mergeFrom(value).buildPartial();
            } else {
              textColor_ = value;
            }
            onChanged();
          } else {
            textColorBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color text_color = 53;</code>
         */
        public Builder clearTextColor() {
          if (textColorBuilder_ == null) {
            textColor_ = null;
            onChanged();
          } else {
            textColor_ = null;
            textColorBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color text_color = 53;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder getTextColorBuilder() {
          
          onChanged();
          return getTextColorFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color text_color = 53;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getTextColorOrBuilder() {
          if (textColorBuilder_ != null) {
            return textColorBuilder_.getMessageOrBuilder();
          } else {
            return textColor_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : textColor_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color text_color = 53;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder> 
            getTextColorFieldBuilder() {
          if (textColorBuilder_ == null) {
            textColorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder>(
                    getTextColor(),
                    getParentForChildren(),
                    isClean());
            textColor_ = null;
          }
          return textColorBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.Color textHaloColor_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder> textHaloColorBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color text_halo_color = 54;</code>
         */
        public boolean hasTextHaloColor() {
          return textHaloColorBuilder_ != null || textHaloColor_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color text_halo_color = 54;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.Color getTextHaloColor() {
          if (textHaloColorBuilder_ == null) {
            return textHaloColor_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : textHaloColor_;
          } else {
            return textHaloColorBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color text_halo_color = 54;</code>
         */
        public Builder setTextHaloColor(com.tophap.mapbox_gl.proto.MapboxUtil.Color value) {
          if (textHaloColorBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            textHaloColor_ = value;
            onChanged();
          } else {
            textHaloColorBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color text_halo_color = 54;</code>
         */
        public Builder setTextHaloColor(
            com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder builderForValue) {
          if (textHaloColorBuilder_ == null) {
            textHaloColor_ = builderForValue.build();
            onChanged();
          } else {
            textHaloColorBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color text_halo_color = 54;</code>
         */
        public Builder mergeTextHaloColor(com.tophap.mapbox_gl.proto.MapboxUtil.Color value) {
          if (textHaloColorBuilder_ == null) {
            if (textHaloColor_ != null) {
              textHaloColor_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.newBuilder(textHaloColor_).mergeFrom(value).buildPartial();
            } else {
              textHaloColor_ = value;
            }
            onChanged();
          } else {
            textHaloColorBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color text_halo_color = 54;</code>
         */
        public Builder clearTextHaloColor() {
          if (textHaloColorBuilder_ == null) {
            textHaloColor_ = null;
            onChanged();
          } else {
            textHaloColor_ = null;
            textHaloColorBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color text_halo_color = 54;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder getTextHaloColorBuilder() {
          
          onChanged();
          return getTextHaloColorFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color text_halo_color = 54;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder getTextHaloColorOrBuilder() {
          if (textHaloColorBuilder_ != null) {
            return textHaloColorBuilder_.getMessageOrBuilder();
          } else {
            return textHaloColor_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.Color.getDefaultInstance() : textHaloColor_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.Color text_halo_color = 54;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder> 
            getTextHaloColorFieldBuilder() {
          if (textHaloColorBuilder_ == null) {
            textHaloColorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.Color, com.tophap.mapbox_gl.proto.MapboxUtil.Color.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.ColorOrBuilder>(
                    getTextHaloColor(),
                    getParentForChildren(),
                    isClean());
            textHaloColor_ = null;
          }
          return textHaloColorBuilder_;
        }

        private float textHaloWidth_ ;
        /**
         * <code>float text_halo_width = 55;</code>
         */
        public float getTextHaloWidth() {
          return textHaloWidth_;
        }
        /**
         * <code>float text_halo_width = 55;</code>
         */
        public Builder setTextHaloWidth(float value) {
          
          textHaloWidth_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float text_halo_width = 55;</code>
         */
        public Builder clearTextHaloWidth() {
          
          textHaloWidth_ = 0F;
          onChanged();
          return this;
        }

        private float textHaloBlur_ ;
        /**
         * <code>float text_halo_blur = 56;</code>
         */
        public float getTextHaloBlur() {
          return textHaloBlur_;
        }
        /**
         * <code>float text_halo_blur = 56;</code>
         */
        public Builder setTextHaloBlur(float value) {
          
          textHaloBlur_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>float text_halo_blur = 56;</code>
         */
        public Builder clearTextHaloBlur() {
          
          textHaloBlur_ = 0F;
          onChanged();
          return this;
        }

        private com.google.protobuf.Internal.FloatList textTranslate_ = emptyFloatList();
        private void ensureTextTranslateIsMutable() {
          if (!((bitField1_ & 0x00400000) != 0)) {
            textTranslate_ = mutableCopy(textTranslate_);
            bitField1_ |= 0x00400000;
           }
        }
        /**
         * <code>repeated float text_translate = 57;</code>
         */
        public java.util.List<java.lang.Float>
            getTextTranslateList() {
          return ((bitField1_ & 0x00400000) != 0) ?
                   java.util.Collections.unmodifiableList(textTranslate_) : textTranslate_;
        }
        /**
         * <code>repeated float text_translate = 57;</code>
         */
        public int getTextTranslateCount() {
          return textTranslate_.size();
        }
        /**
         * <code>repeated float text_translate = 57;</code>
         */
        public float getTextTranslate(int index) {
          return textTranslate_.getFloat(index);
        }
        /**
         * <code>repeated float text_translate = 57;</code>
         */
        public Builder setTextTranslate(
            int index, float value) {
          ensureTextTranslateIsMutable();
          textTranslate_.setFloat(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float text_translate = 57;</code>
         */
        public Builder addTextTranslate(float value) {
          ensureTextTranslateIsMutable();
          textTranslate_.addFloat(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float text_translate = 57;</code>
         */
        public Builder addAllTextTranslate(
            java.lang.Iterable<? extends java.lang.Float> values) {
          ensureTextTranslateIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, textTranslate_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated float text_translate = 57;</code>
         */
        public Builder clearTextTranslate() {
          textTranslate_ = emptyFloatList();
          bitField1_ = (bitField1_ & ~0x00400000);
          onChanged();
          return this;
        }

        private int textTranslateAnchor_ = 0;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor text_translate_anchor = 58;</code>
         */
        public int getTextTranslateAnchorValue() {
          return textTranslateAnchor_;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor text_translate_anchor = 58;</code>
         */
        public Builder setTextTranslateAnchorValue(int value) {
          textTranslateAnchor_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor text_translate_anchor = 58;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor getTextTranslateAnchor() {
          @SuppressWarnings("deprecation")
          com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor result = com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.valueOf(textTranslateAnchor_);
          return result == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor.UNRECOGNIZED : result;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor text_translate_anchor = 58;</code>
         */
        public Builder setTextTranslateAnchor(com.tophap.mapbox_gl.proto.MapboxUtil.TranslateAnchor value) {
          if (value == null) {
            throw new NullPointerException();
          }
          
          textTranslateAnchor_ = value.getNumber();
          onChanged();
          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TranslateAnchor text_translate_anchor = 58;</code>
         */
        public Builder clearTextTranslateAnchor() {
          
          textTranslateAnchor_ = 0;
          onChanged();
          return this;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions iconOpacityTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> iconOpacityTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_opacity_transition = 59;</code>
         */
        public boolean hasIconOpacityTransition() {
          return iconOpacityTransitionBuilder_ != null || iconOpacityTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_opacity_transition = 59;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getIconOpacityTransition() {
          if (iconOpacityTransitionBuilder_ == null) {
            return iconOpacityTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : iconOpacityTransition_;
          } else {
            return iconOpacityTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_opacity_transition = 59;</code>
         */
        public Builder setIconOpacityTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (iconOpacityTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            iconOpacityTransition_ = value;
            onChanged();
          } else {
            iconOpacityTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_opacity_transition = 59;</code>
         */
        public Builder setIconOpacityTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (iconOpacityTransitionBuilder_ == null) {
            iconOpacityTransition_ = builderForValue.build();
            onChanged();
          } else {
            iconOpacityTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_opacity_transition = 59;</code>
         */
        public Builder mergeIconOpacityTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (iconOpacityTransitionBuilder_ == null) {
            if (iconOpacityTransition_ != null) {
              iconOpacityTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(iconOpacityTransition_).mergeFrom(value).buildPartial();
            } else {
              iconOpacityTransition_ = value;
            }
            onChanged();
          } else {
            iconOpacityTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_opacity_transition = 59;</code>
         */
        public Builder clearIconOpacityTransition() {
          if (iconOpacityTransitionBuilder_ == null) {
            iconOpacityTransition_ = null;
            onChanged();
          } else {
            iconOpacityTransition_ = null;
            iconOpacityTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_opacity_transition = 59;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getIconOpacityTransitionBuilder() {
          
          onChanged();
          return getIconOpacityTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_opacity_transition = 59;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getIconOpacityTransitionOrBuilder() {
          if (iconOpacityTransitionBuilder_ != null) {
            return iconOpacityTransitionBuilder_.getMessageOrBuilder();
          } else {
            return iconOpacityTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : iconOpacityTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_opacity_transition = 59;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getIconOpacityTransitionFieldBuilder() {
          if (iconOpacityTransitionBuilder_ == null) {
            iconOpacityTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getIconOpacityTransition(),
                    getParentForChildren(),
                    isClean());
            iconOpacityTransition_ = null;
          }
          return iconOpacityTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions iconColorTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> iconColorTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_color_transition = 60;</code>
         */
        public boolean hasIconColorTransition() {
          return iconColorTransitionBuilder_ != null || iconColorTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_color_transition = 60;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getIconColorTransition() {
          if (iconColorTransitionBuilder_ == null) {
            return iconColorTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : iconColorTransition_;
          } else {
            return iconColorTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_color_transition = 60;</code>
         */
        public Builder setIconColorTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (iconColorTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            iconColorTransition_ = value;
            onChanged();
          } else {
            iconColorTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_color_transition = 60;</code>
         */
        public Builder setIconColorTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (iconColorTransitionBuilder_ == null) {
            iconColorTransition_ = builderForValue.build();
            onChanged();
          } else {
            iconColorTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_color_transition = 60;</code>
         */
        public Builder mergeIconColorTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (iconColorTransitionBuilder_ == null) {
            if (iconColorTransition_ != null) {
              iconColorTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(iconColorTransition_).mergeFrom(value).buildPartial();
            } else {
              iconColorTransition_ = value;
            }
            onChanged();
          } else {
            iconColorTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_color_transition = 60;</code>
         */
        public Builder clearIconColorTransition() {
          if (iconColorTransitionBuilder_ == null) {
            iconColorTransition_ = null;
            onChanged();
          } else {
            iconColorTransition_ = null;
            iconColorTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_color_transition = 60;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getIconColorTransitionBuilder() {
          
          onChanged();
          return getIconColorTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_color_transition = 60;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getIconColorTransitionOrBuilder() {
          if (iconColorTransitionBuilder_ != null) {
            return iconColorTransitionBuilder_.getMessageOrBuilder();
          } else {
            return iconColorTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : iconColorTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_color_transition = 60;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getIconColorTransitionFieldBuilder() {
          if (iconColorTransitionBuilder_ == null) {
            iconColorTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getIconColorTransition(),
                    getParentForChildren(),
                    isClean());
            iconColorTransition_ = null;
          }
          return iconColorTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions iconHaloColorTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> iconHaloColorTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_color_transition = 61;</code>
         */
        public boolean hasIconHaloColorTransition() {
          return iconHaloColorTransitionBuilder_ != null || iconHaloColorTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_color_transition = 61;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getIconHaloColorTransition() {
          if (iconHaloColorTransitionBuilder_ == null) {
            return iconHaloColorTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : iconHaloColorTransition_;
          } else {
            return iconHaloColorTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_color_transition = 61;</code>
         */
        public Builder setIconHaloColorTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (iconHaloColorTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            iconHaloColorTransition_ = value;
            onChanged();
          } else {
            iconHaloColorTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_color_transition = 61;</code>
         */
        public Builder setIconHaloColorTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (iconHaloColorTransitionBuilder_ == null) {
            iconHaloColorTransition_ = builderForValue.build();
            onChanged();
          } else {
            iconHaloColorTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_color_transition = 61;</code>
         */
        public Builder mergeIconHaloColorTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (iconHaloColorTransitionBuilder_ == null) {
            if (iconHaloColorTransition_ != null) {
              iconHaloColorTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(iconHaloColorTransition_).mergeFrom(value).buildPartial();
            } else {
              iconHaloColorTransition_ = value;
            }
            onChanged();
          } else {
            iconHaloColorTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_color_transition = 61;</code>
         */
        public Builder clearIconHaloColorTransition() {
          if (iconHaloColorTransitionBuilder_ == null) {
            iconHaloColorTransition_ = null;
            onChanged();
          } else {
            iconHaloColorTransition_ = null;
            iconHaloColorTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_color_transition = 61;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getIconHaloColorTransitionBuilder() {
          
          onChanged();
          return getIconHaloColorTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_color_transition = 61;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getIconHaloColorTransitionOrBuilder() {
          if (iconHaloColorTransitionBuilder_ != null) {
            return iconHaloColorTransitionBuilder_.getMessageOrBuilder();
          } else {
            return iconHaloColorTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : iconHaloColorTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_color_transition = 61;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getIconHaloColorTransitionFieldBuilder() {
          if (iconHaloColorTransitionBuilder_ == null) {
            iconHaloColorTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getIconHaloColorTransition(),
                    getParentForChildren(),
                    isClean());
            iconHaloColorTransition_ = null;
          }
          return iconHaloColorTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions iconHaloWidthTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> iconHaloWidthTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_width_transition = 62;</code>
         */
        public boolean hasIconHaloWidthTransition() {
          return iconHaloWidthTransitionBuilder_ != null || iconHaloWidthTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_width_transition = 62;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getIconHaloWidthTransition() {
          if (iconHaloWidthTransitionBuilder_ == null) {
            return iconHaloWidthTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : iconHaloWidthTransition_;
          } else {
            return iconHaloWidthTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_width_transition = 62;</code>
         */
        public Builder setIconHaloWidthTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (iconHaloWidthTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            iconHaloWidthTransition_ = value;
            onChanged();
          } else {
            iconHaloWidthTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_width_transition = 62;</code>
         */
        public Builder setIconHaloWidthTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (iconHaloWidthTransitionBuilder_ == null) {
            iconHaloWidthTransition_ = builderForValue.build();
            onChanged();
          } else {
            iconHaloWidthTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_width_transition = 62;</code>
         */
        public Builder mergeIconHaloWidthTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (iconHaloWidthTransitionBuilder_ == null) {
            if (iconHaloWidthTransition_ != null) {
              iconHaloWidthTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(iconHaloWidthTransition_).mergeFrom(value).buildPartial();
            } else {
              iconHaloWidthTransition_ = value;
            }
            onChanged();
          } else {
            iconHaloWidthTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_width_transition = 62;</code>
         */
        public Builder clearIconHaloWidthTransition() {
          if (iconHaloWidthTransitionBuilder_ == null) {
            iconHaloWidthTransition_ = null;
            onChanged();
          } else {
            iconHaloWidthTransition_ = null;
            iconHaloWidthTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_width_transition = 62;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getIconHaloWidthTransitionBuilder() {
          
          onChanged();
          return getIconHaloWidthTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_width_transition = 62;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getIconHaloWidthTransitionOrBuilder() {
          if (iconHaloWidthTransitionBuilder_ != null) {
            return iconHaloWidthTransitionBuilder_.getMessageOrBuilder();
          } else {
            return iconHaloWidthTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : iconHaloWidthTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_width_transition = 62;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getIconHaloWidthTransitionFieldBuilder() {
          if (iconHaloWidthTransitionBuilder_ == null) {
            iconHaloWidthTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getIconHaloWidthTransition(),
                    getParentForChildren(),
                    isClean());
            iconHaloWidthTransition_ = null;
          }
          return iconHaloWidthTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions iconHaloBlurTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> iconHaloBlurTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_blur_transition = 63;</code>
         */
        public boolean hasIconHaloBlurTransition() {
          return iconHaloBlurTransitionBuilder_ != null || iconHaloBlurTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_blur_transition = 63;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getIconHaloBlurTransition() {
          if (iconHaloBlurTransitionBuilder_ == null) {
            return iconHaloBlurTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : iconHaloBlurTransition_;
          } else {
            return iconHaloBlurTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_blur_transition = 63;</code>
         */
        public Builder setIconHaloBlurTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (iconHaloBlurTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            iconHaloBlurTransition_ = value;
            onChanged();
          } else {
            iconHaloBlurTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_blur_transition = 63;</code>
         */
        public Builder setIconHaloBlurTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (iconHaloBlurTransitionBuilder_ == null) {
            iconHaloBlurTransition_ = builderForValue.build();
            onChanged();
          } else {
            iconHaloBlurTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_blur_transition = 63;</code>
         */
        public Builder mergeIconHaloBlurTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (iconHaloBlurTransitionBuilder_ == null) {
            if (iconHaloBlurTransition_ != null) {
              iconHaloBlurTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(iconHaloBlurTransition_).mergeFrom(value).buildPartial();
            } else {
              iconHaloBlurTransition_ = value;
            }
            onChanged();
          } else {
            iconHaloBlurTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_blur_transition = 63;</code>
         */
        public Builder clearIconHaloBlurTransition() {
          if (iconHaloBlurTransitionBuilder_ == null) {
            iconHaloBlurTransition_ = null;
            onChanged();
          } else {
            iconHaloBlurTransition_ = null;
            iconHaloBlurTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_blur_transition = 63;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getIconHaloBlurTransitionBuilder() {
          
          onChanged();
          return getIconHaloBlurTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_blur_transition = 63;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getIconHaloBlurTransitionOrBuilder() {
          if (iconHaloBlurTransitionBuilder_ != null) {
            return iconHaloBlurTransitionBuilder_.getMessageOrBuilder();
          } else {
            return iconHaloBlurTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : iconHaloBlurTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_halo_blur_transition = 63;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getIconHaloBlurTransitionFieldBuilder() {
          if (iconHaloBlurTransitionBuilder_ == null) {
            iconHaloBlurTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getIconHaloBlurTransition(),
                    getParentForChildren(),
                    isClean());
            iconHaloBlurTransition_ = null;
          }
          return iconHaloBlurTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions iconTranslateTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> iconTranslateTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_translate_transition = 64;</code>
         */
        public boolean hasIconTranslateTransition() {
          return iconTranslateTransitionBuilder_ != null || iconTranslateTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_translate_transition = 64;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getIconTranslateTransition() {
          if (iconTranslateTransitionBuilder_ == null) {
            return iconTranslateTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : iconTranslateTransition_;
          } else {
            return iconTranslateTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_translate_transition = 64;</code>
         */
        public Builder setIconTranslateTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (iconTranslateTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            iconTranslateTransition_ = value;
            onChanged();
          } else {
            iconTranslateTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_translate_transition = 64;</code>
         */
        public Builder setIconTranslateTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (iconTranslateTransitionBuilder_ == null) {
            iconTranslateTransition_ = builderForValue.build();
            onChanged();
          } else {
            iconTranslateTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_translate_transition = 64;</code>
         */
        public Builder mergeIconTranslateTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (iconTranslateTransitionBuilder_ == null) {
            if (iconTranslateTransition_ != null) {
              iconTranslateTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(iconTranslateTransition_).mergeFrom(value).buildPartial();
            } else {
              iconTranslateTransition_ = value;
            }
            onChanged();
          } else {
            iconTranslateTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_translate_transition = 64;</code>
         */
        public Builder clearIconTranslateTransition() {
          if (iconTranslateTransitionBuilder_ == null) {
            iconTranslateTransition_ = null;
            onChanged();
          } else {
            iconTranslateTransition_ = null;
            iconTranslateTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_translate_transition = 64;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getIconTranslateTransitionBuilder() {
          
          onChanged();
          return getIconTranslateTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_translate_transition = 64;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getIconTranslateTransitionOrBuilder() {
          if (iconTranslateTransitionBuilder_ != null) {
            return iconTranslateTransitionBuilder_.getMessageOrBuilder();
          } else {
            return iconTranslateTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : iconTranslateTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions icon_translate_transition = 64;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getIconTranslateTransitionFieldBuilder() {
          if (iconTranslateTransitionBuilder_ == null) {
            iconTranslateTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getIconTranslateTransition(),
                    getParentForChildren(),
                    isClean());
            iconTranslateTransition_ = null;
          }
          return iconTranslateTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions textOpacityTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> textOpacityTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_opacity_transition = 65;</code>
         */
        public boolean hasTextOpacityTransition() {
          return textOpacityTransitionBuilder_ != null || textOpacityTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_opacity_transition = 65;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getTextOpacityTransition() {
          if (textOpacityTransitionBuilder_ == null) {
            return textOpacityTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : textOpacityTransition_;
          } else {
            return textOpacityTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_opacity_transition = 65;</code>
         */
        public Builder setTextOpacityTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (textOpacityTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            textOpacityTransition_ = value;
            onChanged();
          } else {
            textOpacityTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_opacity_transition = 65;</code>
         */
        public Builder setTextOpacityTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (textOpacityTransitionBuilder_ == null) {
            textOpacityTransition_ = builderForValue.build();
            onChanged();
          } else {
            textOpacityTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_opacity_transition = 65;</code>
         */
        public Builder mergeTextOpacityTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (textOpacityTransitionBuilder_ == null) {
            if (textOpacityTransition_ != null) {
              textOpacityTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(textOpacityTransition_).mergeFrom(value).buildPartial();
            } else {
              textOpacityTransition_ = value;
            }
            onChanged();
          } else {
            textOpacityTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_opacity_transition = 65;</code>
         */
        public Builder clearTextOpacityTransition() {
          if (textOpacityTransitionBuilder_ == null) {
            textOpacityTransition_ = null;
            onChanged();
          } else {
            textOpacityTransition_ = null;
            textOpacityTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_opacity_transition = 65;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getTextOpacityTransitionBuilder() {
          
          onChanged();
          return getTextOpacityTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_opacity_transition = 65;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getTextOpacityTransitionOrBuilder() {
          if (textOpacityTransitionBuilder_ != null) {
            return textOpacityTransitionBuilder_.getMessageOrBuilder();
          } else {
            return textOpacityTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : textOpacityTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_opacity_transition = 65;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getTextOpacityTransitionFieldBuilder() {
          if (textOpacityTransitionBuilder_ == null) {
            textOpacityTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getTextOpacityTransition(),
                    getParentForChildren(),
                    isClean());
            textOpacityTransition_ = null;
          }
          return textOpacityTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions textColorTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> textColorTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_color_transition = 66;</code>
         */
        public boolean hasTextColorTransition() {
          return textColorTransitionBuilder_ != null || textColorTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_color_transition = 66;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getTextColorTransition() {
          if (textColorTransitionBuilder_ == null) {
            return textColorTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : textColorTransition_;
          } else {
            return textColorTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_color_transition = 66;</code>
         */
        public Builder setTextColorTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (textColorTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            textColorTransition_ = value;
            onChanged();
          } else {
            textColorTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_color_transition = 66;</code>
         */
        public Builder setTextColorTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (textColorTransitionBuilder_ == null) {
            textColorTransition_ = builderForValue.build();
            onChanged();
          } else {
            textColorTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_color_transition = 66;</code>
         */
        public Builder mergeTextColorTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (textColorTransitionBuilder_ == null) {
            if (textColorTransition_ != null) {
              textColorTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(textColorTransition_).mergeFrom(value).buildPartial();
            } else {
              textColorTransition_ = value;
            }
            onChanged();
          } else {
            textColorTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_color_transition = 66;</code>
         */
        public Builder clearTextColorTransition() {
          if (textColorTransitionBuilder_ == null) {
            textColorTransition_ = null;
            onChanged();
          } else {
            textColorTransition_ = null;
            textColorTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_color_transition = 66;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getTextColorTransitionBuilder() {
          
          onChanged();
          return getTextColorTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_color_transition = 66;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getTextColorTransitionOrBuilder() {
          if (textColorTransitionBuilder_ != null) {
            return textColorTransitionBuilder_.getMessageOrBuilder();
          } else {
            return textColorTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : textColorTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_color_transition = 66;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getTextColorTransitionFieldBuilder() {
          if (textColorTransitionBuilder_ == null) {
            textColorTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getTextColorTransition(),
                    getParentForChildren(),
                    isClean());
            textColorTransition_ = null;
          }
          return textColorTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions textHaloColorTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> textHaloColorTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_color_transition = 67;</code>
         */
        public boolean hasTextHaloColorTransition() {
          return textHaloColorTransitionBuilder_ != null || textHaloColorTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_color_transition = 67;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getTextHaloColorTransition() {
          if (textHaloColorTransitionBuilder_ == null) {
            return textHaloColorTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : textHaloColorTransition_;
          } else {
            return textHaloColorTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_color_transition = 67;</code>
         */
        public Builder setTextHaloColorTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (textHaloColorTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            textHaloColorTransition_ = value;
            onChanged();
          } else {
            textHaloColorTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_color_transition = 67;</code>
         */
        public Builder setTextHaloColorTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (textHaloColorTransitionBuilder_ == null) {
            textHaloColorTransition_ = builderForValue.build();
            onChanged();
          } else {
            textHaloColorTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_color_transition = 67;</code>
         */
        public Builder mergeTextHaloColorTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (textHaloColorTransitionBuilder_ == null) {
            if (textHaloColorTransition_ != null) {
              textHaloColorTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(textHaloColorTransition_).mergeFrom(value).buildPartial();
            } else {
              textHaloColorTransition_ = value;
            }
            onChanged();
          } else {
            textHaloColorTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_color_transition = 67;</code>
         */
        public Builder clearTextHaloColorTransition() {
          if (textHaloColorTransitionBuilder_ == null) {
            textHaloColorTransition_ = null;
            onChanged();
          } else {
            textHaloColorTransition_ = null;
            textHaloColorTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_color_transition = 67;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getTextHaloColorTransitionBuilder() {
          
          onChanged();
          return getTextHaloColorTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_color_transition = 67;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getTextHaloColorTransitionOrBuilder() {
          if (textHaloColorTransitionBuilder_ != null) {
            return textHaloColorTransitionBuilder_.getMessageOrBuilder();
          } else {
            return textHaloColorTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : textHaloColorTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_color_transition = 67;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getTextHaloColorTransitionFieldBuilder() {
          if (textHaloColorTransitionBuilder_ == null) {
            textHaloColorTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getTextHaloColorTransition(),
                    getParentForChildren(),
                    isClean());
            textHaloColorTransition_ = null;
          }
          return textHaloColorTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions textHaloWidthTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> textHaloWidthTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_width_transition = 68;</code>
         */
        public boolean hasTextHaloWidthTransition() {
          return textHaloWidthTransitionBuilder_ != null || textHaloWidthTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_width_transition = 68;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getTextHaloWidthTransition() {
          if (textHaloWidthTransitionBuilder_ == null) {
            return textHaloWidthTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : textHaloWidthTransition_;
          } else {
            return textHaloWidthTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_width_transition = 68;</code>
         */
        public Builder setTextHaloWidthTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (textHaloWidthTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            textHaloWidthTransition_ = value;
            onChanged();
          } else {
            textHaloWidthTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_width_transition = 68;</code>
         */
        public Builder setTextHaloWidthTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (textHaloWidthTransitionBuilder_ == null) {
            textHaloWidthTransition_ = builderForValue.build();
            onChanged();
          } else {
            textHaloWidthTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_width_transition = 68;</code>
         */
        public Builder mergeTextHaloWidthTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (textHaloWidthTransitionBuilder_ == null) {
            if (textHaloWidthTransition_ != null) {
              textHaloWidthTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(textHaloWidthTransition_).mergeFrom(value).buildPartial();
            } else {
              textHaloWidthTransition_ = value;
            }
            onChanged();
          } else {
            textHaloWidthTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_width_transition = 68;</code>
         */
        public Builder clearTextHaloWidthTransition() {
          if (textHaloWidthTransitionBuilder_ == null) {
            textHaloWidthTransition_ = null;
            onChanged();
          } else {
            textHaloWidthTransition_ = null;
            textHaloWidthTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_width_transition = 68;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getTextHaloWidthTransitionBuilder() {
          
          onChanged();
          return getTextHaloWidthTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_width_transition = 68;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getTextHaloWidthTransitionOrBuilder() {
          if (textHaloWidthTransitionBuilder_ != null) {
            return textHaloWidthTransitionBuilder_.getMessageOrBuilder();
          } else {
            return textHaloWidthTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : textHaloWidthTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_width_transition = 68;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getTextHaloWidthTransitionFieldBuilder() {
          if (textHaloWidthTransitionBuilder_ == null) {
            textHaloWidthTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getTextHaloWidthTransition(),
                    getParentForChildren(),
                    isClean());
            textHaloWidthTransition_ = null;
          }
          return textHaloWidthTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions textHaloBlurTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> textHaloBlurTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_blur_transition = 69;</code>
         */
        public boolean hasTextHaloBlurTransition() {
          return textHaloBlurTransitionBuilder_ != null || textHaloBlurTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_blur_transition = 69;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getTextHaloBlurTransition() {
          if (textHaloBlurTransitionBuilder_ == null) {
            return textHaloBlurTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : textHaloBlurTransition_;
          } else {
            return textHaloBlurTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_blur_transition = 69;</code>
         */
        public Builder setTextHaloBlurTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (textHaloBlurTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            textHaloBlurTransition_ = value;
            onChanged();
          } else {
            textHaloBlurTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_blur_transition = 69;</code>
         */
        public Builder setTextHaloBlurTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (textHaloBlurTransitionBuilder_ == null) {
            textHaloBlurTransition_ = builderForValue.build();
            onChanged();
          } else {
            textHaloBlurTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_blur_transition = 69;</code>
         */
        public Builder mergeTextHaloBlurTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (textHaloBlurTransitionBuilder_ == null) {
            if (textHaloBlurTransition_ != null) {
              textHaloBlurTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(textHaloBlurTransition_).mergeFrom(value).buildPartial();
            } else {
              textHaloBlurTransition_ = value;
            }
            onChanged();
          } else {
            textHaloBlurTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_blur_transition = 69;</code>
         */
        public Builder clearTextHaloBlurTransition() {
          if (textHaloBlurTransitionBuilder_ == null) {
            textHaloBlurTransition_ = null;
            onChanged();
          } else {
            textHaloBlurTransition_ = null;
            textHaloBlurTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_blur_transition = 69;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getTextHaloBlurTransitionBuilder() {
          
          onChanged();
          return getTextHaloBlurTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_blur_transition = 69;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getTextHaloBlurTransitionOrBuilder() {
          if (textHaloBlurTransitionBuilder_ != null) {
            return textHaloBlurTransitionBuilder_.getMessageOrBuilder();
          } else {
            return textHaloBlurTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : textHaloBlurTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_halo_blur_transition = 69;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getTextHaloBlurTransitionFieldBuilder() {
          if (textHaloBlurTransitionBuilder_ == null) {
            textHaloBlurTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getTextHaloBlurTransition(),
                    getParentForChildren(),
                    isClean());
            textHaloBlurTransition_ = null;
          }
          return textHaloBlurTransitionBuilder_;
        }

        private com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions textTranslateTransition_;
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> textTranslateTransitionBuilder_;
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_translate_transition = 70;</code>
         */
        public boolean hasTextTranslateTransition() {
          return textTranslateTransitionBuilder_ != null || textTranslateTransition_ != null;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_translate_transition = 70;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions getTextTranslateTransition() {
          if (textTranslateTransitionBuilder_ == null) {
            return textTranslateTransition_ == null ? com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : textTranslateTransition_;
          } else {
            return textTranslateTransitionBuilder_.getMessage();
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_translate_transition = 70;</code>
         */
        public Builder setTextTranslateTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (textTranslateTransitionBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            textTranslateTransition_ = value;
            onChanged();
          } else {
            textTranslateTransitionBuilder_.setMessage(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_translate_transition = 70;</code>
         */
        public Builder setTextTranslateTransition(
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder builderForValue) {
          if (textTranslateTransitionBuilder_ == null) {
            textTranslateTransition_ = builderForValue.build();
            onChanged();
          } else {
            textTranslateTransitionBuilder_.setMessage(builderForValue.build());
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_translate_transition = 70;</code>
         */
        public Builder mergeTextTranslateTransition(com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions value) {
          if (textTranslateTransitionBuilder_ == null) {
            if (textTranslateTransition_ != null) {
              textTranslateTransition_ =
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.newBuilder(textTranslateTransition_).mergeFrom(value).buildPartial();
            } else {
              textTranslateTransition_ = value;
            }
            onChanged();
          } else {
            textTranslateTransitionBuilder_.mergeFrom(value);
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_translate_transition = 70;</code>
         */
        public Builder clearTextTranslateTransition() {
          if (textTranslateTransitionBuilder_ == null) {
            textTranslateTransition_ = null;
            onChanged();
          } else {
            textTranslateTransition_ = null;
            textTranslateTransitionBuilder_ = null;
          }

          return this;
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_translate_transition = 70;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder getTextTranslateTransitionBuilder() {
          
          onChanged();
          return getTextTranslateTransitionFieldBuilder().getBuilder();
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_translate_transition = 70;</code>
         */
        public com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder getTextTranslateTransitionOrBuilder() {
          if (textTranslateTransitionBuilder_ != null) {
            return textTranslateTransitionBuilder_.getMessageOrBuilder();
          } else {
            return textTranslateTransition_ == null ?
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.getDefaultInstance() : textTranslateTransition_;
          }
        }
        /**
         * <code>.com.tophap.mapbox_gl.proto.TransitionOptions text_translate_transition = 70;</code>
         */
        private com.google.protobuf.SingleFieldBuilderV3<
            com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder> 
            getTextTranslateTransitionFieldBuilder() {
          if (textTranslateTransitionBuilder_ == null) {
            textTranslateTransitionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
                com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptions.Builder, com.tophap.mapbox_gl.proto.MapboxUtil.TransitionOptionsOrBuilder>(
                    getTextTranslateTransition(),
                    getParentForChildren(),
                    isClean());
            textTranslateTransition_ = null;
          }
          return textTranslateTransitionBuilder_;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:com.tophap.mapbox_gl.proto.Layer.Symbol)
      }

      // @@protoc_insertion_point(class_scope:com.tophap.mapbox_gl.proto.Layer.Symbol)
      private static final com.tophap.mapbox_gl.proto.Layers.Layer.Symbol DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.tophap.mapbox_gl.proto.Layers.Layer.Symbol();
      }

      public static com.tophap.mapbox_gl.proto.Layers.Layer.Symbol getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<Symbol>
          PARSER = new com.google.protobuf.AbstractParser<Symbol>() {
        @java.lang.Override
        public Symbol parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Symbol(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<Symbol> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<Symbol> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public com.tophap.mapbox_gl.proto.Layers.Layer.Symbol getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int typeCase_ = 0;
    private java.lang.Object type_;
    public enum TypeCase
        implements com.google.protobuf.Internal.EnumLite {
      BACKGROUND_LAYER(1),
      CIRCLE_LAYER(2),
      FILL_LAYER(3),
      FILL_EXTRUSION_LAYER(4),
      LINE_LAYER(5),
      SYMBOL_LAYER(6),
      HILLSHADE_LAYER(7),
      HEATMAP_LAYER(8),
      TYPE_NOT_SET(0);
      private final int value;
      private TypeCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static TypeCase valueOf(int value) {
        return forNumber(value);
      }

      public static TypeCase forNumber(int value) {
        switch (value) {
          case 1: return BACKGROUND_LAYER;
          case 2: return CIRCLE_LAYER;
          case 3: return FILL_LAYER;
          case 4: return FILL_EXTRUSION_LAYER;
          case 5: return LINE_LAYER;
          case 6: return SYMBOL_LAYER;
          case 7: return HILLSHADE_LAYER;
          case 8: return HEATMAP_LAYER;
          case 0: return TYPE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public TypeCase
    getTypeCase() {
      return TypeCase.forNumber(
          typeCase_);
    }

    public static final int BACKGROUND_LAYER_FIELD_NUMBER = 1;
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Background background_layer = 1;</code>
     */
    public boolean hasBackgroundLayer() {
      return typeCase_ == 1;
    }
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Background background_layer = 1;</code>
     */
    public com.tophap.mapbox_gl.proto.Layers.Layer.Background getBackgroundLayer() {
      if (typeCase_ == 1) {
         return (com.tophap.mapbox_gl.proto.Layers.Layer.Background) type_;
      }
      return com.tophap.mapbox_gl.proto.Layers.Layer.Background.getDefaultInstance();
    }
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Background background_layer = 1;</code>
     */
    public com.tophap.mapbox_gl.proto.Layers.Layer.BackgroundOrBuilder getBackgroundLayerOrBuilder() {
      if (typeCase_ == 1) {
         return (com.tophap.mapbox_gl.proto.Layers.Layer.Background) type_;
      }
      return com.tophap.mapbox_gl.proto.Layers.Layer.Background.getDefaultInstance();
    }

    public static final int CIRCLE_LAYER_FIELD_NUMBER = 2;
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Circle circle_layer = 2;</code>
     */
    public boolean hasCircleLayer() {
      return typeCase_ == 2;
    }
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Circle circle_layer = 2;</code>
     */
    public com.tophap.mapbox_gl.proto.Layers.Layer.Circle getCircleLayer() {
      if (typeCase_ == 2) {
         return (com.tophap.mapbox_gl.proto.Layers.Layer.Circle) type_;
      }
      return com.tophap.mapbox_gl.proto.Layers.Layer.Circle.getDefaultInstance();
    }
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Circle circle_layer = 2;</code>
     */
    public com.tophap.mapbox_gl.proto.Layers.Layer.CircleOrBuilder getCircleLayerOrBuilder() {
      if (typeCase_ == 2) {
         return (com.tophap.mapbox_gl.proto.Layers.Layer.Circle) type_;
      }
      return com.tophap.mapbox_gl.proto.Layers.Layer.Circle.getDefaultInstance();
    }

    public static final int FILL_LAYER_FIELD_NUMBER = 3;
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Fill fill_layer = 3;</code>
     */
    public boolean hasFillLayer() {
      return typeCase_ == 3;
    }
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Fill fill_layer = 3;</code>
     */
    public com.tophap.mapbox_gl.proto.Layers.Layer.Fill getFillLayer() {
      if (typeCase_ == 3) {
         return (com.tophap.mapbox_gl.proto.Layers.Layer.Fill) type_;
      }
      return com.tophap.mapbox_gl.proto.Layers.Layer.Fill.getDefaultInstance();
    }
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Fill fill_layer = 3;</code>
     */
    public com.tophap.mapbox_gl.proto.Layers.Layer.FillOrBuilder getFillLayerOrBuilder() {
      if (typeCase_ == 3) {
         return (com.tophap.mapbox_gl.proto.Layers.Layer.Fill) type_;
      }
      return com.tophap.mapbox_gl.proto.Layers.Layer.Fill.getDefaultInstance();
    }

    public static final int FILL_EXTRUSION_LAYER_FIELD_NUMBER = 4;
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.FillExtrusion fill_extrusion_layer = 4;</code>
     */
    public boolean hasFillExtrusionLayer() {
      return typeCase_ == 4;
    }
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.FillExtrusion fill_extrusion_layer = 4;</code>
     */
    public com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion getFillExtrusionLayer() {
      if (typeCase_ == 4) {
         return (com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion) type_;
      }
      return com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion.getDefaultInstance();
    }
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.FillExtrusion fill_extrusion_layer = 4;</code>
     */
    public com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusionOrBuilder getFillExtrusionLayerOrBuilder() {
      if (typeCase_ == 4) {
         return (com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion) type_;
      }
      return com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion.getDefaultInstance();
    }

    public static final int LINE_LAYER_FIELD_NUMBER = 5;
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Line line_layer = 5;</code>
     */
    public boolean hasLineLayer() {
      return typeCase_ == 5;
    }
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Line line_layer = 5;</code>
     */
    public com.tophap.mapbox_gl.proto.Layers.Layer.Line getLineLayer() {
      if (typeCase_ == 5) {
         return (com.tophap.mapbox_gl.proto.Layers.Layer.Line) type_;
      }
      return com.tophap.mapbox_gl.proto.Layers.Layer.Line.getDefaultInstance();
    }
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Line line_layer = 5;</code>
     */
    public com.tophap.mapbox_gl.proto.Layers.Layer.LineOrBuilder getLineLayerOrBuilder() {
      if (typeCase_ == 5) {
         return (com.tophap.mapbox_gl.proto.Layers.Layer.Line) type_;
      }
      return com.tophap.mapbox_gl.proto.Layers.Layer.Line.getDefaultInstance();
    }

    public static final int SYMBOL_LAYER_FIELD_NUMBER = 6;
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol symbol_layer = 6;</code>
     */
    public boolean hasSymbolLayer() {
      return typeCase_ == 6;
    }
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol symbol_layer = 6;</code>
     */
    public com.tophap.mapbox_gl.proto.Layers.Layer.Symbol getSymbolLayer() {
      if (typeCase_ == 6) {
         return (com.tophap.mapbox_gl.proto.Layers.Layer.Symbol) type_;
      }
      return com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.getDefaultInstance();
    }
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol symbol_layer = 6;</code>
     */
    public com.tophap.mapbox_gl.proto.Layers.Layer.SymbolOrBuilder getSymbolLayerOrBuilder() {
      if (typeCase_ == 6) {
         return (com.tophap.mapbox_gl.proto.Layers.Layer.Symbol) type_;
      }
      return com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.getDefaultInstance();
    }

    public static final int HILLSHADE_LAYER_FIELD_NUMBER = 7;
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Hillshade hillshade_layer = 7;</code>
     */
    public boolean hasHillshadeLayer() {
      return typeCase_ == 7;
    }
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Hillshade hillshade_layer = 7;</code>
     */
    public com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade getHillshadeLayer() {
      if (typeCase_ == 7) {
         return (com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade) type_;
      }
      return com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade.getDefaultInstance();
    }
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Hillshade hillshade_layer = 7;</code>
     */
    public com.tophap.mapbox_gl.proto.Layers.Layer.HillshadeOrBuilder getHillshadeLayerOrBuilder() {
      if (typeCase_ == 7) {
         return (com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade) type_;
      }
      return com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade.getDefaultInstance();
    }

    public static final int HEATMAP_LAYER_FIELD_NUMBER = 8;
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Heatmap heatmap_layer = 8;</code>
     */
    public boolean hasHeatmapLayer() {
      return typeCase_ == 8;
    }
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Heatmap heatmap_layer = 8;</code>
     */
    public com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap getHeatmapLayer() {
      if (typeCase_ == 8) {
         return (com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap) type_;
      }
      return com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap.getDefaultInstance();
    }
    /**
     * <code>.com.tophap.mapbox_gl.proto.Layer.Heatmap heatmap_layer = 8;</code>
     */
    public com.tophap.mapbox_gl.proto.Layers.Layer.HeatmapOrBuilder getHeatmapLayerOrBuilder() {
      if (typeCase_ == 8) {
         return (com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap) type_;
      }
      return com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (typeCase_ == 1) {
        output.writeMessage(1, (com.tophap.mapbox_gl.proto.Layers.Layer.Background) type_);
      }
      if (typeCase_ == 2) {
        output.writeMessage(2, (com.tophap.mapbox_gl.proto.Layers.Layer.Circle) type_);
      }
      if (typeCase_ == 3) {
        output.writeMessage(3, (com.tophap.mapbox_gl.proto.Layers.Layer.Fill) type_);
      }
      if (typeCase_ == 4) {
        output.writeMessage(4, (com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion) type_);
      }
      if (typeCase_ == 5) {
        output.writeMessage(5, (com.tophap.mapbox_gl.proto.Layers.Layer.Line) type_);
      }
      if (typeCase_ == 6) {
        output.writeMessage(6, (com.tophap.mapbox_gl.proto.Layers.Layer.Symbol) type_);
      }
      if (typeCase_ == 7) {
        output.writeMessage(7, (com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade) type_);
      }
      if (typeCase_ == 8) {
        output.writeMessage(8, (com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap) type_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (typeCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (com.tophap.mapbox_gl.proto.Layers.Layer.Background) type_);
      }
      if (typeCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (com.tophap.mapbox_gl.proto.Layers.Layer.Circle) type_);
      }
      if (typeCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (com.tophap.mapbox_gl.proto.Layers.Layer.Fill) type_);
      }
      if (typeCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion) type_);
      }
      if (typeCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, (com.tophap.mapbox_gl.proto.Layers.Layer.Line) type_);
      }
      if (typeCase_ == 6) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, (com.tophap.mapbox_gl.proto.Layers.Layer.Symbol) type_);
      }
      if (typeCase_ == 7) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, (com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade) type_);
      }
      if (typeCase_ == 8) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, (com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap) type_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.tophap.mapbox_gl.proto.Layers.Layer)) {
        return super.equals(obj);
      }
      com.tophap.mapbox_gl.proto.Layers.Layer other = (com.tophap.mapbox_gl.proto.Layers.Layer) obj;

      if (!getTypeCase().equals(other.getTypeCase())) return false;
      switch (typeCase_) {
        case 1:
          if (!getBackgroundLayer()
              .equals(other.getBackgroundLayer())) return false;
          break;
        case 2:
          if (!getCircleLayer()
              .equals(other.getCircleLayer())) return false;
          break;
        case 3:
          if (!getFillLayer()
              .equals(other.getFillLayer())) return false;
          break;
        case 4:
          if (!getFillExtrusionLayer()
              .equals(other.getFillExtrusionLayer())) return false;
          break;
        case 5:
          if (!getLineLayer()
              .equals(other.getLineLayer())) return false;
          break;
        case 6:
          if (!getSymbolLayer()
              .equals(other.getSymbolLayer())) return false;
          break;
        case 7:
          if (!getHillshadeLayer()
              .equals(other.getHillshadeLayer())) return false;
          break;
        case 8:
          if (!getHeatmapLayer()
              .equals(other.getHeatmapLayer())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (typeCase_) {
        case 1:
          hash = (37 * hash) + BACKGROUND_LAYER_FIELD_NUMBER;
          hash = (53 * hash) + getBackgroundLayer().hashCode();
          break;
        case 2:
          hash = (37 * hash) + CIRCLE_LAYER_FIELD_NUMBER;
          hash = (53 * hash) + getCircleLayer().hashCode();
          break;
        case 3:
          hash = (37 * hash) + FILL_LAYER_FIELD_NUMBER;
          hash = (53 * hash) + getFillLayer().hashCode();
          break;
        case 4:
          hash = (37 * hash) + FILL_EXTRUSION_LAYER_FIELD_NUMBER;
          hash = (53 * hash) + getFillExtrusionLayer().hashCode();
          break;
        case 5:
          hash = (37 * hash) + LINE_LAYER_FIELD_NUMBER;
          hash = (53 * hash) + getLineLayer().hashCode();
          break;
        case 6:
          hash = (37 * hash) + SYMBOL_LAYER_FIELD_NUMBER;
          hash = (53 * hash) + getSymbolLayer().hashCode();
          break;
        case 7:
          hash = (37 * hash) + HILLSHADE_LAYER_FIELD_NUMBER;
          hash = (53 * hash) + getHillshadeLayer().hashCode();
          break;
        case 8:
          hash = (37 * hash) + HEATMAP_LAYER_FIELD_NUMBER;
          hash = (53 * hash) + getHeatmapLayer().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.tophap.mapbox_gl.proto.Layers.Layer parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.tophap.mapbox_gl.proto.Layers.Layer parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.tophap.mapbox_gl.proto.Layers.Layer parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.tophap.mapbox_gl.proto.Layers.Layer parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.tophap.mapbox_gl.proto.Layers.Layer parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.tophap.mapbox_gl.proto.Layers.Layer parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.tophap.mapbox_gl.proto.Layers.Layer parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.tophap.mapbox_gl.proto.Layers.Layer parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.tophap.mapbox_gl.proto.Layers.Layer parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.tophap.mapbox_gl.proto.Layers.Layer parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.tophap.mapbox_gl.proto.Layers.Layer parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.tophap.mapbox_gl.proto.Layers.Layer parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.tophap.mapbox_gl.proto.Layers.Layer prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.tophap.mapbox_gl.proto.Layer}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.tophap.mapbox_gl.proto.Layer)
        com.tophap.mapbox_gl.proto.Layers.LayerOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.tophap.mapbox_gl.proto.Layers.Layer.class, com.tophap.mapbox_gl.proto.Layers.Layer.Builder.class);
      }

      // Construct using com.tophap.mapbox_gl.proto.Layers.Layer.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        typeCase_ = 0;
        type_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.tophap.mapbox_gl.proto.Layers.internal_static_com_tophap_mapbox_gl_proto_Layer_descriptor;
      }

      @java.lang.Override
      public com.tophap.mapbox_gl.proto.Layers.Layer getDefaultInstanceForType() {
        return com.tophap.mapbox_gl.proto.Layers.Layer.getDefaultInstance();
      }

      @java.lang.Override
      public com.tophap.mapbox_gl.proto.Layers.Layer build() {
        com.tophap.mapbox_gl.proto.Layers.Layer result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.tophap.mapbox_gl.proto.Layers.Layer buildPartial() {
        com.tophap.mapbox_gl.proto.Layers.Layer result = new com.tophap.mapbox_gl.proto.Layers.Layer(this);
        if (typeCase_ == 1) {
          if (backgroundLayerBuilder_ == null) {
            result.type_ = type_;
          } else {
            result.type_ = backgroundLayerBuilder_.build();
          }
        }
        if (typeCase_ == 2) {
          if (circleLayerBuilder_ == null) {
            result.type_ = type_;
          } else {
            result.type_ = circleLayerBuilder_.build();
          }
        }
        if (typeCase_ == 3) {
          if (fillLayerBuilder_ == null) {
            result.type_ = type_;
          } else {
            result.type_ = fillLayerBuilder_.build();
          }
        }
        if (typeCase_ == 4) {
          if (fillExtrusionLayerBuilder_ == null) {
            result.type_ = type_;
          } else {
            result.type_ = fillExtrusionLayerBuilder_.build();
          }
        }
        if (typeCase_ == 5) {
          if (lineLayerBuilder_ == null) {
            result.type_ = type_;
          } else {
            result.type_ = lineLayerBuilder_.build();
          }
        }
        if (typeCase_ == 6) {
          if (symbolLayerBuilder_ == null) {
            result.type_ = type_;
          } else {
            result.type_ = symbolLayerBuilder_.build();
          }
        }
        if (typeCase_ == 7) {
          if (hillshadeLayerBuilder_ == null) {
            result.type_ = type_;
          } else {
            result.type_ = hillshadeLayerBuilder_.build();
          }
        }
        if (typeCase_ == 8) {
          if (heatmapLayerBuilder_ == null) {
            result.type_ = type_;
          } else {
            result.type_ = heatmapLayerBuilder_.build();
          }
        }
        result.typeCase_ = typeCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.tophap.mapbox_gl.proto.Layers.Layer) {
          return mergeFrom((com.tophap.mapbox_gl.proto.Layers.Layer)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.tophap.mapbox_gl.proto.Layers.Layer other) {
        if (other == com.tophap.mapbox_gl.proto.Layers.Layer.getDefaultInstance()) return this;
        switch (other.getTypeCase()) {
          case BACKGROUND_LAYER: {
            mergeBackgroundLayer(other.getBackgroundLayer());
            break;
          }
          case CIRCLE_LAYER: {
            mergeCircleLayer(other.getCircleLayer());
            break;
          }
          case FILL_LAYER: {
            mergeFillLayer(other.getFillLayer());
            break;
          }
          case FILL_EXTRUSION_LAYER: {
            mergeFillExtrusionLayer(other.getFillExtrusionLayer());
            break;
          }
          case LINE_LAYER: {
            mergeLineLayer(other.getLineLayer());
            break;
          }
          case SYMBOL_LAYER: {
            mergeSymbolLayer(other.getSymbolLayer());
            break;
          }
          case HILLSHADE_LAYER: {
            mergeHillshadeLayer(other.getHillshadeLayer());
            break;
          }
          case HEATMAP_LAYER: {
            mergeHeatmapLayer(other.getHeatmapLayer());
            break;
          }
          case TYPE_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.tophap.mapbox_gl.proto.Layers.Layer parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.tophap.mapbox_gl.proto.Layers.Layer) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int typeCase_ = 0;
      private java.lang.Object type_;
      public TypeCase
          getTypeCase() {
        return TypeCase.forNumber(
            typeCase_);
      }

      public Builder clearType() {
        typeCase_ = 0;
        type_ = null;
        onChanged();
        return this;
      }


      private com.google.protobuf.SingleFieldBuilderV3<
          com.tophap.mapbox_gl.proto.Layers.Layer.Background, com.tophap.mapbox_gl.proto.Layers.Layer.Background.Builder, com.tophap.mapbox_gl.proto.Layers.Layer.BackgroundOrBuilder> backgroundLayerBuilder_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Background background_layer = 1;</code>
       */
      public boolean hasBackgroundLayer() {
        return typeCase_ == 1;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Background background_layer = 1;</code>
       */
      public com.tophap.mapbox_gl.proto.Layers.Layer.Background getBackgroundLayer() {
        if (backgroundLayerBuilder_ == null) {
          if (typeCase_ == 1) {
            return (com.tophap.mapbox_gl.proto.Layers.Layer.Background) type_;
          }
          return com.tophap.mapbox_gl.proto.Layers.Layer.Background.getDefaultInstance();
        } else {
          if (typeCase_ == 1) {
            return backgroundLayerBuilder_.getMessage();
          }
          return com.tophap.mapbox_gl.proto.Layers.Layer.Background.getDefaultInstance();
        }
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Background background_layer = 1;</code>
       */
      public Builder setBackgroundLayer(com.tophap.mapbox_gl.proto.Layers.Layer.Background value) {
        if (backgroundLayerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          type_ = value;
          onChanged();
        } else {
          backgroundLayerBuilder_.setMessage(value);
        }
        typeCase_ = 1;
        return this;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Background background_layer = 1;</code>
       */
      public Builder setBackgroundLayer(
          com.tophap.mapbox_gl.proto.Layers.Layer.Background.Builder builderForValue) {
        if (backgroundLayerBuilder_ == null) {
          type_ = builderForValue.build();
          onChanged();
        } else {
          backgroundLayerBuilder_.setMessage(builderForValue.build());
        }
        typeCase_ = 1;
        return this;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Background background_layer = 1;</code>
       */
      public Builder mergeBackgroundLayer(com.tophap.mapbox_gl.proto.Layers.Layer.Background value) {
        if (backgroundLayerBuilder_ == null) {
          if (typeCase_ == 1 &&
              type_ != com.tophap.mapbox_gl.proto.Layers.Layer.Background.getDefaultInstance()) {
            type_ = com.tophap.mapbox_gl.proto.Layers.Layer.Background.newBuilder((com.tophap.mapbox_gl.proto.Layers.Layer.Background) type_)
                .mergeFrom(value).buildPartial();
          } else {
            type_ = value;
          }
          onChanged();
        } else {
          if (typeCase_ == 1) {
            backgroundLayerBuilder_.mergeFrom(value);
          }
          backgroundLayerBuilder_.setMessage(value);
        }
        typeCase_ = 1;
        return this;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Background background_layer = 1;</code>
       */
      public Builder clearBackgroundLayer() {
        if (backgroundLayerBuilder_ == null) {
          if (typeCase_ == 1) {
            typeCase_ = 0;
            type_ = null;
            onChanged();
          }
        } else {
          if (typeCase_ == 1) {
            typeCase_ = 0;
            type_ = null;
          }
          backgroundLayerBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Background background_layer = 1;</code>
       */
      public com.tophap.mapbox_gl.proto.Layers.Layer.Background.Builder getBackgroundLayerBuilder() {
        return getBackgroundLayerFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Background background_layer = 1;</code>
       */
      public com.tophap.mapbox_gl.proto.Layers.Layer.BackgroundOrBuilder getBackgroundLayerOrBuilder() {
        if ((typeCase_ == 1) && (backgroundLayerBuilder_ != null)) {
          return backgroundLayerBuilder_.getMessageOrBuilder();
        } else {
          if (typeCase_ == 1) {
            return (com.tophap.mapbox_gl.proto.Layers.Layer.Background) type_;
          }
          return com.tophap.mapbox_gl.proto.Layers.Layer.Background.getDefaultInstance();
        }
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Background background_layer = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.tophap.mapbox_gl.proto.Layers.Layer.Background, com.tophap.mapbox_gl.proto.Layers.Layer.Background.Builder, com.tophap.mapbox_gl.proto.Layers.Layer.BackgroundOrBuilder> 
          getBackgroundLayerFieldBuilder() {
        if (backgroundLayerBuilder_ == null) {
          if (!(typeCase_ == 1)) {
            type_ = com.tophap.mapbox_gl.proto.Layers.Layer.Background.getDefaultInstance();
          }
          backgroundLayerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.tophap.mapbox_gl.proto.Layers.Layer.Background, com.tophap.mapbox_gl.proto.Layers.Layer.Background.Builder, com.tophap.mapbox_gl.proto.Layers.Layer.BackgroundOrBuilder>(
                  (com.tophap.mapbox_gl.proto.Layers.Layer.Background) type_,
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        typeCase_ = 1;
        onChanged();;
        return backgroundLayerBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          com.tophap.mapbox_gl.proto.Layers.Layer.Circle, com.tophap.mapbox_gl.proto.Layers.Layer.Circle.Builder, com.tophap.mapbox_gl.proto.Layers.Layer.CircleOrBuilder> circleLayerBuilder_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Circle circle_layer = 2;</code>
       */
      public boolean hasCircleLayer() {
        return typeCase_ == 2;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Circle circle_layer = 2;</code>
       */
      public com.tophap.mapbox_gl.proto.Layers.Layer.Circle getCircleLayer() {
        if (circleLayerBuilder_ == null) {
          if (typeCase_ == 2) {
            return (com.tophap.mapbox_gl.proto.Layers.Layer.Circle) type_;
          }
          return com.tophap.mapbox_gl.proto.Layers.Layer.Circle.getDefaultInstance();
        } else {
          if (typeCase_ == 2) {
            return circleLayerBuilder_.getMessage();
          }
          return com.tophap.mapbox_gl.proto.Layers.Layer.Circle.getDefaultInstance();
        }
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Circle circle_layer = 2;</code>
       */
      public Builder setCircleLayer(com.tophap.mapbox_gl.proto.Layers.Layer.Circle value) {
        if (circleLayerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          type_ = value;
          onChanged();
        } else {
          circleLayerBuilder_.setMessage(value);
        }
        typeCase_ = 2;
        return this;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Circle circle_layer = 2;</code>
       */
      public Builder setCircleLayer(
          com.tophap.mapbox_gl.proto.Layers.Layer.Circle.Builder builderForValue) {
        if (circleLayerBuilder_ == null) {
          type_ = builderForValue.build();
          onChanged();
        } else {
          circleLayerBuilder_.setMessage(builderForValue.build());
        }
        typeCase_ = 2;
        return this;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Circle circle_layer = 2;</code>
       */
      public Builder mergeCircleLayer(com.tophap.mapbox_gl.proto.Layers.Layer.Circle value) {
        if (circleLayerBuilder_ == null) {
          if (typeCase_ == 2 &&
              type_ != com.tophap.mapbox_gl.proto.Layers.Layer.Circle.getDefaultInstance()) {
            type_ = com.tophap.mapbox_gl.proto.Layers.Layer.Circle.newBuilder((com.tophap.mapbox_gl.proto.Layers.Layer.Circle) type_)
                .mergeFrom(value).buildPartial();
          } else {
            type_ = value;
          }
          onChanged();
        } else {
          if (typeCase_ == 2) {
            circleLayerBuilder_.mergeFrom(value);
          }
          circleLayerBuilder_.setMessage(value);
        }
        typeCase_ = 2;
        return this;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Circle circle_layer = 2;</code>
       */
      public Builder clearCircleLayer() {
        if (circleLayerBuilder_ == null) {
          if (typeCase_ == 2) {
            typeCase_ = 0;
            type_ = null;
            onChanged();
          }
        } else {
          if (typeCase_ == 2) {
            typeCase_ = 0;
            type_ = null;
          }
          circleLayerBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Circle circle_layer = 2;</code>
       */
      public com.tophap.mapbox_gl.proto.Layers.Layer.Circle.Builder getCircleLayerBuilder() {
        return getCircleLayerFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Circle circle_layer = 2;</code>
       */
      public com.tophap.mapbox_gl.proto.Layers.Layer.CircleOrBuilder getCircleLayerOrBuilder() {
        if ((typeCase_ == 2) && (circleLayerBuilder_ != null)) {
          return circleLayerBuilder_.getMessageOrBuilder();
        } else {
          if (typeCase_ == 2) {
            return (com.tophap.mapbox_gl.proto.Layers.Layer.Circle) type_;
          }
          return com.tophap.mapbox_gl.proto.Layers.Layer.Circle.getDefaultInstance();
        }
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Circle circle_layer = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.tophap.mapbox_gl.proto.Layers.Layer.Circle, com.tophap.mapbox_gl.proto.Layers.Layer.Circle.Builder, com.tophap.mapbox_gl.proto.Layers.Layer.CircleOrBuilder> 
          getCircleLayerFieldBuilder() {
        if (circleLayerBuilder_ == null) {
          if (!(typeCase_ == 2)) {
            type_ = com.tophap.mapbox_gl.proto.Layers.Layer.Circle.getDefaultInstance();
          }
          circleLayerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.tophap.mapbox_gl.proto.Layers.Layer.Circle, com.tophap.mapbox_gl.proto.Layers.Layer.Circle.Builder, com.tophap.mapbox_gl.proto.Layers.Layer.CircleOrBuilder>(
                  (com.tophap.mapbox_gl.proto.Layers.Layer.Circle) type_,
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        typeCase_ = 2;
        onChanged();;
        return circleLayerBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          com.tophap.mapbox_gl.proto.Layers.Layer.Fill, com.tophap.mapbox_gl.proto.Layers.Layer.Fill.Builder, com.tophap.mapbox_gl.proto.Layers.Layer.FillOrBuilder> fillLayerBuilder_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Fill fill_layer = 3;</code>
       */
      public boolean hasFillLayer() {
        return typeCase_ == 3;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Fill fill_layer = 3;</code>
       */
      public com.tophap.mapbox_gl.proto.Layers.Layer.Fill getFillLayer() {
        if (fillLayerBuilder_ == null) {
          if (typeCase_ == 3) {
            return (com.tophap.mapbox_gl.proto.Layers.Layer.Fill) type_;
          }
          return com.tophap.mapbox_gl.proto.Layers.Layer.Fill.getDefaultInstance();
        } else {
          if (typeCase_ == 3) {
            return fillLayerBuilder_.getMessage();
          }
          return com.tophap.mapbox_gl.proto.Layers.Layer.Fill.getDefaultInstance();
        }
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Fill fill_layer = 3;</code>
       */
      public Builder setFillLayer(com.tophap.mapbox_gl.proto.Layers.Layer.Fill value) {
        if (fillLayerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          type_ = value;
          onChanged();
        } else {
          fillLayerBuilder_.setMessage(value);
        }
        typeCase_ = 3;
        return this;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Fill fill_layer = 3;</code>
       */
      public Builder setFillLayer(
          com.tophap.mapbox_gl.proto.Layers.Layer.Fill.Builder builderForValue) {
        if (fillLayerBuilder_ == null) {
          type_ = builderForValue.build();
          onChanged();
        } else {
          fillLayerBuilder_.setMessage(builderForValue.build());
        }
        typeCase_ = 3;
        return this;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Fill fill_layer = 3;</code>
       */
      public Builder mergeFillLayer(com.tophap.mapbox_gl.proto.Layers.Layer.Fill value) {
        if (fillLayerBuilder_ == null) {
          if (typeCase_ == 3 &&
              type_ != com.tophap.mapbox_gl.proto.Layers.Layer.Fill.getDefaultInstance()) {
            type_ = com.tophap.mapbox_gl.proto.Layers.Layer.Fill.newBuilder((com.tophap.mapbox_gl.proto.Layers.Layer.Fill) type_)
                .mergeFrom(value).buildPartial();
          } else {
            type_ = value;
          }
          onChanged();
        } else {
          if (typeCase_ == 3) {
            fillLayerBuilder_.mergeFrom(value);
          }
          fillLayerBuilder_.setMessage(value);
        }
        typeCase_ = 3;
        return this;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Fill fill_layer = 3;</code>
       */
      public Builder clearFillLayer() {
        if (fillLayerBuilder_ == null) {
          if (typeCase_ == 3) {
            typeCase_ = 0;
            type_ = null;
            onChanged();
          }
        } else {
          if (typeCase_ == 3) {
            typeCase_ = 0;
            type_ = null;
          }
          fillLayerBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Fill fill_layer = 3;</code>
       */
      public com.tophap.mapbox_gl.proto.Layers.Layer.Fill.Builder getFillLayerBuilder() {
        return getFillLayerFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Fill fill_layer = 3;</code>
       */
      public com.tophap.mapbox_gl.proto.Layers.Layer.FillOrBuilder getFillLayerOrBuilder() {
        if ((typeCase_ == 3) && (fillLayerBuilder_ != null)) {
          return fillLayerBuilder_.getMessageOrBuilder();
        } else {
          if (typeCase_ == 3) {
            return (com.tophap.mapbox_gl.proto.Layers.Layer.Fill) type_;
          }
          return com.tophap.mapbox_gl.proto.Layers.Layer.Fill.getDefaultInstance();
        }
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Fill fill_layer = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.tophap.mapbox_gl.proto.Layers.Layer.Fill, com.tophap.mapbox_gl.proto.Layers.Layer.Fill.Builder, com.tophap.mapbox_gl.proto.Layers.Layer.FillOrBuilder> 
          getFillLayerFieldBuilder() {
        if (fillLayerBuilder_ == null) {
          if (!(typeCase_ == 3)) {
            type_ = com.tophap.mapbox_gl.proto.Layers.Layer.Fill.getDefaultInstance();
          }
          fillLayerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.tophap.mapbox_gl.proto.Layers.Layer.Fill, com.tophap.mapbox_gl.proto.Layers.Layer.Fill.Builder, com.tophap.mapbox_gl.proto.Layers.Layer.FillOrBuilder>(
                  (com.tophap.mapbox_gl.proto.Layers.Layer.Fill) type_,
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        typeCase_ = 3;
        onChanged();;
        return fillLayerBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion, com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion.Builder, com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusionOrBuilder> fillExtrusionLayerBuilder_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.FillExtrusion fill_extrusion_layer = 4;</code>
       */
      public boolean hasFillExtrusionLayer() {
        return typeCase_ == 4;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.FillExtrusion fill_extrusion_layer = 4;</code>
       */
      public com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion getFillExtrusionLayer() {
        if (fillExtrusionLayerBuilder_ == null) {
          if (typeCase_ == 4) {
            return (com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion) type_;
          }
          return com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion.getDefaultInstance();
        } else {
          if (typeCase_ == 4) {
            return fillExtrusionLayerBuilder_.getMessage();
          }
          return com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion.getDefaultInstance();
        }
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.FillExtrusion fill_extrusion_layer = 4;</code>
       */
      public Builder setFillExtrusionLayer(com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion value) {
        if (fillExtrusionLayerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          type_ = value;
          onChanged();
        } else {
          fillExtrusionLayerBuilder_.setMessage(value);
        }
        typeCase_ = 4;
        return this;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.FillExtrusion fill_extrusion_layer = 4;</code>
       */
      public Builder setFillExtrusionLayer(
          com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion.Builder builderForValue) {
        if (fillExtrusionLayerBuilder_ == null) {
          type_ = builderForValue.build();
          onChanged();
        } else {
          fillExtrusionLayerBuilder_.setMessage(builderForValue.build());
        }
        typeCase_ = 4;
        return this;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.FillExtrusion fill_extrusion_layer = 4;</code>
       */
      public Builder mergeFillExtrusionLayer(com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion value) {
        if (fillExtrusionLayerBuilder_ == null) {
          if (typeCase_ == 4 &&
              type_ != com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion.getDefaultInstance()) {
            type_ = com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion.newBuilder((com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion) type_)
                .mergeFrom(value).buildPartial();
          } else {
            type_ = value;
          }
          onChanged();
        } else {
          if (typeCase_ == 4) {
            fillExtrusionLayerBuilder_.mergeFrom(value);
          }
          fillExtrusionLayerBuilder_.setMessage(value);
        }
        typeCase_ = 4;
        return this;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.FillExtrusion fill_extrusion_layer = 4;</code>
       */
      public Builder clearFillExtrusionLayer() {
        if (fillExtrusionLayerBuilder_ == null) {
          if (typeCase_ == 4) {
            typeCase_ = 0;
            type_ = null;
            onChanged();
          }
        } else {
          if (typeCase_ == 4) {
            typeCase_ = 0;
            type_ = null;
          }
          fillExtrusionLayerBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.FillExtrusion fill_extrusion_layer = 4;</code>
       */
      public com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion.Builder getFillExtrusionLayerBuilder() {
        return getFillExtrusionLayerFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.FillExtrusion fill_extrusion_layer = 4;</code>
       */
      public com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusionOrBuilder getFillExtrusionLayerOrBuilder() {
        if ((typeCase_ == 4) && (fillExtrusionLayerBuilder_ != null)) {
          return fillExtrusionLayerBuilder_.getMessageOrBuilder();
        } else {
          if (typeCase_ == 4) {
            return (com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion) type_;
          }
          return com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion.getDefaultInstance();
        }
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.FillExtrusion fill_extrusion_layer = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion, com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion.Builder, com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusionOrBuilder> 
          getFillExtrusionLayerFieldBuilder() {
        if (fillExtrusionLayerBuilder_ == null) {
          if (!(typeCase_ == 4)) {
            type_ = com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion.getDefaultInstance();
          }
          fillExtrusionLayerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion, com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion.Builder, com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusionOrBuilder>(
                  (com.tophap.mapbox_gl.proto.Layers.Layer.FillExtrusion) type_,
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        typeCase_ = 4;
        onChanged();;
        return fillExtrusionLayerBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          com.tophap.mapbox_gl.proto.Layers.Layer.Line, com.tophap.mapbox_gl.proto.Layers.Layer.Line.Builder, com.tophap.mapbox_gl.proto.Layers.Layer.LineOrBuilder> lineLayerBuilder_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Line line_layer = 5;</code>
       */
      public boolean hasLineLayer() {
        return typeCase_ == 5;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Line line_layer = 5;</code>
       */
      public com.tophap.mapbox_gl.proto.Layers.Layer.Line getLineLayer() {
        if (lineLayerBuilder_ == null) {
          if (typeCase_ == 5) {
            return (com.tophap.mapbox_gl.proto.Layers.Layer.Line) type_;
          }
          return com.tophap.mapbox_gl.proto.Layers.Layer.Line.getDefaultInstance();
        } else {
          if (typeCase_ == 5) {
            return lineLayerBuilder_.getMessage();
          }
          return com.tophap.mapbox_gl.proto.Layers.Layer.Line.getDefaultInstance();
        }
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Line line_layer = 5;</code>
       */
      public Builder setLineLayer(com.tophap.mapbox_gl.proto.Layers.Layer.Line value) {
        if (lineLayerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          type_ = value;
          onChanged();
        } else {
          lineLayerBuilder_.setMessage(value);
        }
        typeCase_ = 5;
        return this;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Line line_layer = 5;</code>
       */
      public Builder setLineLayer(
          com.tophap.mapbox_gl.proto.Layers.Layer.Line.Builder builderForValue) {
        if (lineLayerBuilder_ == null) {
          type_ = builderForValue.build();
          onChanged();
        } else {
          lineLayerBuilder_.setMessage(builderForValue.build());
        }
        typeCase_ = 5;
        return this;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Line line_layer = 5;</code>
       */
      public Builder mergeLineLayer(com.tophap.mapbox_gl.proto.Layers.Layer.Line value) {
        if (lineLayerBuilder_ == null) {
          if (typeCase_ == 5 &&
              type_ != com.tophap.mapbox_gl.proto.Layers.Layer.Line.getDefaultInstance()) {
            type_ = com.tophap.mapbox_gl.proto.Layers.Layer.Line.newBuilder((com.tophap.mapbox_gl.proto.Layers.Layer.Line) type_)
                .mergeFrom(value).buildPartial();
          } else {
            type_ = value;
          }
          onChanged();
        } else {
          if (typeCase_ == 5) {
            lineLayerBuilder_.mergeFrom(value);
          }
          lineLayerBuilder_.setMessage(value);
        }
        typeCase_ = 5;
        return this;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Line line_layer = 5;</code>
       */
      public Builder clearLineLayer() {
        if (lineLayerBuilder_ == null) {
          if (typeCase_ == 5) {
            typeCase_ = 0;
            type_ = null;
            onChanged();
          }
        } else {
          if (typeCase_ == 5) {
            typeCase_ = 0;
            type_ = null;
          }
          lineLayerBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Line line_layer = 5;</code>
       */
      public com.tophap.mapbox_gl.proto.Layers.Layer.Line.Builder getLineLayerBuilder() {
        return getLineLayerFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Line line_layer = 5;</code>
       */
      public com.tophap.mapbox_gl.proto.Layers.Layer.LineOrBuilder getLineLayerOrBuilder() {
        if ((typeCase_ == 5) && (lineLayerBuilder_ != null)) {
          return lineLayerBuilder_.getMessageOrBuilder();
        } else {
          if (typeCase_ == 5) {
            return (com.tophap.mapbox_gl.proto.Layers.Layer.Line) type_;
          }
          return com.tophap.mapbox_gl.proto.Layers.Layer.Line.getDefaultInstance();
        }
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Line line_layer = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.tophap.mapbox_gl.proto.Layers.Layer.Line, com.tophap.mapbox_gl.proto.Layers.Layer.Line.Builder, com.tophap.mapbox_gl.proto.Layers.Layer.LineOrBuilder> 
          getLineLayerFieldBuilder() {
        if (lineLayerBuilder_ == null) {
          if (!(typeCase_ == 5)) {
            type_ = com.tophap.mapbox_gl.proto.Layers.Layer.Line.getDefaultInstance();
          }
          lineLayerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.tophap.mapbox_gl.proto.Layers.Layer.Line, com.tophap.mapbox_gl.proto.Layers.Layer.Line.Builder, com.tophap.mapbox_gl.proto.Layers.Layer.LineOrBuilder>(
                  (com.tophap.mapbox_gl.proto.Layers.Layer.Line) type_,
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        typeCase_ = 5;
        onChanged();;
        return lineLayerBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          com.tophap.mapbox_gl.proto.Layers.Layer.Symbol, com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Builder, com.tophap.mapbox_gl.proto.Layers.Layer.SymbolOrBuilder> symbolLayerBuilder_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol symbol_layer = 6;</code>
       */
      public boolean hasSymbolLayer() {
        return typeCase_ == 6;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol symbol_layer = 6;</code>
       */
      public com.tophap.mapbox_gl.proto.Layers.Layer.Symbol getSymbolLayer() {
        if (symbolLayerBuilder_ == null) {
          if (typeCase_ == 6) {
            return (com.tophap.mapbox_gl.proto.Layers.Layer.Symbol) type_;
          }
          return com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.getDefaultInstance();
        } else {
          if (typeCase_ == 6) {
            return symbolLayerBuilder_.getMessage();
          }
          return com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.getDefaultInstance();
        }
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol symbol_layer = 6;</code>
       */
      public Builder setSymbolLayer(com.tophap.mapbox_gl.proto.Layers.Layer.Symbol value) {
        if (symbolLayerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          type_ = value;
          onChanged();
        } else {
          symbolLayerBuilder_.setMessage(value);
        }
        typeCase_ = 6;
        return this;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol symbol_layer = 6;</code>
       */
      public Builder setSymbolLayer(
          com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Builder builderForValue) {
        if (symbolLayerBuilder_ == null) {
          type_ = builderForValue.build();
          onChanged();
        } else {
          symbolLayerBuilder_.setMessage(builderForValue.build());
        }
        typeCase_ = 6;
        return this;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol symbol_layer = 6;</code>
       */
      public Builder mergeSymbolLayer(com.tophap.mapbox_gl.proto.Layers.Layer.Symbol value) {
        if (symbolLayerBuilder_ == null) {
          if (typeCase_ == 6 &&
              type_ != com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.getDefaultInstance()) {
            type_ = com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.newBuilder((com.tophap.mapbox_gl.proto.Layers.Layer.Symbol) type_)
                .mergeFrom(value).buildPartial();
          } else {
            type_ = value;
          }
          onChanged();
        } else {
          if (typeCase_ == 6) {
            symbolLayerBuilder_.mergeFrom(value);
          }
          symbolLayerBuilder_.setMessage(value);
        }
        typeCase_ = 6;
        return this;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol symbol_layer = 6;</code>
       */
      public Builder clearSymbolLayer() {
        if (symbolLayerBuilder_ == null) {
          if (typeCase_ == 6) {
            typeCase_ = 0;
            type_ = null;
            onChanged();
          }
        } else {
          if (typeCase_ == 6) {
            typeCase_ = 0;
            type_ = null;
          }
          symbolLayerBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol symbol_layer = 6;</code>
       */
      public com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Builder getSymbolLayerBuilder() {
        return getSymbolLayerFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol symbol_layer = 6;</code>
       */
      public com.tophap.mapbox_gl.proto.Layers.Layer.SymbolOrBuilder getSymbolLayerOrBuilder() {
        if ((typeCase_ == 6) && (symbolLayerBuilder_ != null)) {
          return symbolLayerBuilder_.getMessageOrBuilder();
        } else {
          if (typeCase_ == 6) {
            return (com.tophap.mapbox_gl.proto.Layers.Layer.Symbol) type_;
          }
          return com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.getDefaultInstance();
        }
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Symbol symbol_layer = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.tophap.mapbox_gl.proto.Layers.Layer.Symbol, com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Builder, com.tophap.mapbox_gl.proto.Layers.Layer.SymbolOrBuilder> 
          getSymbolLayerFieldBuilder() {
        if (symbolLayerBuilder_ == null) {
          if (!(typeCase_ == 6)) {
            type_ = com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.getDefaultInstance();
          }
          symbolLayerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.tophap.mapbox_gl.proto.Layers.Layer.Symbol, com.tophap.mapbox_gl.proto.Layers.Layer.Symbol.Builder, com.tophap.mapbox_gl.proto.Layers.Layer.SymbolOrBuilder>(
                  (com.tophap.mapbox_gl.proto.Layers.Layer.Symbol) type_,
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        typeCase_ = 6;
        onChanged();;
        return symbolLayerBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade, com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade.Builder, com.tophap.mapbox_gl.proto.Layers.Layer.HillshadeOrBuilder> hillshadeLayerBuilder_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Hillshade hillshade_layer = 7;</code>
       */
      public boolean hasHillshadeLayer() {
        return typeCase_ == 7;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Hillshade hillshade_layer = 7;</code>
       */
      public com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade getHillshadeLayer() {
        if (hillshadeLayerBuilder_ == null) {
          if (typeCase_ == 7) {
            return (com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade) type_;
          }
          return com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade.getDefaultInstance();
        } else {
          if (typeCase_ == 7) {
            return hillshadeLayerBuilder_.getMessage();
          }
          return com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade.getDefaultInstance();
        }
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Hillshade hillshade_layer = 7;</code>
       */
      public Builder setHillshadeLayer(com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade value) {
        if (hillshadeLayerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          type_ = value;
          onChanged();
        } else {
          hillshadeLayerBuilder_.setMessage(value);
        }
        typeCase_ = 7;
        return this;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Hillshade hillshade_layer = 7;</code>
       */
      public Builder setHillshadeLayer(
          com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade.Builder builderForValue) {
        if (hillshadeLayerBuilder_ == null) {
          type_ = builderForValue.build();
          onChanged();
        } else {
          hillshadeLayerBuilder_.setMessage(builderForValue.build());
        }
        typeCase_ = 7;
        return this;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Hillshade hillshade_layer = 7;</code>
       */
      public Builder mergeHillshadeLayer(com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade value) {
        if (hillshadeLayerBuilder_ == null) {
          if (typeCase_ == 7 &&
              type_ != com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade.getDefaultInstance()) {
            type_ = com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade.newBuilder((com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade) type_)
                .mergeFrom(value).buildPartial();
          } else {
            type_ = value;
          }
          onChanged();
        } else {
          if (typeCase_ == 7) {
            hillshadeLayerBuilder_.mergeFrom(value);
          }
          hillshadeLayerBuilder_.setMessage(value);
        }
        typeCase_ = 7;
        return this;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Hillshade hillshade_layer = 7;</code>
       */
      public Builder clearHillshadeLayer() {
        if (hillshadeLayerBuilder_ == null) {
          if (typeCase_ == 7) {
            typeCase_ = 0;
            type_ = null;
            onChanged();
          }
        } else {
          if (typeCase_ == 7) {
            typeCase_ = 0;
            type_ = null;
          }
          hillshadeLayerBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Hillshade hillshade_layer = 7;</code>
       */
      public com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade.Builder getHillshadeLayerBuilder() {
        return getHillshadeLayerFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Hillshade hillshade_layer = 7;</code>
       */
      public com.tophap.mapbox_gl.proto.Layers.Layer.HillshadeOrBuilder getHillshadeLayerOrBuilder() {
        if ((typeCase_ == 7) && (hillshadeLayerBuilder_ != null)) {
          return hillshadeLayerBuilder_.getMessageOrBuilder();
        } else {
          if (typeCase_ == 7) {
            return (com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade) type_;
          }
          return com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade.getDefaultInstance();
        }
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Hillshade hillshade_layer = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade, com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade.Builder, com.tophap.mapbox_gl.proto.Layers.Layer.HillshadeOrBuilder> 
          getHillshadeLayerFieldBuilder() {
        if (hillshadeLayerBuilder_ == null) {
          if (!(typeCase_ == 7)) {
            type_ = com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade.getDefaultInstance();
          }
          hillshadeLayerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade, com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade.Builder, com.tophap.mapbox_gl.proto.Layers.Layer.HillshadeOrBuilder>(
                  (com.tophap.mapbox_gl.proto.Layers.Layer.Hillshade) type_,
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        typeCase_ = 7;
        onChanged();;
        return hillshadeLayerBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap, com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap.Builder, com.tophap.mapbox_gl.proto.Layers.Layer.HeatmapOrBuilder> heatmapLayerBuilder_;
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Heatmap heatmap_layer = 8;</code>
       */
      public boolean hasHeatmapLayer() {
        return typeCase_ == 8;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Heatmap heatmap_layer = 8;</code>
       */
      public com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap getHeatmapLayer() {
        if (heatmapLayerBuilder_ == null) {
          if (typeCase_ == 8) {
            return (com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap) type_;
          }
          return com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap.getDefaultInstance();
        } else {
          if (typeCase_ == 8) {
            return heatmapLayerBuilder_.getMessage();
          }
          return com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap.getDefaultInstance();
        }
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Heatmap heatmap_layer = 8;</code>
       */
      public Builder setHeatmapLayer(com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap value) {
        if (heatmapLayerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          type_ = value;
          onChanged();
        } else {
          heatmapLayerBuilder_.setMessage(value);
        }
        typeCase_ = 8;
        return this;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Heatmap heatmap_layer = 8;</code>
       */
      public Builder setHeatmapLayer(
          com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap.Builder builderForValue) {
        if (heatmapLayerBuilder_ == null) {
          type_ = builderForValue.build();
          onChanged();
        } else {
          heatmapLayerBuilder_.setMessage(builderForValue.build());
        }
        typeCase_ = 8;
        return this;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Heatmap heatmap_layer = 8;</code>
       */
      public Builder mergeHeatmapLayer(com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap value) {
        if (heatmapLayerBuilder_ == null) {
          if (typeCase_ == 8 &&
              type_ != com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap.getDefaultInstance()) {
            type_ = com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap.newBuilder((com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap) type_)
                .mergeFrom(value).buildPartial();
          } else {
            type_ = value;
          }
          onChanged();
        } else {
          if (typeCase_ == 8) {
            heatmapLayerBuilder_.mergeFrom(value);
          }
          heatmapLayerBuilder_.setMessage(value);
        }
        typeCase_ = 8;
        return this;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Heatmap heatmap_layer = 8;</code>
       */
      public Builder clearHeatmapLayer() {
        if (heatmapLayerBuilder_ == null) {
          if (typeCase_ == 8) {
            typeCase_ = 0;
            type_ = null;
            onChanged();
          }
        } else {
          if (typeCase_ == 8) {
            typeCase_ = 0;
            type_ = null;
          }
          heatmapLayerBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Heatmap heatmap_layer = 8;</code>
       */
      public com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap.Builder getHeatmapLayerBuilder() {
        return getHeatmapLayerFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Heatmap heatmap_layer = 8;</code>
       */
      public com.tophap.mapbox_gl.proto.Layers.Layer.HeatmapOrBuilder getHeatmapLayerOrBuilder() {
        if ((typeCase_ == 8) && (heatmapLayerBuilder_ != null)) {
          return heatmapLayerBuilder_.getMessageOrBuilder();
        } else {
          if (typeCase_ == 8) {
            return (com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap) type_;
          }
          return com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap.getDefaultInstance();
        }
      }
      /**
       * <code>.com.tophap.mapbox_gl.proto.Layer.Heatmap heatmap_layer = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap, com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap.Builder, com.tophap.mapbox_gl.proto.Layers.Layer.HeatmapOrBuilder> 
          getHeatmapLayerFieldBuilder() {
        if (heatmapLayerBuilder_ == null) {
          if (!(typeCase_ == 8)) {
            type_ = com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap.getDefaultInstance();
          }
          heatmapLayerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap, com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap.Builder, com.tophap.mapbox_gl.proto.Layers.Layer.HeatmapOrBuilder>(
                  (com.tophap.mapbox_gl.proto.Layers.Layer.Heatmap) type_,
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        typeCase_ = 8;
        onChanged();;
        return heatmapLayerBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.tophap.mapbox_gl.proto.Layer)
    }

    // @@protoc_insertion_point(class_scope:com.tophap.mapbox_gl.proto.Layer)
    private static final com.tophap.mapbox_gl.proto.Layers.Layer DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.tophap.mapbox_gl.proto.Layers.Layer();
    }

    public static com.tophap.mapbox_gl.proto.Layers.Layer getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Layer>
        PARSER = new com.google.protobuf.AbstractParser<Layer>() {
      @java.lang.Override
      public Layer parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Layer(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Layer> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Layer> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.tophap.mapbox_gl.proto.Layers.Layer getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_tophap_mapbox_gl_proto_Layer_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_tophap_mapbox_gl_proto_Layer_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_tophap_mapbox_gl_proto_Layer_Background_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_tophap_mapbox_gl_proto_Layer_Background_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_tophap_mapbox_gl_proto_Layer_Circle_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_tophap_mapbox_gl_proto_Layer_Circle_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_tophap_mapbox_gl_proto_Layer_FillExtrusion_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_tophap_mapbox_gl_proto_Layer_FillExtrusion_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_tophap_mapbox_gl_proto_Layer_Fill_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_tophap_mapbox_gl_proto_Layer_Fill_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_tophap_mapbox_gl_proto_Layer_Heatmap_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_tophap_mapbox_gl_proto_Layer_Heatmap_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_tophap_mapbox_gl_proto_Layer_Hillshade_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_tophap_mapbox_gl_proto_Layer_Hillshade_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_tophap_mapbox_gl_proto_Layer_Line_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_tophap_mapbox_gl_proto_Layer_Line_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_tophap_mapbox_gl_proto_Layer_Symbol_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_tophap_mapbox_gl_proto_Layer_Symbol_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\014layers.proto\022\032com.tophap.mapbox_gl.pro" +
      "to\032\nutil.proto\"\263K\n\005Layer\022H\n\020background_l" +
      "ayer\030\001 \001(\0132,.com.tophap.mapbox_gl.proto." +
      "Layer.BackgroundH\000\022@\n\014circle_layer\030\002 \001(\013" +
      "2(.com.tophap.mapbox_gl.proto.Layer.Circ" +
      "leH\000\022<\n\nfill_layer\030\003 \001(\0132&.com.tophap.ma" +
      "pbox_gl.proto.Layer.FillH\000\022O\n\024fill_extru" +
      "sion_layer\030\004 \001(\0132/.com.tophap.mapbox_gl." +
      "proto.Layer.FillExtrusionH\000\022<\n\nline_laye" +
      "r\030\005 \001(\0132&.com.tophap.mapbox_gl.proto.Lay" +
      "er.LineH\000\022@\n\014symbol_layer\030\006 \001(\0132(.com.to" +
      "phap.mapbox_gl.proto.Layer.SymbolH\000\022F\n\017h" +
      "illshade_layer\030\007 \001(\0132+.com.tophap.mapbox" +
      "_gl.proto.Layer.HillshadeH\000\022B\n\rheatmap_l" +
      "ayer\030\010 \001(\0132).com.tophap.mapbox_gl.proto." +
      "Layer.HeatmapH\000\032\357\002\n\nBackground\022\n\n\002id\030\001 \001" +
      "(\t\022\017\n\007visible\030\002 \001(\010\022\020\n\010min_zoom\030\003 \001(\002\022\020\n" +
      "\010max_zoom\030\004 \001(\002\0220\n\005color\030\005 \001(\0132!.com.top" +
      "hap.mapbox_gl.proto.Color\022\017\n\007pattern\030\006 \001" +
      "(\t\022G\n\020color_transition\030\010 \001(\0132-.com.topha" +
      "p.mapbox_gl.proto.TransitionOptions\022I\n\022p" +
      "attern_transition\030\t \001(\0132-.com.tophap.map" +
      "box_gl.proto.TransitionOptions\022I\n\022opacit" +
      "y_transition\030\n \001(\0132-.com.tophap.mapbox_g" +
      "l.proto.TransitionOptions\032\302\010\n\006Circle\022\n\n\002" +
      "id\030\001 \001(\t\022\021\n\tsource_id\030\002 \001(\t\022\017\n\007visible\030\003" +
      " \001(\010\022\020\n\010min_zoom\030\004 \001(\002\022\020\n\010max_zoom\030\005 \001(\002" +
      "\022\016\n\006radius\030\006 \001(\002\0220\n\005color\030\007 \001(\0132!.com.to" +
      "phap.mapbox_gl.proto.Color\022\014\n\004blur\030\010 \001(\002" +
      "\022\021\n\ttranslate\030\n \003(\002\022E\n\020translate_anchor\030" +
      "\013 \001(\0162+.com.tophap.mapbox_gl.proto.Trans" +
      "lateAnchor\022@\n\013pitch_scale\030\014 \001(\0162+.com.to" +
      "phap.mapbox_gl.proto.TranslateAnchor\022D\n\017" +
      "pitch_alignment\030\r \001(\0162+.com.tophap.mapbo" +
      "x_gl.proto.TranslateAnchor\022\024\n\014stroke_wid" +
      "th\030\016 \001(\002\0227\n\014stroke_color\030\017 \001(\0132!.com.top" +
      "hap.mapbox_gl.proto.Color\022H\n\021radius_tran" +
      "sition\030\021 \001(\0132-.com.tophap.mapbox_gl.prot" +
      "o.TransitionOptions\022G\n\020color_transition\030" +
      "\022 \001(\0132-.com.tophap.mapbox_gl.proto.Trans" +
      "itionOptions\022F\n\017blur_transition\030\023 \001(\0132-." +
      "com.tophap.mapbox_gl.proto.TransitionOpt" +
      "ions\022I\n\022opacity_transition\030\024 \001(\0132-.com.t" +
      "ophap.mapbox_gl.proto.TransitionOptions\022" +
      "K\n\024translate_transition\030\025 \001(\0132-.com.toph" +
      "ap.mapbox_gl.proto.TransitionOptions\022N\n\027" +
      "stroke_width_transition\030\026 \001(\0132-.com.toph" +
      "ap.mapbox_gl.proto.TransitionOptions\022N\n\027" +
      "stroke_color_transition\030\027 \001(\0132-.com.toph" +
      "ap.mapbox_gl.proto.TransitionOptions\022P\n\031" +
      "stroke_opacity_transition\030\030 \001(\0132-.com.to" +
      "phap.mapbox_gl.proto.TransitionOptions\032\367" +
      "\005\n\rFillExtrusion\022\n\n\002id\030\001 \001(\t\022\021\n\tsource_i" +
      "d\030\002 \001(\t\022\017\n\007visible\030\003 \001(\010\022\020\n\010min_zoom\030\004 \001" +
      "(\002\022\020\n\010max_zoom\030\005 \001(\002\0220\n\005color\030\007 \001(\0132!.co" +
      "m.tophap.mapbox_gl.proto.Color\022\021\n\ttransl" +
      "ate\030\010 \003(\002\022E\n\020translate_anchor\030\t \001(\0162+.co" +
      "m.tophap.mapbox_gl.proto.TranslateAnchor" +
      "\022\017\n\007pattern\030\n \001(\t\022\016\n\006height\030\013 \001(\002\022\014\n\004bas" +
      "e\030\014 \001(\002\022\031\n\021vertical_gradient\030\r \001(\010\022I\n\022op" +
      "acity_transition\030\016 \001(\0132-.com.tophap.mapb" +
      "ox_gl.proto.TransitionOptions\022G\n\020color_t" +
      "ransition\030\017 \001(\0132-.com.tophap.mapbox_gl.p" +
      "roto.TransitionOptions\022K\n\024translate_tran" +
      "sition\030\020 \001(\0132-.com.tophap.mapbox_gl.prot" +
      "o.TransitionOptions\022I\n\022pattern_transitio" +
      "n\030\021 \001(\0132-.com.tophap.mapbox_gl.proto.Tra" +
      "nsitionOptions\022H\n\021height_transition\030\022 \001(" +
      "\0132-.com.tophap.mapbox_gl.proto.Transitio" +
      "nOptions\022F\n\017base_transition\030\023 \001(\0132-.com." +
      "tophap.mapbox_gl.proto.TransitionOptions" +
      "\032\301\005\n\004Fill\022\n\n\002id\030\001 \001(\t\022\021\n\tsource_id\030\002 \001(\t" +
      "\022\017\n\007visible\030\003 \001(\010\022\020\n\010min_zoom\030\004 \001(\002\022\020\n\010m" +
      "ax_zoom\030\005 \001(\002\022\021\n\tantialias\030\006 \001(\010\0220\n\005colo" +
      "r\030\010 \001(\0132!.com.tophap.mapbox_gl.proto.Col" +
      "or\0228\n\routline_color\030\t \001(\0132!.com.tophap.m" +
      "apbox_gl.proto.Color\022\021\n\ttranslate\030\n \003(\002\022" +
      "E\n\020translate_anchor\030\013 \001(\0162+.com.tophap.m" +
      "apbox_gl.proto.TranslateAnchor\022\017\n\007patter" +
      "n\030\014 \001(\t\022I\n\022opacity_transition\030\r \001(\0132-.co" +
      "m.tophap.mapbox_gl.proto.TransitionOptio" +
      "ns\022G\n\020color_transition\030\016 \001(\0132-.com.topha" +
      "p.mapbox_gl.proto.TransitionOptions\022O\n\030o" +
      "utline_color_transition\030\017 \001(\0132-.com.toph" +
      "ap.mapbox_gl.proto.TransitionOptions\022K\n\024" +
      "translate_transition\030\020 \001(\0132-.com.tophap." +
      "mapbox_gl.proto.TransitionOptions\022I\n\022pat" +
      "tern_transition\030\021 \001(\0132-.com.tophap.mapbo" +
      "x_gl.proto.TransitionOptions\032\244\003\n\007Heatmap" +
      "\022\n\n\002id\030\001 \001(\t\022\021\n\tsource_id\030\002 \001(\t\022\017\n\007visib" +
      "le\030\003 \001(\010\022\020\n\010min_zoom\030\004 \001(\002\022\020\n\010max_zoom\030\005" +
      " \001(\002\022\016\n\006radius\030\006 \001(\002\022\016\n\006weight\030\007 \001(\002\022\021\n\t" +
      "intensity\030\010 \001(\002\0220\n\005color\030\t \001(\0132!.com.top" +
      "hap.mapbox_gl.proto.Color\022H\n\021radius_tran" +
      "sition\030\013 \001(\0132-.com.tophap.mapbox_gl.prot" +
      "o.TransitionOptions\022K\n\024intensity_transit" +
      "ion\030\014 \001(\0132-.com.tophap.mapbox_gl.proto.T" +
      "ransitionOptions\022I\n\022opacity_transition\030\r" +
      " \001(\0132-.com.tophap.mapbox_gl.proto.Transi" +
      "tionOptions\032\320\005\n\tHillshade\022\n\n\002id\030\001 \001(\t\022\021\n" +
      "\tsource_id\030\002 \001(\t\022\017\n\007visible\030\003 \001(\010\022\020\n\010min" +
      "_zoom\030\004 \001(\002\022\020\n\010max_zoom\030\005 \001(\002\022\036\n\026illumin" +
      "ation_direction\030\006 \001(\002\022H\n\023illumination_an" +
      "chor\030\007 \001(\0162+.com.tophap.mapbox_gl.proto." +
      "TranslateAnchor\022\024\n\014exaggeration\030\010 \001(\002\0227\n" +
      "\014shadow_color\030\t \001(\0132!.com.tophap.mapbox_" +
      "gl.proto.Color\022:\n\017highlight_color\030\n \001(\0132" +
      "!.com.tophap.mapbox_gl.proto.Color\0227\n\014ac" +
      "cent_color\030\013 \001(\0132!.com.tophap.mapbox_gl." +
      "proto.Color\022N\n\027exaggeration_transition\030\014" +
      " \001(\0132-.com.tophap.mapbox_gl.proto.Transi" +
      "tionOptions\022N\n\027shadow_color_transition\030\r" +
      " \001(\0132-.com.tophap.mapbox_gl.proto.Transi" +
      "tionOptions\022Q\n\032highlight_color_transitio" +
      "n\030\016 \001(\0132-.com.tophap.mapbox_gl.proto.Tra" +
      "nsitionOptions\022N\n\027accent_color_transitio" +
      "n\030\017 \001(\0132-.com.tophap.mapbox_gl.proto.Tra" +
      "nsitionOptions\032\207\n\n\004Line\022\n\n\002id\030\001 \001(\t\022\021\n\ts" +
      "ource_id\030\002 \001(\t\022\017\n\007visible\030\003 \001(\010\022\020\n\010min_z" +
      "oom\030\004 \001(\002\022\020\n\010max_zoom\030\005 \001(\002\0227\n\003cap\030\006 \001(\016" +
      "2*.com.tophap.mapbox_gl.proto.Layer.Line" +
      ".Cap\0229\n\004join\030\007 \001(\0162+.com.tophap.mapbox_g" +
      "l.proto.Layer.Line.Join\022\023\n\013miter_limit\030\010" +
      " \001(\002\022\023\n\013round_limit\030\t \001(\002\0220\n\005color\030\013 \001(\013" +
      "2!.com.tophap.mapbox_gl.proto.Color\022\021\n\tt" +
      "ranslate\030\014 \003(\002\022E\n\020translate_anchor\030\r \001(\016" +
      "2+.com.tophap.mapbox_gl.proto.TranslateA" +
      "nchor\022\r\n\005width\030\016 \001(\002\022\021\n\tgap_width\030\017 \001(\002\022" +
      "\016\n\006offset\030\020 \001(\002\022\014\n\004blur\030\021 \001(\002\022\021\n\tdasharr" +
      "ay\030\022 \003(\002\022\017\n\007pattern\030\023 \001(\t\022\020\n\010gradient\030\024 " +
      "\001(\005\022I\n\022opacity_transition\030\025 \001(\0132-.com.to" +
      "phap.mapbox_gl.proto.TransitionOptions\022G" +
      "\n\020color_transition\030\026 \001(\0132-.com.tophap.ma" +
      "pbox_gl.proto.TransitionOptions\022K\n\024trans" +
      "late_transition\030\027 \001(\0132-.com.tophap.mapbo" +
      "x_gl.proto.TransitionOptions\022G\n\020width_tr" +
      "ansition\030\030 \001(\0132-.com.tophap.mapbox_gl.pr" +
      "oto.TransitionOptions\022K\n\024gap_width_trans" +
      "ition\030\031 \001(\0132-.com.tophap.mapbox_gl.proto" +
      ".TransitionOptions\022H\n\021offset_transition\030" +
      "\032 \001(\0132-.com.tophap.mapbox_gl.proto.Trans" +
      "itionOptions\022F\n\017blur_transition\030\033 \001(\0132-." +
      "com.tophap.mapbox_gl.proto.TransitionOpt" +
      "ions\022K\n\024dasharray_transition\030\034 \001(\0132-.com" +
      ".tophap.mapbox_gl.proto.TransitionOption" +
      "s\022I\n\022pattern_transition\030\035 \001(\0132-.com.toph" +
      "ap.mapbox_gl.proto.TransitionOptions\"2\n\003" +
      "Cap\022\014\n\010CAP_BUTT\020\000\022\r\n\tCAP_ROUND\020\001\022\016\n\nCAP_" +
      "SQUARE\020\003\"6\n\004Join\022\016\n\nJOIN_MITER\020\000\022\016\n\nJOIN" +
      "_BEVEL\020\001\022\016\n\nJOIN_ROUND\020\002\032\201\035\n\006Symbol\022\n\n\002i" +
      "d\030\001 \001(\t\022\021\n\tsource_id\030\002 \001(\t\022\017\n\007visible\030\003 " +
      "\001(\010\022\020\n\010min_zoom\030\004 \001(\002\022\020\n\010max_zoom\030\005 \001(\002\022" +
      "L\n\020symbol_placement\030\006 \001(\01622.com.tophap.m" +
      "apbox_gl.proto.Layer.Symbol.Placement\022\026\n" +
      "\016symbol_spacing\030\007 \001(\002\022\032\n\022symbol_avoid_ed" +
      "ges\030\010 \001(\010\022G\n\016symbol_z_order\030\t \001(\0162/.com." +
      "tophap.mapbox_gl.proto.Layer.Symbol.ZOrd" +
      "er\022\032\n\022icon_allow_overlap\030\n \001(\010\022\035\n\025icon_i" +
      "gnore_placement\030\013 \001(\010\022\025\n\ricon_optional\030\014" +
      " \001(\010\022S\n\027icon_rotation_alignment\030\r \001(\01622." +
      "com.tophap.mapbox_gl.proto.Layer.Symbol." +
      "Alignment\022\021\n\ticon_size\030\016 \001(\002\022G\n\ricon_tex" +
      "t_fit\030\017 \001(\01620.com.tophap.mapbox_gl.proto" +
      ".Layer.Symbol.TextFit\022\035\n\025icon_text_fit_p" +
      "adding\030\020 \003(\002\022\022\n\nicon_image\030\021 \001(\t\022\023\n\013icon" +
      "_rotate\030\022 \001(\002\022\024\n\014icon_padding\030\023 \001(\002\022\031\n\021i" +
      "con_keep_upright\030\024 \001(\010\022\023\n\013icon_offset\030\025 " +
      "\003(\002\022?\n\013icon_anchor\030\026 \001(\0162*.com.tophap.ma" +
      "pbox_gl.proto.PositionAnchor\022P\n\024icon_pit" +
      "ch_alignment\030\027 \001(\01622.com.tophap.mapbox_g" +
      "l.proto.Layer.Symbol.Alignment\022P\n\024text_p" +
      "itch_alignment\030\030 \001(\01622.com.tophap.mapbox" +
      "_gl.proto.Layer.Symbol.Alignment\022S\n\027text" +
      "_rotation_alignment\030\031 \001(\01622.com.tophap.m" +
      "apbox_gl.proto.Layer.Symbol.Alignment\022@\n" +
      "\ntext_field\030\032 \003(\0132,.com.tophap.mapbox_gl" +
      ".proto.FormattedSection\022\021\n\ttext_font\030\033 \003" +
      "(\t\022\021\n\ttext_size\030\034 \001(\002\022\026\n\016text_max_width\030" +
      "\035 \001(\002\022\030\n\020text_line_height\030\036 \001(\002\022\033\n\023text_" +
      "letter_spacing\030\037 \001(\002\022J\n\014text_justify\030  \001" +
      "(\01624.com.tophap.mapbox_gl.proto.Layer.Sy" +
      "mbol.TextJustify\022\032\n\022text_radial_offset\030!" +
      " \001(\002\022H\n\024text_variable_anchor\030\" \003(\0162*.com" +
      ".tophap.mapbox_gl.proto.PositionAnchor\022?" +
      "\n\013text_anchor\030# \001(\0162*.com.tophap.mapbox_" +
      "gl.proto.PositionAnchor\022\026\n\016text_max_angl" +
      "e\030$ \001(\002\022\023\n\013text_rotate\030% \001(\002\022\024\n\014text_pad" +
      "ding\030& \001(\002\022\031\n\021text_keep_upright\030\' \001(\010\022N\n" +
      "\016text_transform\030( \001(\01626.com.tophap.mapbo" +
      "x_gl.proto.Layer.Symbol.TextTransform\022\023\n" +
      "\013text_offset\030) \003(\002\022\032\n\022text_allow_overlap" +
      "\030* \001(\010\022\035\n\025text_ignore_placement\030+ \001(\010\022\025\n" +
      "\rtext_optional\030, \001(\010\0225\n\nicon_color\030. \001(\013" +
      "2!.com.tophap.mapbox_gl.proto.Color\022:\n\017i" +
      "con_halo_color\030/ \001(\0132!.com.tophap.mapbox" +
      "_gl.proto.Color\022\027\n\017icon_halo_width\0300 \001(\002" +
      "\022\026\n\016icon_halo_blur\0301 \001(\002\022\026\n\016icon_transla" +
      "te\0302 \003(\002\022J\n\025icon_translate_anchor\0303 \001(\0162" +
      "+.com.tophap.mapbox_gl.proto.TranslateAn" +
      "chor\0225\n\ntext_color\0305 \001(\0132!.com.tophap.ma" +
      "pbox_gl.proto.Color\022:\n\017text_halo_color\0306" +
      " \001(\0132!.com.tophap.mapbox_gl.proto.Color\022" +
      "\027\n\017text_halo_width\0307 \001(\002\022\026\n\016text_halo_bl" +
      "ur\0308 \001(\002\022\026\n\016text_translate\0309 \003(\002\022J\n\025text" +
      "_translate_anchor\030: \001(\0162+.com.tophap.map" +
      "box_gl.proto.TranslateAnchor\022N\n\027icon_opa" +
      "city_transition\030; \001(\0132-.com.tophap.mapbo" +
      "x_gl.proto.TransitionOptions\022L\n\025icon_col" +
      "or_transition\030< \001(\0132-.com.tophap.mapbox_" +
      "gl.proto.TransitionOptions\022Q\n\032icon_halo_" +
      "color_transition\030= \001(\0132-.com.tophap.mapb" +
      "ox_gl.proto.TransitionOptions\022Q\n\032icon_ha" +
      "lo_width_transition\030> \001(\0132-.com.tophap.m" +
      "apbox_gl.proto.TransitionOptions\022P\n\031icon" +
      "_halo_blur_transition\030? \001(\0132-.com.tophap" +
      ".mapbox_gl.proto.TransitionOptions\022P\n\031ic" +
      "on_translate_transition\030@ \001(\0132-.com.toph" +
      "ap.mapbox_gl.proto.TransitionOptions\022N\n\027" +
      "text_opacity_transition\030A \001(\0132-.com.toph" +
      "ap.mapbox_gl.proto.TransitionOptions\022L\n\025" +
      "text_color_transition\030B \001(\0132-.com.tophap" +
      ".mapbox_gl.proto.TransitionOptions\022Q\n\032te" +
      "xt_halo_color_transition\030C \001(\0132-.com.top" +
      "hap.mapbox_gl.proto.TransitionOptions\022Q\n" +
      "\032text_halo_width_transition\030D \001(\0132-.com." +
      "tophap.mapbox_gl.proto.TransitionOptions" +
      "\022P\n\031text_halo_blur_transition\030E \001(\0132-.co" +
      "m.tophap.mapbox_gl.proto.TransitionOptio" +
      "ns\022P\n\031text_translate_transition\030F \001(\0132-." +
      "com.tophap.mapbox_gl.proto.TransitionOpt" +
      "ions\"O\n\tPlacement\022\023\n\017PLACEMENT_POINT\020\000\022\022" +
      "\n\016PLACEMENT_LINE\020\001\022\031\n\025PLACEMENT_LINE_CEN" +
      "TER\020\002\"F\n\006ZOrder\022\020\n\014Z_ORDER_AUTO\020\000\022\026\n\022Z_O" +
      "RDER_VIEWPORT_Y\020\001\022\022\n\016Z_ORDER_SOURCE\020\002\"J\n" +
      "\tAlignment\022\022\n\016ALIGNMENT_AUTO\020\000\022\021\n\rALIGNM" +
      "ENT_MAP\020\001\022\026\n\022ALIGNMENT_VIEWPORT\020\002\"X\n\007Tex" +
      "tFit\022\021\n\rTEXT_FIT_NONE\020\000\022\022\n\016TEXT_FIT_WIDT" +
      "H\020\001\022\023\n\017TEXT_FIT_HEIGHT\020\002\022\021\n\rTEXT_FIT_BOT" +
      "H\020\003\"X\n\013TextJustify\022\020\n\014JUSTIFY_AUTO\020\000\022\020\n\014" +
      "JUSTIFY_LEFT\020\001\022\022\n\016JUSTIFY_CENTER\020\002\022\021\n\rJU" +
      "STIFY_RIGHT\020\003\"U\n\rTextTransform\022\022\n\016TRANSF" +
      "ORM_NONE\020\000\022\027\n\023TRANSFORM_UPPERCASE\020\001\022\027\n\023T" +
      "RANSFORM_LOWERCASE\020\002B\006\n\004typeB$\n\032com.toph" +
      "ap.mapbox_gl.protoB\006Layersb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.tophap.mapbox_gl.proto.MapboxUtil.getDescriptor(),
        }, assigner);
    internal_static_com_tophap_mapbox_gl_proto_Layer_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_com_tophap_mapbox_gl_proto_Layer_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_tophap_mapbox_gl_proto_Layer_descriptor,
        new java.lang.String[] { "BackgroundLayer", "CircleLayer", "FillLayer", "FillExtrusionLayer", "LineLayer", "SymbolLayer", "HillshadeLayer", "HeatmapLayer", "Type", });
    internal_static_com_tophap_mapbox_gl_proto_Layer_Background_descriptor =
      internal_static_com_tophap_mapbox_gl_proto_Layer_descriptor.getNestedTypes().get(0);
    internal_static_com_tophap_mapbox_gl_proto_Layer_Background_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_tophap_mapbox_gl_proto_Layer_Background_descriptor,
        new java.lang.String[] { "Id", "Visible", "MinZoom", "MaxZoom", "Color", "Pattern", "ColorTransition", "PatternTransition", "OpacityTransition", });
    internal_static_com_tophap_mapbox_gl_proto_Layer_Circle_descriptor =
      internal_static_com_tophap_mapbox_gl_proto_Layer_descriptor.getNestedTypes().get(1);
    internal_static_com_tophap_mapbox_gl_proto_Layer_Circle_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_tophap_mapbox_gl_proto_Layer_Circle_descriptor,
        new java.lang.String[] { "Id", "SourceId", "Visible", "MinZoom", "MaxZoom", "Radius", "Color", "Blur", "Translate", "TranslateAnchor", "PitchScale", "PitchAlignment", "StrokeWidth", "StrokeColor", "RadiusTransition", "ColorTransition", "BlurTransition", "OpacityTransition", "TranslateTransition", "StrokeWidthTransition", "StrokeColorTransition", "StrokeOpacityTransition", });
    internal_static_com_tophap_mapbox_gl_proto_Layer_FillExtrusion_descriptor =
      internal_static_com_tophap_mapbox_gl_proto_Layer_descriptor.getNestedTypes().get(2);
    internal_static_com_tophap_mapbox_gl_proto_Layer_FillExtrusion_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_tophap_mapbox_gl_proto_Layer_FillExtrusion_descriptor,
        new java.lang.String[] { "Id", "SourceId", "Visible", "MinZoom", "MaxZoom", "Color", "Translate", "TranslateAnchor", "Pattern", "Height", "Base", "VerticalGradient", "OpacityTransition", "ColorTransition", "TranslateTransition", "PatternTransition", "HeightTransition", "BaseTransition", });
    internal_static_com_tophap_mapbox_gl_proto_Layer_Fill_descriptor =
      internal_static_com_tophap_mapbox_gl_proto_Layer_descriptor.getNestedTypes().get(3);
    internal_static_com_tophap_mapbox_gl_proto_Layer_Fill_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_tophap_mapbox_gl_proto_Layer_Fill_descriptor,
        new java.lang.String[] { "Id", "SourceId", "Visible", "MinZoom", "MaxZoom", "Antialias", "Color", "OutlineColor", "Translate", "TranslateAnchor", "Pattern", "OpacityTransition", "ColorTransition", "OutlineColorTransition", "TranslateTransition", "PatternTransition", });
    internal_static_com_tophap_mapbox_gl_proto_Layer_Heatmap_descriptor =
      internal_static_com_tophap_mapbox_gl_proto_Layer_descriptor.getNestedTypes().get(4);
    internal_static_com_tophap_mapbox_gl_proto_Layer_Heatmap_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_tophap_mapbox_gl_proto_Layer_Heatmap_descriptor,
        new java.lang.String[] { "Id", "SourceId", "Visible", "MinZoom", "MaxZoom", "Radius", "Weight", "Intensity", "Color", "RadiusTransition", "IntensityTransition", "OpacityTransition", });
    internal_static_com_tophap_mapbox_gl_proto_Layer_Hillshade_descriptor =
      internal_static_com_tophap_mapbox_gl_proto_Layer_descriptor.getNestedTypes().get(5);
    internal_static_com_tophap_mapbox_gl_proto_Layer_Hillshade_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_tophap_mapbox_gl_proto_Layer_Hillshade_descriptor,
        new java.lang.String[] { "Id", "SourceId", "Visible", "MinZoom", "MaxZoom", "IlluminationDirection", "IlluminationAnchor", "Exaggeration", "ShadowColor", "HighlightColor", "AccentColor", "ExaggerationTransition", "ShadowColorTransition", "HighlightColorTransition", "AccentColorTransition", });
    internal_static_com_tophap_mapbox_gl_proto_Layer_Line_descriptor =
      internal_static_com_tophap_mapbox_gl_proto_Layer_descriptor.getNestedTypes().get(6);
    internal_static_com_tophap_mapbox_gl_proto_Layer_Line_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_tophap_mapbox_gl_proto_Layer_Line_descriptor,
        new java.lang.String[] { "Id", "SourceId", "Visible", "MinZoom", "MaxZoom", "Cap", "Join", "MiterLimit", "RoundLimit", "Color", "Translate", "TranslateAnchor", "Width", "GapWidth", "Offset", "Blur", "Dasharray", "Pattern", "Gradient", "OpacityTransition", "ColorTransition", "TranslateTransition", "WidthTransition", "GapWidthTransition", "OffsetTransition", "BlurTransition", "DasharrayTransition", "PatternTransition", });
    internal_static_com_tophap_mapbox_gl_proto_Layer_Symbol_descriptor =
      internal_static_com_tophap_mapbox_gl_proto_Layer_descriptor.getNestedTypes().get(7);
    internal_static_com_tophap_mapbox_gl_proto_Layer_Symbol_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_tophap_mapbox_gl_proto_Layer_Symbol_descriptor,
        new java.lang.String[] { "Id", "SourceId", "Visible", "MinZoom", "MaxZoom", "SymbolPlacement", "SymbolSpacing", "SymbolAvoidEdges", "SymbolZOrder", "IconAllowOverlap", "IconIgnorePlacement", "IconOptional", "IconRotationAlignment", "IconSize", "IconTextFit", "IconTextFitPadding", "IconImage", "IconRotate", "IconPadding", "IconKeepUpright", "IconOffset", "IconAnchor", "IconPitchAlignment", "TextPitchAlignment", "TextRotationAlignment", "TextField", "TextFont", "TextSize", "TextMaxWidth", "TextLineHeight", "TextLetterSpacing", "TextJustify", "TextRadialOffset", "TextVariableAnchor", "TextAnchor", "TextMaxAngle", "TextRotate", "TextPadding", "TextKeepUpright", "TextTransform", "TextOffset", "TextAllowOverlap", "TextIgnorePlacement", "TextOptional", "IconColor", "IconHaloColor", "IconHaloWidth", "IconHaloBlur", "IconTranslate", "IconTranslateAnchor", "TextColor", "TextHaloColor", "TextHaloWidth", "TextHaloBlur", "TextTranslate", "TextTranslateAnchor", "IconOpacityTransition", "IconColorTransition", "IconHaloColorTransition", "IconHaloWidthTransition", "IconHaloBlurTransition", "IconTranslateTransition", "TextOpacityTransition", "TextColorTransition", "TextHaloColorTransition", "TextHaloWidthTransition", "TextHaloBlurTransition", "TextTranslateTransition", });
    com.tophap.mapbox_gl.proto.MapboxUtil.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
